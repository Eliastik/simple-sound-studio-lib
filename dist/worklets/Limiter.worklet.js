const e={BITCRUSHER:"bitcrusher-processor",LIMITER:"limiter-processor",SOUNDTOUCH:"soundtouch-worklet",RECORDER_WORKLET:"recorder-worklet",PASSTHROUGH:"passthrough"};class t{constructor(e){this._array=new Float32Array,this.n=0,this.length=0,this.readPointer=0,this.writePointer=0,this.n=Math.floor(e),this.init()}init(){this._array=new Float32Array(2*this.n),this.length=this._array.length,this.readPointer=0,this.writePointer=this.n-1,this._array.fill(0)}read(){const e=this._array[this.readPointer%this.length];return this.readPointer=(this.readPointer+1)%this.length,e}push(e){this._array[this.writePointer%this.length]=e,this.writePointer=(this.writePointer+1)%this.length}reset(){this.init()}clear(){this._array=new Float32Array,this.length=0,this.readPointer=0,this.writePointer=0}sum(){return this._array.reduce(((e,t)=>e+t),0)}}class r extends AudioWorkletProcessor{constructor(){super(),this.delayBuffer=[],this.envelopeSample=0,this.stopped=!1,this.disabled=!1,this.port.onmessage=e=>{"reset"==e.data?this.reset():"stop"==e.data?this.stop():"disable"==e.data?this.disabled=!0:"enable"==e.data&&(this.disabled=!1)}}static get parameterDescriptors(){return[{name:"preGain",defaultValue:0},{name:"postGain",defaultValue:0},{name:"attackTime",defaultValue:0},{name:"releaseTime",defaultValue:3},{name:"threshold",defaultValue:-.05},{name:"lookAheadTime",defaultValue:0}]}get defaultParameterDescriptors(){return r.parameterDescriptors}getEnvelope(e,t,r,s){const i=Math.exp(-1/(s*t)),a=Math.exp(-1/(s*r)),l=new Float32Array(e.length);for(let t=0;t<e.length;t++){const r=Math.abs(e[t]);this.envelopeSample<r?this.envelopeSample=r+i*(this.envelopeSample-r):this.envelopeSample=r+a*(this.envelopeSample-r),l[t]=this.envelopeSample}return l}getMaxEnvelope(e,t,r){let s=e[0][r];for(let i=0;i<t;i++)e[i][r]>s&&(s=e[i][r]);return s}ampToDB(e){return 20*Math.log10(e)}dBToAmp(e){return Math.pow(10,e/20)}process(e,r,s){if(this.stopped)return!1;const i=e[0],a=r[0],l=[],h=this.dBToAmp(s.postGain[0]),o=this.dBToAmp(s.preGain[0]);for(let e=0;e<a.length;e++){const r=i[e],h=a[e];if(null==this.delayBuffer[e]&&(this.delayBuffer[e]=new t(s.lookAheadTime[0]*sampleRate)),r&&h)for(let e=0;e<r.length;++e)this.disabled?h[e]=r[e]:h[e]=o*r[e];!this.disabled&&h&&(l[e]=this.getEnvelope(h,s.attackTime[0],s.releaseTime[0],sampleRate))}for(let e=0;e<a.length;e++){const t=i[e],r=a[e];if(s.lookAheadTime[0]>0&&r)for(let t=0;t<r.length;t++)this.delayBuffer[e].push(r[t]),r[t]=this.delayBuffer[e].read();if(this.disabled)continue;const o=1;if(t&&r)for(let e=0;e<t.length;e++){let t=o*(s.threshold[0]-this.ampToDB(this.getMaxEnvelope(l,a.length,e)));t=Math.min(0,t);const i=this.dBToAmp(t);r[e]*=i*h}}return!0}reset(){for(let e=0;e<this.delayBuffer.length;e++)null!=this.delayBuffer[e]&&this.delayBuffer[e].reset();this.envelopeSample=0}stop(){for(let e=0;e<this.delayBuffer.length;e++)null!=this.delayBuffer[e]&&this.delayBuffer[e].clear();this.delayBuffer=[],this.envelopeSample=0,this.stopped=!0}}registerProcessor(e.LIMITER,r);
