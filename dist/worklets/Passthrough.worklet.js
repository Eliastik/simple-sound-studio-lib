const s={BITCRUSHER:"bitcrusher-processor",LIMITER:"limiter-processor",SOUNDTOUCH:"soundtouch-worklet",RECORDER_WORKLET:"recorder-worklet",PASSTHROUGH:"passthrough"};class t extends AudioWorkletProcessor{constructor(){super(),this.stopped=!1,this.samplesCount=0,this.port.onmessage=s=>{"stop"==s.data&&this.stop()}}static get parameterDescriptors(){return[]}get defaultParameterDescriptors(){return t.parameterDescriptors}process(s,t){if(this.stopped)return!1;const e=s[0],r=t[0];if(e&&e[0]&&(this.samplesCount+=e[0].length),r){for(let s=0;s<r.length;s++){const t=e[s],o=r[s];if(t)for(let s=0;s<t.length;s++)o[s]=t[s]}this.port.postMessage({command:"update",samplesCount:this.samplesCount})}return!0}stop(){this.stopped=!0}}registerProcessor(s.PASSTHROUGH,t);
