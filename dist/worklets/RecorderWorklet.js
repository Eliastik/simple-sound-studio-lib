const r={BITCRUSHER:"bitcrusher-processor",LIMITER:"limiter-processor",SOUNDTOUCH:"soundtouch-worklet",RECORDER_WORKLET:"recorder-worklet",PASSTHROUGH:"passthrough"};class e extends AudioWorkletProcessor{constructor(){super(),this.recording=!1,this.port.onmessage=r=>{"stop"==r.data?this.recording=!1:"record"==r.data&&(this.recording=!0)}}static get parameterDescriptors(){return[{name:"numChannels",defaultValue:2}]}process(r,e,s){if(!this.recording)return!0;const t=r[0],o=[];if(t&&t.length>0){for(let r=0;r<s.numChannels[0];r++)t[r]?o.push(t[r]):o.push(t[0]);this.port.postMessage({command:"record",buffer:o})}return!0}}registerProcessor(r.RECORDER_WORKLET,e);
