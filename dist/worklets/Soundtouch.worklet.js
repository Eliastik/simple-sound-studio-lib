function t(t,e,s,i){return new(s||(s=Promise))((function(r,o){function u(t){try{n(i.next(t))}catch(t){o(t)}}function h(t){try{n(i.throw(t))}catch(t){o(t)}}function n(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(u,h)}n((i=i.apply(t,e||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;class e{constructor(){this._vector=new Float32Array,this._position=0,this._frameCount=0}get vector(){return this._vector}get position(){return this._position}get startIndex(){return 2*this._position}get frameCount(){return this._frameCount}get endIndex(){return 2*(this._position+this._frameCount)}clear(){this.receive(this._frameCount),this.rewind()}put(t){this._frameCount+=t}putSamples(t,e,s=0){const i=2*(e=e||0);s>=0||(s=(t.length-i)/2);const r=2*s;this.ensureCapacity(s+this._frameCount);const o=this.endIndex;this.vector.set(t.subarray(i,i+r),o),this._frameCount+=s}putBuffer(t,e,s=0){e=e||0,s>=0||(s=t.frameCount-e),this.putSamples(t.vector,t.position+e,s)}receive(t){t>=0&&!(t>this._frameCount)||(t=this.frameCount),this._frameCount-=t,this._position+=t}receiveSamples(t,e=0){const s=2*e,i=this.startIndex;t.set(this._vector.subarray(i,i+s)),this.receive(e)}extract(t,e=0,s=0){const i=this.startIndex+2*e,r=2*s;t.set(this._vector.subarray(i,i+r))}ensureCapacity(t=0){const e=parseInt(2*t);if(this._vector.length<e){const t=new Float32Array(e);t.set(this._vector.subarray(this.startIndex,this.endIndex)),this._vector=t,this._position=0}else this.rewind()}ensureAdditionalCapacity(t=0){this.ensureCapacity(this._frameCount+t)}rewind(){this._position>0&&(this._vector.set(this._vector.subarray(this.startIndex,this.endIndex)),this._position=0)}}class s{constructor(t){t?(this._inputBuffer=new e,this._outputBuffer=new e):this._inputBuffer=this._outputBuffer=null}get inputBuffer(){return this._inputBuffer}set inputBuffer(t){this._inputBuffer=t}get outputBuffer(){return this._outputBuffer}set outputBuffer(t){this._outputBuffer=t}clear(){this._inputBuffer.clear(),this._outputBuffer.clear()}}class i extends s{constructor(t){super(t),this.reset(),this._rate=1}set rate(t){this._rate=t}reset(){this.slopeCount=0,this.prevSampleL=0,this.prevSampleR=0}clone(){const t=new i;return t.rate=this._rate,t}process(){const t=this._inputBuffer.frameCount;this._outputBuffer.ensureAdditionalCapacity(t/this._rate+1);const e=this.transpose(t);this._inputBuffer.receive(),this._outputBuffer.put(e)}transpose(t=0){if(0===t)return 0;const e=this._inputBuffer.vector,s=this._inputBuffer.startIndex,i=this._outputBuffer.vector,r=this._outputBuffer.endIndex;let o=0,u=0;for(;this.slopeCount<1;)i[r+2*u]=(1-this.slopeCount)*this.prevSampleL+this.slopeCount*e[s],i[r+2*u+1]=(1-this.slopeCount)*this.prevSampleR+this.slopeCount*e[s+1],u+=1,this.slopeCount+=this._rate;if(this.slopeCount-=1,1!==t)t:for(;;){for(;this.slopeCount>1;)if(this.slopeCount-=1,o+=1,o>=t-1)break t;const h=s+2*o;i[r+2*u]=(1-this.slopeCount)*e[h]+this.slopeCount*e[h+2],i[r+2*u+1]=(1-this.slopeCount)*e[h+1]+this.slopeCount*e[h+3],u+=1,this.slopeCount+=this._rate}return this.prevSampleL=e[s+2*t-2],this.prevSampleR=e[s+2*t-1],u}}class r{constructor(t){this._pipe=t}get pipe(){return this._pipe}get inputBuffer(){return this._pipe.inputBuffer}get outputBuffer(){return this._pipe.outputBuffer}fillInputBuffer(){throw new Error("fillInputBuffer() not overridden")}fillOutputBuffer(t=0){for(;this.outputBuffer.frameCount<t;){const t=16384-this.inputBuffer.frameCount;if(this.fillInputBuffer(t),this.inputBuffer.frameCount<16384)break;this._pipe.process()}}clear(){this._pipe.clear()}}const o=function(){};class u extends r{constructor(t,e,s=o){super(e),this.callback=s,this.sourceSound=t,this.historyBufferSize=22050,this._sourcePosition=0,this.outputBufferPosition=0,this._position=0}get position(){return this._position}set position(t){if(t>this._position)throw new RangeError("New position may not be greater than current position");const e=this.outputBufferPosition-(this._position-t);if(e<0)throw new RangeError("New position falls outside of history buffer");this.outputBufferPosition=e,this._position=t}get sourcePosition(){return this._sourcePosition}set sourcePosition(t){this.clear(),this._sourcePosition=t}onEnd(){this.callback()}fillInputBuffer(t=0){const e=new Float32Array(2*t),s=this.sourceSound.extract(e,t,this._sourcePosition);this._sourcePosition+=s,this.inputBuffer.putSamples(e,0,s)}extract(t,e=0){this.fillOutputBuffer(this.outputBufferPosition+e);const s=Math.min(e,this.outputBuffer.frameCount-this.outputBufferPosition);this.outputBuffer.extract(t,this.outputBufferPosition,s);const i=this.outputBufferPosition+s;return this.outputBufferPosition=Math.min(this.historyBufferSize,i),this.outputBuffer.receive(Math.max(i-this.historyBufferSize,0)),this._position+=s,s}handleSampleData(t){this.extract(t.data,4096)}clear(){super.clear(),this.outputBufferPosition=0}}const h=[[124,186,248,310,372,434,496,558,620,682,744,806,868,930,992,1054,1116,1178,1240,1302,1364,1426,1488,0],[-100,-75,-50,-25,25,50,75,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-20,-15,-10,-5,5,10,15,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-4,-3,-2,-1,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],n=-10/1.5;class a extends s{constructor(t){super(t),this._quickSeek=!0,this.midBufferDirty=!1,this.midBuffer=null,this.overlapLength=0,this.autoSeqSetting=!0,this.autoSeekSetting=!0,this._tempo=1,this.setParameters(44100,0,0,8)}clear(){super.clear(),this.clearMidBuffer()}clearMidBuffer(){this.midBufferDirty&&(this.midBufferDirty=!1,this.midBuffer=null)}setParameters(t,e,s,i){t>0&&(this.sampleRate=t),i>0&&(this.overlapMs=i),e>0?(this.sequenceMs=e,this.autoSeqSetting=!1):this.autoSeqSetting=!0,s>0?(this.seekWindowMs=s,this.autoSeekSetting=!1):this.autoSeekSetting=!0,this.calculateSequenceParameters(),this.calculateOverlapLength(this.overlapMs),this.tempo=this._tempo}set tempo(t){let e;this._tempo=t,this.calculateSequenceParameters(),this.nominalSkip=this._tempo*(this.seekWindowLength-this.overlapLength),this.skipFract=0,e=Math.floor(this.nominalSkip+.5),this.sampleReq=Math.max(e+this.overlapLength,this.seekWindowLength)+this.seekLength}get tempo(){return this._tempo}get inputChunkSize(){return this.sampleReq}get outputChunkSize(){return this.overlapLength+Math.max(0,this.seekWindowLength-2*this.overlapLength)}calculateOverlapLength(t=0){let e;e=this.sampleRate*t/1e3,e=e<16?16:e,e-=e%8,this.overlapLength=e,this.refMidBuffer=new Float32Array(2*this.overlapLength),this.midBuffer=new Float32Array(2*this.overlapLength)}checkLimits(t,e,s){return t<e?e:t>s?s:t}calculateSequenceParameters(){let t,e;this.autoSeqSetting&&(t=150+-50*this._tempo,t=this.checkLimits(t,50,125),this.sequenceMs=Math.floor(t+.5)),this.autoSeekSetting&&(e=28.333333333333332+n*this._tempo,e=this.checkLimits(e,15,25),this.seekWindowMs=Math.floor(e+.5)),this.seekWindowLength=Math.floor(this.sampleRate*this.sequenceMs/1e3),this.seekLength=Math.floor(this.sampleRate*this.seekWindowMs/1e3)}set quickSeek(t){this._quickSeek=t}clone(){const t=new a;return t.tempo=this._tempo,t.setParameters(this.sampleRate,this.sequenceMs,this.seekWindowMs,this.overlapMs),t}seekBestOverlapPosition(){return this._quickSeek?this.seekBestOverlapPositionStereoQuick():this.seekBestOverlapPositionStereo()}seekBestOverlapPositionStereo(){let t,e,s,i=0;for(this.preCalculateCorrelationReferenceStereo(),t=0,e=Number.MIN_VALUE;i<this.seekLength;i+=1)s=this.calculateCrossCorrelationStereo(2*i,this.refMidBuffer),s>e&&(e=s,t=i);return t}seekBestOverlapPositionStereoQuick(){let t,e,s,i,r,o=0;for(this.preCalculateCorrelationReferenceStereo(),e=Number.MIN_VALUE,t=0,i=0,r=0;o<4;o+=1){let u=0;for(;h[o][u]&&(r=i+h[o][u],!(r>=this.seekLength));)s=this.calculateCrossCorrelationStereo(2*r,this.refMidBuffer),s>e&&(e=s,t=r),u+=1;i=t}return t}preCalculateCorrelationReferenceStereo(){let t,e,s=0;for(;s<this.overlapLength;s+=1)e=s*(this.overlapLength-s),t=2*s,this.refMidBuffer[t]=this.midBuffer[t]*e,this.refMidBuffer[t+1]=this.midBuffer[t+1]*e}calculateCrossCorrelationStereo(t,e){const s=this._inputBuffer.vector;t+=this._inputBuffer.startIndex;let i=0,r=2;const o=2*this.overlapLength;let u;for(;r<o;r+=2)u=r+t,i+=s[u]*e[r]+s[u+1]*e[r+1];return i}overlap(t){this.overlapStereo(2*t)}overlapStereo(t){const e=this._inputBuffer.vector;t+=this._inputBuffer.startIndex;const s=this._outputBuffer.vector,i=this._outputBuffer.endIndex;let r,o,u=0;const h=1/this.overlapLength;let n,a,p;for(;u<this.overlapLength;u+=1)o=(this.overlapLength-u)*h,n=u*h,r=2*u,a=r+t,p=r+i,s[p+0]=e[a+0]*n+this.midBuffer[r+0]*o,s[p+1]=e[a+1]*n+this.midBuffer[r+1]*o}process(){let t,e,s;if(null===this.midBuffer){if(this._inputBuffer.frameCount<this.overlapLength)return;this.midBuffer=new Float32Array(2*this.overlapLength),this._inputBuffer.receiveSamples(this.midBuffer,this.overlapLength)}for(;this._inputBuffer.frameCount>=this.sampleReq;){t=this.seekBestOverlapPosition(),this._outputBuffer.ensureAdditionalCapacity(this.overlapLength),this.overlap(Math.floor(t)),this._outputBuffer.put(this.overlapLength),e=this.seekWindowLength-2*this.overlapLength,e>0&&this._outputBuffer.putBuffer(this._inputBuffer,t+this.overlapLength,e);const i=this._inputBuffer.startIndex+2*(t+this.seekWindowLength-this.overlapLength);this.midBuffer.set(this._inputBuffer.vector.subarray(i,i+2*this.overlapLength)),this.skipFract+=this.nominalSkip,s=Math.floor(this.skipFract),this.skipFract-=s,this._inputBuffer.receive(s)}}}const p=function(t,e){return(t>e?t-e:e-t)>1e-10};class f{constructor(){this.transposer=new i(!1),this.stretch=new a(!1),this._inputBuffer=new e,this._intermediateBuffer=new e,this._outputBuffer=new e,this._rate=0,this._tempo=0,this.virtualPitch=1,this.virtualRate=1,this.virtualTempo=1,this.calculateEffectiveRateAndTempo()}clear(){this.transposer.clear(),this.stretch.clear()}clone(){const t=new f;return t.rate=this.rate,t.tempo=this.tempo,t}get rate(){return this._rate}set rate(t){this.virtualRate=t,this.calculateEffectiveRateAndTempo()}set rateChange(t){this._rate=1+.01*t}get tempo(){return this._tempo}set tempo(t){this.virtualTempo=t,this.calculateEffectiveRateAndTempo()}set tempoChange(t){this.tempo=1+.01*t}set pitch(t){this.virtualPitch=t,this.calculateEffectiveRateAndTempo()}set pitchOctaves(t){this.pitch=Math.exp(.69314718056*t),this.calculateEffectiveRateAndTempo()}set pitchSemitones(t){this.pitchOctaves=t/12}get inputBuffer(){return this._inputBuffer}get outputBuffer(){return this._outputBuffer}calculateEffectiveRateAndTempo(){const t=this._tempo,e=this._rate;this._tempo=this.virtualTempo/this.virtualPitch,this._rate=this.virtualRate*this.virtualPitch,p(this._tempo,t)&&(this.stretch.tempo=this._tempo),p(this._rate,e)&&(this.transposer.rate=this._rate),this._rate>1?this._outputBuffer!=this.transposer.outputBuffer&&(this.stretch.inputBuffer=this._inputBuffer,this.stretch.outputBuffer=this._intermediateBuffer,this.transposer.inputBuffer=this._intermediateBuffer,this.transposer.outputBuffer=this._outputBuffer):this._outputBuffer!=this.stretch.outputBuffer&&(this.transposer.inputBuffer=this._inputBuffer,this.transposer.outputBuffer=this._intermediateBuffer,this.stretch.inputBuffer=this._intermediateBuffer,this.stretch.outputBuffer=this._outputBuffer)}process(){this._rate>1?(this.stretch.process(),this.transposer.process()):(this.transposer.process(),this.stretch.process())}}const c=()=>{};class l extends u{constructor(t,e=c){super(null,t,e),this.sourceSound=[],this.callback=e,super.historyBufferSize=22050,super._sourcePosition=0,super.outputBufferPosition=0,super._position=0}putSource(t){for(let e=0;e<t.length;e++)this.sourceSound.push(t[e])}extractSource(t,e,s=0){let i=0;return this.sourceSound.length<2*e?i=0:(t.set(this.sourceSound.slice(0,2*e)),this.sourceSound.splice(0,2*e),i=e),i}fillInputBuffer(t=0){const e=new Float32Array(2*t),s=this.extractSource(e,t);s>0&&super.inputBuffer.putSamples(e,0,s)}extract(t,e=0){return super.extract(t,e)}clear(){this.sourceSound=[]}}class m extends AudioWorkletProcessor{constructor(t){super(),this.running=!1,this.name=this.constructor.name,this.options=t.processorOptions,this.nOutputFrames=0,this.nVirtualOutputFrames=0,this.playingAt=0,this.lastPlayingAt=0,this.updateInterval=this.options.updateInterval,this.soundtouch=new f,this.filter=new l(this.soundtouch,(()=>{})),this.recordedSamples=[[],[]],this.inSamples=new Float32Array(256),this.outSamples=new Float32Array(256),this.port.onmessage=this.messageProcessor.bind(this),this.process=this.process.bind(this),this.passThrough=this.passThrough.bind(this),this.running=!0}messageProcessor(t){if(t.data.command){const{command:e,args:s}=t.data;switch(e){case"setTempo":this.soundtouch.tempo=s[0],this.port.postMessage({status:"OK",args:[e,this.soundtouch.tempo]});break;case"getTempo":this.port.postMessage({status:"OK",args:[e,this.soundtouch.tempo]});break;case"setPitch":this.soundtouch.pitch=s[0],this.port.postMessage({status:"OK",args:[e,this.soundtouch.pitch]});break;case"getPitch":this.port.postMessage({status:"OK",args:[e,this.soundtouch.pitch]});break;case"setup":this.soundtouch.tempo=s[0],this.soundtouch.pitch=s[1],this.port.postMessage({status:"OK",args:[e,this.soundtouch.tempo,this.soundtouch.pitch]});break;case"setUpdateInterval":this.options.updateInterval=s[0],this.port.postMessage({status:"OK",args:[e,this.updateInterval]});break;case"stop":this.stop()}}}stop(){return t(this,void 0,void 0,(function*(){if(this.running){this.running=!1,this.filter&&(this.filter.clear(),this.recordedSamples=[],this.inSamples=new Float32Array,this.outSamples=new Float32Array),yield this.updatePlayingAt();try{yield this.port.postMessage({command:"End",args:[this.recordedSamples]})}catch(t){console.error(this.name,t)}}}))}updatePlayingAt(){this.port.postMessage({command:"update",args:[this.playingAt]})}process(t,e,s){if(!this.running)return!1;if(2!==t[0].length)return!0;if(this.options.bypass){if(!(this.nVirtualOutputFrames<=this.options.nInputFrames))return this.stop(),!1;this.passThrough(t[0],e[0]),this.nVirtualOutputFrames+=e[0][0].length}else{if(!(this.nVirtualOutputFrames<=this.options.nInputFrames))return this.stop(),!1;{const s=this.processFilter(t[0],e[0]);this.nVirtualOutputFrames+=s*this.soundtouch.tempo}}return this.playingAt=this.nVirtualOutputFrames/this.options.sampleRate,this.playingAt-this.lastPlayingAt>=this.options.updateInterval&&(this.updatePlayingAt(),this.lastPlayingAt=this.playingAt),this.options.nInputFrames+=t[0].length,!0}passThrough(t,e){const s=e.length;for(let i=0;i<s;i++){const s=t[i];e[i].set(s)}}processFilter(t,e){const s=t[0],i=t[1],r=e[0],o=e[1],u=this.inSamples;for(let e=0;e<t[0].length;e++)u[2*e]=s[e],u[2*e+1]=i[e];this.filter.putSource(u);const h=this.filter.extract(this.outSamples,128);for(let t=0;t<h;t++)r[t]=this.outSamples[2*t],o[t]=this.outSamples[2*t+1],(isNaN(r[t])||isNaN(o[t]))&&(r[t]=0,o[t]=0);return h}}registerProcessor("soundtouch-worklet",m);
