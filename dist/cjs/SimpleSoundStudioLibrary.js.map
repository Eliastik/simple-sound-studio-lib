{"version":3,"file":"SimpleSoundStudioLibrary.js","sources":["../../node_modules/tslib/tslib.es6.js","../../lib/filters/interfaces/AbstractAudioElement.ts","../../lib/utils/Functions.ts","../../lib/model/EventTypeEnum.ts","../../lib/utils/EventEmitter.ts","../../lib/model/Constants.ts","../../lib/BufferPlayer.ts","../../lib/services/BufferFetcherService.ts","../../lib/utils/GenericConfigService.ts","../../lib/services/BufferDecoderService.ts","../../lib/filters/interfaces/AbstractAudioFilter.ts","../../lib/filters/BassBoosterFilter.ts","../../lib/workletPolyfill/AudioParamPolyfill.ts","../../lib/workletPolyfill/WorkletScriptProcessorNodeAdapter.ts","../../lib/workletPolyfill/RegisterProcessorPolyfill.ts","../../lib/workletPolyfill/SimpleAudioWorkletProcessor.ts","../../lib/workletPolyfill/AudioWorkletProcessorPolyfill.ts","../../lib/filters/interfaces/AbstractAudioFilterWorklet.ts","../../lib/filters/worklets/BitCrusher.worklet.ts","../../lib/filters/BitCrusherFilter.ts","../../lib/filters/EchoFilter.ts","../../lib/filters/HighPassFilter.ts","../../lib/utils/DelayBuffer.ts","../../lib/filters/worklets/Limiter.worklet.ts","../../lib/filters/LimiterFilter.ts","../../lib/filters/LowPassFilter.ts","../../lib/filters/interfaces/AbstractAudioRenderer.ts","../../lib/filters/ReturnAudioRenderer.ts","../../lib/filters/ReverbFilter.ts","../../node_modules/soundtouchjs/dist/soundtouch.js","../../lib/filters/worklets/SoundtouchWrapperFilterWorkletNode.ts","../../lib/filters/SountouchWrapperFilter.ts","../../lib/filters/TelephonizerFilter.ts","../../lib/utils/Vocoder.ts","../../lib/filters/VocoderFilter.ts","../../lib/filters/worklets/Passthrough.worklet.ts","../../lib/filters/PassThroughFilter.ts","../../lib/audioEditor/FilterManager.ts","../../lib/audioEditor/AudioContextManager.ts","../../lib/recorder/getRecorderWorker.ts","../../lib/recorder/Recorder.ts","../../lib/audioEditor/SaveBufferManager.ts","../../lib/utils/TimerSaveTime.ts","../../lib/audioEditor/AudioEditor.ts","../../lib/VoiceRecorder.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","import BufferDecoderService from \"../../services/BufferDecoderService\";\nimport BufferFetcherService from \"../../services/BufferFetcherService\";\nimport { ConfigService } from \"../../services/ConfigService\";\n\nexport default abstract class AbstractAudioElement {\n\n    private enabled = false;\n    private defaultEnabled = false;\n    bufferFetcherService: BufferFetcherService | null = null;\n    bufferDecoderService: BufferDecoderService | null = null;\n    configService: ConfigService | null = null;\n\n    /** Returns the order in which the filter/renderer needs to be applied */\n    abstract get order(): number;\n\n    /** Returns the id of this filter/renderer */\n    abstract get id(): string;\n\n    /** Is this filter/renderer enabled? */\n    isEnabled(): boolean {\n        return this.enabled;\n    }\n\n    /** Is this filter/renderer enabled by default? */\n    isDefaultEnabled(): boolean {\n        return this.defaultEnabled;\n    }\n\n    /** Set to true if this filter/renderer needs to be enabled by default */\n    setDefaultEnabled(state: boolean) {\n        this.defaultEnabled = state;\n    }\n\n    setEnabled(state: boolean) {\n        this.enabled = state;\n    }\n\n    /** Enable this filter/renderer */\n    enable() {\n        this.setEnabled(true);\n    }\n\n    /** Disable this filter/renderer */\n    disable() {\n        this.setEnabled(false);\n    }\n\n    /** Toggle to enabled/disabled this filter */\n    toggle() {\n        this.setEnabled(!this.isEnabled());\n    }\n}\n","import { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\n\nconst utilFunctions = {\n    calcAudioDuration: (audio: AudioBuffer, speed: number) => {\n        if (audio) {\n            let duration = audio.duration + 1;\n\n            if (speed) {\n                duration = duration / speed;\n            }\n\n            return duration;\n        }\n\n        return 0;\n    },\n    loadAudioBuffer: async (context: AudioContext, file: File) => {\n        const arrayBuffer = await utilFunctions.readAsArrayBufferPromisified(file);\n        const audioBuffer = await context.decodeAudioData(arrayBuffer);\n        return utilFunctions.decodeBuffer(context, audioBuffer);\n    },\n    readAsArrayBufferPromisified: (file: File): Promise<ArrayBuffer> => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onload = ev => {\n                const result = ev?.target?.result;\n\n                if (result instanceof ArrayBuffer) {\n                    resolve(result);\n                } else {\n                    reject();\n                }\n            };\n\n            if (file) {\n                reader.readAsArrayBuffer(file); // Read the file\n            }\n        });\n    },\n    decodeBuffer: (context: AudioContext, buffer: AudioBuffer) => {\n        if (buffer.numberOfChannels == 1) { // convert to stereo buffer\n            context.resume();\n\n            const duration = buffer.duration;\n            const sampleRate = context.sampleRate;\n\n            const newBuffer = context.createBuffer(2, sampleRate * duration + sampleRate * 2, sampleRate);\n\n            // Original buffer data\n            const sourceChannelData = buffer.getChannelData(0);\n\n            // Destination buffers\n            const channel0Data = newBuffer.getChannelData(0);\n            const channel1Data = newBuffer.getChannelData(1);\n\n            for (let i = 0; i < sourceChannelData.length; i++) {\n                channel0Data[i] = sourceChannelData[i];\n                channel1Data[i] = sourceChannelData[i];\n            }\n\n            return newBuffer;\n        }\n\n        return buffer;\n    },\n    convertAudioBufferToFloat32Array: (buffer: AudioBuffer) => {\n        const array: Float32Array[] = [];\n\n        for (let channel = 0; channel < buffer.numberOfChannels; channel++) {\n            array.push(buffer.getChannelData(channel));\n        }\n\n        return array;\n    },\n    convertAudioParamToFloat32Array: (param: AudioParam, length: number) => {\n        const array = new Float32Array(length);\n\n        for (let i = 0; i < length; i++) {\n            array.set([param.value], i);\n        }\n\n        return array;\n    },\n    sumAudioBufferChannel(buffer: AudioBuffer, channel: number) {\n        return buffer.getChannelData(channel).reduce((a, b) => a + b, 0);\n    },\n    sumAudioBuffer(buffer: AudioBuffer) {\n        let sum = 0;\n\n        for (let channel = 0; channel < buffer.numberOfChannels; channel++) {\n            sum += this.sumAudioBufferChannel(buffer, channel);\n        }\n\n        return sum;\n    },\n    /**\n    * This method checks if the browser is compatible with audio worklets\n    * @param audioContext \n    */\n    isAudioWorkletCompatible(audioContext: BaseAudioContext) {\n        if (typeof (audioContext) !== \"undefined\" && typeof (audioContext.audioWorklet) !== \"undefined\") {\n            return true;\n        }\n\n        return false;\n    },\n    /**\n     * Check that the setting value is correct\n     * @param value FilterSettingValue\n     */\n    isSettingValueValid(value: FilterSettingValue) {\n        return typeof (value) !== \"undefined\" && !isNaN(Number(value)) && !(typeof (value) === \"string\" && value.trim() === \"\");\n    }\n};\n\nexport default utilFunctions;\n","export enum EventType {\n    LOADING_BUFFERS = \"loadingBuffers\",\n    LOADING_BUFFERS_ERROR = \"loadingBuffersError\",\n    FETCHING_BUFFERS = \"fetchingBuffers\",\n    FETCHING_BUFFERS_ERROR = \"fetchingBuffersError\",\n    FINISHED_FETCHING_BUFFERS = \"finishedFetchingBuffers\",\n    LOADED_BUFFERS = \"loadedBuffers\",\n    COMPATIBILITY_MODE_AUTO_ENABLED = \"compatibilityModeAutoEnabled\",\n    RENDERING_AUDIO_PROBLEM_DETECTED = \"renderingAudioProblemDetected\",\n    AUDIO_RENDERING_FINISHED = \"audioRenderingFinished\",\n    OFFLINE_AUDIO_RENDERING_FINISHED = \"offlineAudioRenderingFinished\",\n    PLAYING_STOPPED = \"playingStopped\",\n    PLAYING_STARTED = \"playingStarted\",\n    PLAYING_FINISHED = \"playingFinished\",\n    PLAYING_UPDATE = \"playingUpdate\",\n    RECORDER_INIT = \"recorderInit\",\n    RECORDER_SUCCESS = \"recorderSuccess\",\n    RECORDER_ERROR = \"recorderError\",\n    RECORDER_UPDATE_CONSTRAINTS = \"recorderUpdateConstraints\",\n    RECORDER_RECORDING = \"recorderRecording\",\n    RECORDER_STOPPED = \"recorderStopped\",\n    RECORDER_PAUSED = \"recorderPaused\",\n    RECORDER_RESETED = \"recorderReseted\",\n    RECORDER_COUNT_UPDATE = \"recorderCountUpdate\",\n    SAMPLE_RATE_CHANGED = \"sampleRateChanged\",\n    DECODING_AUDIO_FILE = \"decodingAudioFile\",\n    DECODED_AUDIO_FILE = \"decodedAudioFile\",\n    ERROR_DECODING_AUDIO_FILE = \"errorDecodingAudioFile\",\n    RECORDER_NOT_FOUND_ERROR = \"recorderNotFoundError\",\n    RECORDER_UNKNOWN_ERROR = \"recorderUnknownError\",\n    UPDATE_AUDIO_TREATMENT_PERCENT = \"updateAudioTreatmentPercent\",\n    UPDATE_REMAINING_TIME_ESTIMATED = \"updateRemainingTimeEstimated\",\n    CANCELLED_AND_LOADED_INITIAL_AUDIO = \"cancelledAndLoadedInitialAudio\",\n    CANCELLING_AUDIO_PROCESSING = \"cancellingAudioProcessing\"\n};\n","import AudioEditorEvents from \"../model/AudioEditorEvent\";\nimport { EventEmitterCallback } from \"../model/EventEmitterCallback\";\n\nclass EventEmitter {\n    listeners: AudioEditorEvents = {};\n    \n    constructor() {\n        this.listeners = {};\n    }\n\n    on(event: string, callback: EventEmitterCallback) {\n        if (!this.listeners[event]) {\n            this.listeners[event] = [];\n        }\n        this.listeners[event].push(callback);\n    }\n\n    emit(event: string, data?: string | number | AudioBuffer) {\n        if (this.listeners[event]) {\n            this.listeners[event].forEach(callback => {\n                callback(data);\n            });\n        }\n    }\n\n    off(event: string, callback: EventEmitterCallback) {\n        if (this.listeners[event]) {\n            this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n        }\n    }\n}\n\nexport default EventEmitter;\n","const Constants = {\n    AUDIO_EDITOR: \"audioEditor\",\n    VOICE_RECORDER: \"voiceRecorder\",\n    BUFFER_PLAYER: \"bufferPlayer\",\n    EXPORT_WAV_COMMAND: \"exportWAV\",\n    EXPORT_MP3_COMMAND: \"exportMP3\",\n    AUDIO_WAV: \"audio/wav\",\n    AUDIO_MP3: \"audio/mp3\",\n    RECORD_COMMAND: \"record\",\n    INIT_COMMAND: \"init\",\n    FILTERS_NAMES: {\n        REVERB: \"reverb\",\n        ECHO: \"echo\",\n        BASS_BOOST: \"bassboost\",\n        BITCRUSHER: \"bitcrusher\",\n        HIGH_PASS: \"highpass\",\n        LIMITER: \"limiter\",\n        LOW_PASS: \"lowpass\",\n        PASSTHROUGH: \"passthroughfilter\",\n        RETURN_AUDIO: \"returnAudio\",\n        SOUNDTOUCH: \"soundtouch\",\n        TELEPHONIZER: \"telephonizer\",\n        VOCODER: \"vocoder\"\n    },\n    WORKLET_PATHS: {\n        BITCRUSHER: \"BitCrusher.worklet.js\",\n        LIMITER: \"Limiter.worklet.js\",\n        SOUNDTOUCH: \"Soundtouch.worklet.js\",\n        RECORDER_WORKLET: \"RecorderWorklet.js\",\n        PASSTHROUGH: \"Passthrough.worklet.js\"\n    },\n    WORKLET_NAMES: {\n        BITCRUSHER: \"bitcrusher-processor\",\n        LIMITER: \"limiter-processor\",\n        SOUNDTOUCH: \"soundtouch-worklet\",\n        RECORDER_WORKLET: \"recorder-worklet\",\n        PASSTHROUGH: \"passthrough\"\n    },\n    PREFERENCES_KEYS: {\n        COMPATIBILITY_MODE_ENABLED: \"compatibility-mode-enabled\",\n        COMPATIBILITY_MODE_CHECKED: \"compatibility-mode-checked\",\n        ENABLE_AUDIO_WORKLET: \"enable-audio-worklet\",\n        ENABLE_SOUNDTOUCH_AUDIO_WORKLET: \"enable-soundtouch-audio-worklet\",\n        BUFFER_SIZE: \"buffer-size\",\n        SAMPLE_RATE: \"sample-rate\",\n        DISABLE_INITIAL_RENDERING: \"disable-initial-rendering\",\n        BITRATE_MP3: \"bitrate-mp3\"\n    },\n    // Enable or disable the use of Audio Worklet version of Soundtouch\n    // If disabled, the ScriptProcessorNode version is used\n    ENABLE_SOUNDTOUCH_AUDIO_WORKLET: true,\n    ENABLE_AUDIO_WORKLET: true,\n    ENABLE_RECORDER_AUDIO_WORKLET: true,\n    SOUNDTOUCH_PITCH_SHIFTER_BUFFER_SIZE: 16384,\n    DEFAULT_REVERB_ENVIRONMENT: {\n        name: \"Medium Damping Cave E002 M2S\",\n        url: \"impulse_response.wav\",\n        size: 1350278,\n        addDuration: 4,\n        link: \"http://www.cksde.com/p_6_250.htm\"\n    },\n    VOCODER_MODULATOR: \"modulator.mp3\",\n    DEFAULT_BUFFER_SIZE: 0,\n    VALID_BUFFER_SIZE: [0, 256, 512, 1024, 2048, 4096, 8192, 16384],\n    VALID_MP3_BITRATES: [32, 64, 96, 128, 160, 256, 320],\n    DEFAULT_SAMPLE_RATE: 0, // 0 = AUTO\n    VALID_SAMPLE_RATES: [0, 8000, 11025, 16000, 22050, 32000, 44100, 48000, 88200, 96000, 176400, 192000],\n    // Interval used by the treatment percent counter. The event will be dispatched each ms defined here\n    TREATMENT_TIME_COUNTING_THROTTLE_INTERVAL: 100,\n    // Smoothing factor for the time couting estimation (between 0 and 1)\n    TREATMENT_TIME_COUNTING_SMOOTHING_FACTOR: 0.9,\n    // Disable initial rendering (when opening audio file or buffer)\n    DISABLE_INITIAL_RENDERING: true,\n    // Default save format\n    DEFAULT_SAVE_FORMAT: \"wav\",\n    // Default bitrate for the MP3 encoder\n    DEFAULT_MP3_BITRATE: 320\n};\n\nexport default Constants;\n","/*\n * Copyright (C) 2019-2023 Eliastik (eliastiksofts.com)\n *\n * This file is part of \"Simple Voice Changer\".\n *\n * \"Simple Voice Changer\" is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * \"Simple Voice Changer\" is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with \"Simple Voice Changer\".  If not, see <http://www.gnu.org/licenses/>.\n */\n// The audio buffer player\n// Used to play the audio buffer, with time controls, pause/play, stop and loop\nimport { EventType } from \"./model/EventTypeEnum\";\nimport { EventEmitterCallback } from \"./model/EventEmitterCallback\";\nimport EventEmitter from \"./utils/EventEmitter\";\nimport AbstractAudioElement from \"./filters/interfaces/AbstractAudioElement\";\nimport Constants from \"./model/Constants\";\nimport AudioContextManager from \"./audioEditor/AudioContextManager\";\n\n// Also used in compatibility mode (which doesn't use audio buffer) with less functions (no time control)\nexport default class BufferPlayer extends AbstractAudioElement {\n\n    private _contextManager: AudioContextManager | undefined | null;\n    private buffer: AudioBuffer | null = null;\n    private source: AudioBufferSourceNode | null = null;\n    currentTime = 0;\n    displayTime = 0;\n    duration = 0;\n    private intervals: number[] = [];\n    playing = false;\n    loop = false;\n    speedAudio = 1;\n    private eventEmitter: EventEmitter | null;\n    private onBeforePlayingCallback: () => void = async () => {};\n\n    compatibilityMode = false;\n    currentNode: AudioNode | null = null;\n\n    constructor(contextManager: AudioContextManager | undefined | null, eventEmitter?: EventEmitter) {\n        super();\n        this._contextManager = contextManager;\n        this.eventEmitter = eventEmitter || new EventEmitter();\n    }\n\n    /** Init this buffer player */\n    init(direct?: boolean) {\n        this.playing = false;\n\n        if (this._contextManager && this._contextManager.currentContext) {\n            this._contextManager.currentContext.resume();\n\n            if (!this.compatibilityMode && this.buffer) {\n                if (this.source != null && !direct) this.source.disconnect();\n                this.source = this._contextManager.currentContext.createBufferSource();\n                this.source.buffer = this.buffer;\n                this.duration = this.buffer.duration * this.speedAudio;\n                this.source.connect(this._contextManager.currentContext.destination);\n            }\n        }\n\n        this.updateInfos();\n    }\n\n    /**\n     * Load an audio buffer\n     * @param buffer The buffer\n     */\n    loadBuffer(buffer: AudioBuffer) {\n        this.compatibilityMode = false;\n        this.reset();\n        this.buffer = buffer;\n        this.init();\n    }\n\n    /**\n     * Enable compatibility mode\n     * @param currentNode Current audio node to read\n     * @param duration The audio duration\n     */\n    setCompatibilityMode(currentNode: AudioNode, duration?: number) {\n        this.compatibilityMode = true;\n        this.reset();\n        this.init();\n\n        if (duration != null) {\n            this.duration = duration * this.speedAudio;\n        }\n\n        this.currentNode = currentNode;\n        this.updateInfos();\n    }\n\n    /**\n     * Reset this player\n     */\n    reset(direct?: boolean) {\n        this.clearIntervals();\n\n        this.currentTime = 0;\n        this.displayTime = 0;\n\n        if (!direct) {\n            this.stop();\n        }\n    }\n\n    /**\n     * Stop playing the audio\n     */\n    stop() {\n        this.clearIntervals();\n\n        if (this.source != undefined && this.source != null && this.playing) {\n            this.source.stop(0);\n            this.playing = false;\n        }\n\n        if (this.currentNode) {\n            this.currentNode.disconnect();\n\n            if(this.compatibilityMode) {\n                this.currentTime = 0;\n                this.displayTime = 0;\n            }\n        }\n\n        this.eventEmitter?.emit(EventType.PLAYING_STOPPED);\n        this.updateInfos();\n    }\n\n    /**\n     * Clear old intervals\n     */\n    private clearIntervals() {\n        for (const interval of this.intervals) {\n            clearInterval(interval);\n        }\n\n        this.intervals = [];\n    }\n\n    /**\n     * Start playing the audio\n     */\n    async start(direct?: boolean) {\n        if (this.source || this.compatibilityMode) {\n            if (!direct) {\n                this.stop();\n            }\n\n            this.init(direct);\n\n            await this.onBeforePlayingCallback();\n\n            this.eventEmitter?.emit(EventType.PLAYING_STARTED);\n\n            if (!this.compatibilityMode) {\n                if (this.source) {\n                    this.source.start(0, direct ? 0 : this.currentTime / this.speedAudio);\n                    this.playing = true;\n                } else {\n                    return;\n                }\n            } else {\n                if (this.currentNode && this._contextManager && this._contextManager.currentContext) {\n                    this.currentNode.connect(this._contextManager.currentContext.destination);\n                } else {\n                    return;\n                }\n            }\n\n            let startTime = performance.now();\n\n            this.intervals.push(window.setInterval(() => {\n                const timeNow = performance.now();\n                const nextTime = timeNow - startTime;\n                startTime = timeNow;\n\n                this.currentTime += (nextTime / 1000) * this.speedAudio;\n                this.displayTime = this.currentTime;\n\n                if (this.currentTime > this.duration) {\n                    if (this.loop) {\n                        if (!this.compatibilityMode) {\n                            this.reset(direct);\n                            this.start();\n                        } else {\n                            this.eventEmitter?.emit(EventType.PLAYING_FINISHED);\n                        }\n                    } else {\n                        this.eventEmitter?.emit(EventType.PLAYING_FINISHED);\n                        this.reset(direct);\n                    }\n                } else {\n                    this.updateInfos();\n                }\n            }, 100));\n        }\n    }\n\n    /**\n     * Play audio directly, without stopping previous audio play\n     */\n    async playDirect() {\n        if (!this.compatibilityMode) {\n            this.start(true);\n        } else {\n            // Play direct is not possible when compatibility mode is enabled\n            this.start(false);\n        }\n    }\n\n    /**\n     * Pause the audio\n     */\n    pause() {\n        this.stop();\n    }\n\n    /** Send an event to update the informations of this player */\n    private updateInfos() {\n        this.eventEmitter?.emit(EventType.PLAYING_UPDATE);\n    }\n\n    /**\n     * Set the current starting time of this player\n     * @param percent Where to start playing, in percent\n     */\n    setTimePercent(percent: number) {\n        if(!this.compatibilityMode) {\n            this.currentTime = Math.round(this.duration * (percent / 100));\n            this.displayTime = this.currentTime;\n    \n            if (this.playing) {\n                this.pause();\n                this.start();\n            } else {\n                this.updateInfos();\n            }\n        }\n    }\n\n    /**\n     * Set the current starting time of this player\n     * @param time Where to start playing, in milliseconds\n     */\n    setTime(time: number) {\n        if (!this.compatibilityMode) {\n            this.currentTime = time;\n            this.displayTime = this.currentTime;\n\n            if (this.playing) {\n                this.pause();\n                this.start();\n            } else {\n                this.updateInfos();\n            }\n        }\n    }\n\n    /**\n     * Callback called just before starting playing the audio\n     * @param callback The callback\n     */\n    onBeforePlaying(callback: () => void) {\n        this.onBeforePlayingCallback = callback;\n    }\n\n    /**\n     * Enable/disable loop playing\n     */\n    toggleLoop() {\n        this.loop = !this.loop;\n    }\n\n    /**\n     * Observe an event\n     * @param event The event name\n     * @param callback Callback called when an event of this type occurs\n     */\n    on(event: string, callback: EventEmitterCallback) {\n        this.eventEmitter?.on(event, callback);\n    }\n\n    /**\n     * Get the time in text format\n     */\n    get currentTimeDisplay() {\n        return (\"0\" + Math.trunc(this.displayTime / 60)).slice(-2) + \":\" + (\"0\" + Math.trunc(this.displayTime % 60)).slice(-2);\n    }\n\n    /** \n     * Get the audio duration in text format\n     */\n    get maxTimeDisplay() {\n        return (\"0\" + Math.trunc(this.duration / 60)).slice(-2) + \":\" + (\"0\" + Math.trunc(this.duration % 60)).slice(-2);\n    }\n\n    /**\n     * Get the percent played\n     */\n    get percent() {\n        return (100 - Math.round((this.duration - this.displayTime) / this.duration * 100));\n    }\n\n    /**\n     * Get the remaining time in text format\n     */\n    get remainingTimeDisplay() {\n        return (\"0\" + Math.trunc((this.duration - this.displayTime) / 60)).slice(-2) + \":\" + (\"0\" + Math.trunc((this.duration - this.displayTime) % 60)).slice(-2);\n    }\n\n    set contextManager(contextManager: AudioContextManager | undefined) {\n        this._contextManager = contextManager;\n    }\n\n    get order(): number {\n        return -1;\n    }\n\n    get id(): string {\n        return Constants.BUFFER_PLAYER;\n    }\n}\n","import { EventType } from \"../model/EventTypeEnum\";\nimport { ConfigService } from \"./ConfigService\";\nimport utilFunctions from \"../utils/Functions\";\nimport EventEmitter from \"../utils/EventEmitter\";\nimport AudioContextManager from \"@/audioEditor/AudioContextManager\";\n\nexport default class BufferFetcherService {\n\n    private contextManager: AudioContextManager;\n    private buffers: Map<string, AudioBuffer> = new Map<string, AudioBuffer>();\n    private bufferErrors: string[] = [];\n    private eventEmitter: EventEmitter | null;\n    private configService: ConfigService | null = null;\n\n    constructor(contextManager: AudioContextManager, configService: ConfigService, eventEmitter?: EventEmitter) {\n        this.contextManager = contextManager;\n        this.eventEmitter = eventEmitter || new EventEmitter();\n        this.configService = configService;\n    }\n\n    async fetchBuffer(bufferURI: string, force?: boolean) {\n        const realBufferURI = (this.configService ? this.configService.getSoundBasePath() : \"\") + bufferURI;\n\n        if(this.buffers.get(this.getKeyFromLocation(realBufferURI)) != null && !force) {\n            return;\n        }\n\n        this.eventEmitter?.emit(EventType.FETCHING_BUFFERS, realBufferURI);\n\n        try {\n            const response = await fetch(realBufferURI);\n\n            if(!response.ok) {\n                this.bufferErrors.push(realBufferURI);\n                this.eventEmitter?.emit(EventType.FETCHING_BUFFERS_ERROR, realBufferURI);\n                throw EventType.FETCHING_BUFFERS_ERROR;\n            } else {\n                const arrayBuffer = await response.arrayBuffer();\n\n                if (this.contextManager && this.contextManager.currentContext) {\n                    const buffer = await this.contextManager.currentContext.decodeAudioData(arrayBuffer);\n                    this.buffers.set(this.getKeyFromLocation(realBufferURI), utilFunctions.decodeBuffer(this.contextManager.currentContext, buffer));\n                }\n            }\n    \n            this.eventEmitter?.emit(EventType.FINISHED_FETCHING_BUFFERS, realBufferURI);\n        } catch(e) {\n            this.bufferErrors.push(realBufferURI);\n            this.eventEmitter?.emit(EventType.FETCHING_BUFFERS_ERROR, realBufferURI);\n            throw EventType.FETCHING_BUFFERS_ERROR;\n        }\n    }\n\n    async fetchAllBuffers(bufferURIs: string[]) {\n        for(const uri of bufferURIs) {\n            await this.fetchBuffer(uri);\n        }\n    }\n\n    getAudioBuffer(filename: string): AudioBuffer | undefined {\n        return this.buffers.get(this.getKeyFromLocation(filename));\n    }\n\n    async getOrFetchAudioBuffer(filename: string): Promise<AudioBuffer | undefined> {\n        if(this.getAudioBuffer(filename) == null) {\n            await this.fetchBuffer(filename);\n        }\n\n        return this.getAudioBuffer(filename);\n    }\n\n    getDownloadedBuffersList(): string[] {\n        return Array.from(this.buffers.keys());\n    }\n\n    private getKeyFromLocation(location: string) {\n        return location.substring(location.lastIndexOf(\"/\") + 1);\n    }\n\n    reset() {\n        this.buffers.clear();\n    }\n}\n","import Constants from \"../model/Constants\";\nimport { ConfigService } from \"../services/ConfigService\";\n\n/**\n * Default implementation for a ConfigService, using a built-in map.\n * The configuration is not stored in localstorage in this case.\n */\nexport default class GenericConfigService implements ConfigService {\n\n    private mapConfig = new Map<string, string>();\n\n    getConfig(key: string): string | undefined | null {\n        return this.mapConfig.get(key);\n    }\n\n    setConfig(key: string, value: string): void {\n        this.mapConfig.set(key, value);\n    }\n\n    isCompatibilityModeEnabled(): boolean {\n        return this.getConfig(Constants.PREFERENCES_KEYS.COMPATIBILITY_MODE_ENABLED) == \"true\";\n    }\n\n    isCompatibilityModeChecked(): boolean {\n        return this.getConfig(Constants.PREFERENCES_KEYS.COMPATIBILITY_MODE_CHECKED) == \"true\";\n    }\n\n    isAudioWorkletEnabled(): boolean {\n        const setting = this.getConfig(Constants.PREFERENCES_KEYS.ENABLE_AUDIO_WORKLET);\n\n        if(setting != null) {\n            return setting == \"true\";\n        }\n\n        return Constants.ENABLE_AUDIO_WORKLET;\n    }\n\n    isSoundtouchAudioWorkletEnabled(): boolean {\n        const setting = this.getConfig(Constants.PREFERENCES_KEYS.ENABLE_SOUNDTOUCH_AUDIO_WORKLET);\n\n        if(setting != null) {\n            return setting == \"true\";\n        }\n\n        return Constants.ENABLE_SOUNDTOUCH_AUDIO_WORKLET;\n    }\n\n    getBufferSize(): number {\n        const setting = this.getConfig(Constants.PREFERENCES_KEYS.BUFFER_SIZE);\n\n        if(setting != null) {\n            return parseInt(setting);\n        }\n\n        return Constants.DEFAULT_BUFFER_SIZE;\n    }\n\n    getSampleRate(): number {\n        const setting = this.getConfig(Constants.PREFERENCES_KEYS.SAMPLE_RATE);\n\n        if(setting != null) {\n            return parseInt(setting);\n        }\n\n        return Constants.DEFAULT_SAMPLE_RATE;\n    }\n\n    getBitrateMP3(): number {\n        const setting = this.getConfig(Constants.PREFERENCES_KEYS.BITRATE_MP3);\n\n        if(setting != null) {\n            return parseInt(setting);\n        }\n\n        return Constants.DEFAULT_MP3_BITRATE;\n    }\n\n    enableCompatibilityMode() {\n        this.setConfig(Constants.PREFERENCES_KEYS.COMPATIBILITY_MODE_ENABLED, \"true\");\n    }\n\n    disableCompatibilityMode() {\n        this.setConfig(Constants.PREFERENCES_KEYS.COMPATIBILITY_MODE_ENABLED, \"false\");\n    }\n\n    getWorkletBasePath(): string {\n        return \"\";\n    }\n\n    getWorkerBasePath(): string {\n        return \"\";\n    }\n\n    getSoundBasePath(): string {\n        return \"\";\n    }\n\n    isInitialRenderingDisabled(): boolean {\n        const setting = this.getConfig(Constants.PREFERENCES_KEYS.DISABLE_INITIAL_RENDERING);\n\n        if(setting != null) {\n            return setting == \"true\";\n        }\n\n        return Constants.DISABLE_INITIAL_RENDERING;\n    }\n};\n","import { EventType } from \"../model/EventTypeEnum\";\nimport EventEmitter from \"../utils/EventEmitter\";\nimport utilFunctions from \"../utils/Functions\";\nimport AudioContextManager from \"@/audioEditor/AudioContextManager\";\n\nexport default class BufferDecoderService {\n\n    private contextManager: AudioContextManager;\n    private eventEmitter: EventEmitter | null;\n\n    constructor(contextManager: AudioContextManager, eventEmitter?: EventEmitter) {\n        this.contextManager = contextManager;\n        this.eventEmitter = eventEmitter || new EventEmitter();\n    }\n\n    async decodeBufferFromFile(file: File): Promise<AudioBuffer | null> {\n        if (this.eventEmitter) {\n            this.eventEmitter.emit(EventType.DECODING_AUDIO_FILE);\n        }\n\n        try {\n            if (this.contextManager && this.contextManager.currentContext) {\n                const buffer = await utilFunctions.loadAudioBuffer(this.contextManager.currentContext, file);\n    \n                if (this.eventEmitter) {\n                    this.eventEmitter.emit(EventType.DECODED_AUDIO_FILE);\n                }\n    \n                return buffer;\n            }\n        } catch (e) {\n            console.error(e);\n\n            if (this.eventEmitter) {\n                this.eventEmitter.emit(EventType.DECODED_AUDIO_FILE);\n                this.eventEmitter.emit(EventType.ERROR_DECODING_AUDIO_FILE);\n            }\n        }\n\n        return null;\n    }\n}\n","import AbstractAudioElement from \"./AbstractAudioElement\";\nimport { AudioFilterNodes } from \"../../model/AudioNodes\";\nimport { FilterSettingValue, FilterSettings } from \"../../model/filtersSettings/FilterSettings\";\nimport EventEmitter from \"../../utils/EventEmitter\";\n\nexport default abstract class AbstractAudioFilter extends AbstractAudioElement {\n\n    private defaultSettings: FilterSettings | null = null;\n    eventEmitter: EventEmitter | undefined = undefined;\n\n    /** Return a input and output AudioNode of the filter */\n    abstract getNode(context: BaseAudioContext): AudioFilterNodes;\n    /** Return an object with current settings of this filter */\n    abstract getSettings(): FilterSettings;\n    /** Set a filter setting */\n    abstract setSetting(settingId: string, value: FilterSettingValue): Promise<void>;\n\n    /** Get the amount of time this filter add to the audio */\n    getAddingTime(): number {\n        return 0;\n    }\n\n    /** Store the default settings */\n    public initializeDefaultSettings() {\n        this.defaultSettings = this.getSettings();\n    }\n\n    /** Returns the default settings of this filter */\n    public getDefaultSettings() {\n        return this.defaultSettings;\n    }\n\n    /** Reset the default settings of this filter */\n    public async resetSettings() {\n        if (this.defaultSettings) {\n            for (const key in this.defaultSettings) {\n                if (this.defaultSettings && typeof (this.defaultSettings[key]) !== \"undefined\") {\n                    await this.setSetting(key, this.defaultSettings[key]);\n                }\n            }\n        }\n    }\n\n    /** Return if the current filter use an audio worklet */\n    public isWorklet() {\n        return false;\n    }\n}\n","import AbstractAudioFilter from \"./interfaces/AbstractAudioFilter\";\nimport Constants from \"../model/Constants\";\nimport BassBoosterSettings from \"../model/filtersSettings/BassBoosterSettings\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\nimport utilFunctions from \"../utils/Functions\";\n\nexport default class BassBoosterFilter extends AbstractAudioFilter {\n    private frequencyBooster = 200;\n    private frequencyReduce = 200;\n    private dbBooster = 15;\n    private dbReduce = -2;\n\n    constructor(frequencyBooster: number, dbBooster: number, frequencyReduce: number, dbReduce: number) {\n        super();\n        this.frequencyBooster = frequencyBooster;\n        this.dbBooster = dbBooster;\n        this.frequencyReduce = frequencyReduce;\n        this.dbReduce = dbReduce;\n    }\n\n    getNode(context: BaseAudioContext) {\n        const bassBoostFilter = context.createBiquadFilter();\n        bassBoostFilter.type = \"lowshelf\";\n        bassBoostFilter.frequency.value = this.frequencyBooster;\n        bassBoostFilter.gain.value = this.dbBooster;\n\n        const bassBoostFilterHighFreq = context.createBiquadFilter();\n        bassBoostFilterHighFreq.type = \"highshelf\";\n        bassBoostFilterHighFreq.frequency.value = this.frequencyReduce;\n        bassBoostFilterHighFreq.gain.value = this.dbReduce;\n        bassBoostFilterHighFreq.connect(bassBoostFilter);\n\n        return {\n            input: bassBoostFilterHighFreq,\n            output: bassBoostFilter\n        };\n    }\n    \n    get order(): number {\n        return 3;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.BASS_BOOST;\n    }\n\n    getSettings(): BassBoosterSettings {\n        return {\n            frequencyBooster: this.frequencyBooster,\n            frequencyReduce: this.frequencyReduce,\n            dbBooster: this.dbBooster,\n            dbReduce: this.dbReduce,\n        };\n    }\n\n    async setSetting(settingId: string, value: FilterSettingValue) {\n        if(!utilFunctions.isSettingValueValid(value)) {\n            return;\n        }\n\n        switch(settingId) {\n        case \"frequencyBooster\":\n            this.frequencyBooster = parseInt(value as string);\n            break;\n        case \"frequencyReduce\":\n            this.frequencyReduce = parseInt(value as string);\n            break;\n        case \"dbBooster\":\n            this.dbBooster = parseInt(value as string);\n            break;\n        case \"dbReduce\":\n            this.dbReduce = parseInt(value as string);\n            break;\n        }\n    }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * This class is a polyfill for the standard web AudioParam class used by worklets\n */\nexport default class AudioParamPolyfill implements AudioParam {\n    private _value: number = 0;\n    private _minValue: number = 0;\n    private _maxValue: number = Number.MAX_SAFE_INTEGER;\n    private _defaultValue: number = 0;\n    private context: BaseAudioContext | null = null;\n    automationRate: AutomationRate = \"a-rate\";\n\n    constructor(context: BaseAudioContext, defaultValue?: number) {\n        this._defaultValue = defaultValue !== undefined ? defaultValue : 0;\n        this._value = this._defaultValue;\n        this.context = context;\n    }\n\n    get value(): number {\n        return this._value;\n    }\n\n    set value(newValue: number) {\n        this._value = Math.max(this._minValue, Math.min(this._maxValue, newValue));\n    }\n\n    get minValue(): number {\n        return this._minValue;\n    }\n\n    get maxValue(): number {\n        return this._maxValue;\n    }\n\n    get defaultValue(): number {\n        return this._defaultValue;\n    }\n\n    setValueAtTime(value: number, startTime: number): AudioParam {\n        console.warn(\"setValueAtTime used with AudioParamPolyfill, is not fully compatible with standard AudioParam\");\n        this.value = value;\n        return new AudioParamPolyfill(this.context!, value);\n    }\n\n    linearRampToValueAtTime(value: number, endTime: number): AudioParam {\n        console.warn(\"linearRampToValueAtTime used with AudioParamPolyfill, is not fully compatible with standard AudioParam\");\n        this.value = value;\n        return new AudioParamPolyfill(this.context!, value);\n    }\n\n    exponentialRampToValueAtTime(value: number, endTime: number): AudioParam {\n        console.warn(\"exponentialRampToValueAtTime used with AudioParamPolyfill, is not fully compatible with standard AudioParam\");\n        this.value = value;\n        return new AudioParamPolyfill(this.context!, value);\n    }\n\n    cancelAndHoldAtTime(cancelTime: number): AudioParam {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    cancelScheduledValues(cancelTime: number): AudioParam {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    setTargetAtTime(target: number, startTime: number, timeConstant: number): AudioParam {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    setValueCurveAtTime(values: unknown, startTime: unknown, duration: unknown): AudioParam {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n","import SimpleAudioWorkletProcessor from \"./SimpleAudioWorkletProcessor\";\nimport AudioParamPolyfill from \"./AudioParamPolyfill\";\nimport Functions from \"../utils/Functions\";\n\n/**\n * This class convert an audio worklet processor node to a script processor node\n * automagically. Highly experimental, and might not work with some WorkletProcessor\n */\nexport default class WorkletScriptProcessorNodeAdapter {\n\n    private workletProcessor: SimpleAudioWorkletProcessor;\n    private _parameters = new Map<string, AudioParamPolyfill>();\n    private _port: MessagePort | null = null;\n    private _scriptProcessorNode: ScriptProcessorNode | null;\n    private currentContext: BaseAudioContext | null = null;\n\n    constructor(context: BaseAudioContext, node: SimpleAudioWorkletProcessor, bufferSize?: number) {\n        this.workletProcessor = node;\n        this.currentContext = context;\n\n        // Create a ScriptProcessorNode with the same number of input and output channels\n        this._scriptProcessorNode = context.createScriptProcessor(\n            bufferSize,\n            2,\n            2\n        );\n\n        this.setupPort();\n        this.setupProcessor();\n        this.setupWorkletScope(context);\n    }\n\n    private setupPort(): void {\n        const messageChannel = new MessageChannel();\n\n        messageChannel.port1.onmessage = (ev) => {\n            if(this.workletProcessor && this.workletProcessor.port2) {\n                this.workletProcessor.port2.postMessage(ev.data);\n            }\n        };\n\n        if(this.workletProcessor && this.workletProcessor.port2) {\n            this.workletProcessor.port2.onmessage = (ev) => {\n                messageChannel.port1.postMessage(ev.data);\n            };\n        }\n\n        this._port = messageChannel.port2;\n    }\n\n    private setupProcessor() {\n        if(!this._scriptProcessorNode) {\n            return;\n        }\n\n        this._scriptProcessorNode.onaudioprocess = (ev: AudioProcessingEvent) => {\n            if(this.workletProcessor) {\n                const inputArray = [Functions.convertAudioBufferToFloat32Array(ev.inputBuffer)];\n                const ouputArray = [Functions.convertAudioBufferToFloat32Array(ev.outputBuffer)];\n\n                const records: [string, Float32Array][] = [];\n\n                for (const [key, value] of this._parameters.entries()) {\n                    records.push([key, Functions.convertAudioParamToFloat32Array(value, 1)]);\n                }\n\n                const recordsMap: Record<string, Float32Array> = Object.fromEntries(records);\n                \n                this.workletProcessor.process(inputArray, ouputArray, recordsMap);\n            }\n        };\n\n        const descriptors = this.workletProcessor.defaultParameterDescriptors;\n\n        if(descriptors) {\n            descriptors.forEach(descriptor => {\n                if(this.currentContext) {\n                    this._parameters.set(descriptor.name, new AudioParamPolyfill(this.currentContext, descriptor.defaultValue));\n                }\n            });\n        }\n    }\n\n    private setupWorkletScope(context: BaseAudioContext) {\n        if(typeof(window) !== \"undefined\") {\n            window.sampleRate = context.sampleRate;\n        }\n    }\n\n    get port() {\n        return this._port;\n    }\n\n    get parameters(): AudioParamMap {\n        return this._parameters;\n    }\n\n    get node() {\n        return this._scriptProcessorNode;\n    }\n\n    get context() {\n        return this._scriptProcessorNode?.context;\n    }\n}\n","import SimpleAudioWorkletProcessor from \"./SimpleAudioWorkletProcessor\";\n\n/**\n * Polyfill for registerProcessor method used in AudioWorklets\n */\nexport default class RegisterProcessorPolyfill {\n\n    private static processorsMap = new Map<string, typeof SimpleAudioWorkletProcessor>();\n\n    static registerProcessor(processorName: string, processorClass: typeof SimpleAudioWorkletProcessor) {\n        RegisterProcessorPolyfill.processorsMap.set(processorName, processorClass);\n    }\n\n    static getProcessor(processorName: string): SimpleAudioWorkletProcessor | null {\n        const processor = RegisterProcessorPolyfill.processorsMap.get(processorName);\n\n        if(processor) {\n            return new processor();\n        }\n\n        return null;\n    }\n};\n","/**\n * This class is the standard AudioWorkletProcessor interface\n */\nexport interface AudioWorkletProcessorInterface {\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean;\n    get parameters(): AudioParamMap;\n    get parameterDescriptors(): AudioParamMap;\n    messageProcessor?: (event: MessageEvent) => void;\n}\n\ntype ParameterDescriptors = {\n    name: string;\n    defaultValue: number;\n}[];\n\n/**\n * This class is a polyfill for the AudioWorkletProcessor interface\n */\nexport default class SimpleAudioWorkletProcessor implements AudioWorkletProcessorInterface {\n    private messageChannel: MessageChannel | null = null;\n    messageProcessor?: ((event: MessageEvent) => void) | undefined;\n\n    constructor() {\n        this.messageChannel = new MessageChannel();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n        return true;\n    }\n\n    get port(): MessagePort | null {\n        return this.messageChannel && this.messageChannel.port1;\n    }\n\n    get port2(): MessagePort | null {\n        return this.messageChannel && this.messageChannel.port2;\n    }\n\n    get parameters(): AudioParamMap {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    get parameterDescriptors(): AudioParamMap {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    get defaultParameterDescriptors(): ParameterDescriptors {\n        return [];\n    }\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport RegisterProcessorPolyfill from \"./RegisterProcessorPolyfill\";\nimport SimpleAudioWorkletProcessor from \"./SimpleAudioWorkletProcessor\";\n\nif(typeof(window) !== \"undefined\" && !(\"AudioWorkletProcessor\" in window)) {\n    (window as any).AudioWorkletProcessor = SimpleAudioWorkletProcessor;\n    (window as any).registerProcessor = RegisterProcessorPolyfill.registerProcessor;\n}\n\nif(typeof(global) !== \"undefined\" && !(\"AudioWorkletProcessor\" in global)) {\n    (global as any).AudioWorkletProcessor = SimpleAudioWorkletProcessor;\n    (global as any).registerProcessor = RegisterProcessorPolyfill.registerProcessor;\n}\n","import WorkletScriptProcessorNodeAdapter from \"../../workletPolyfill/WorkletScriptProcessorNodeAdapter\";\nimport AbstractAudioFilter from \"./AbstractAudioFilter\";\nimport Constants from \"../../model/Constants\";\nimport \"../../workletPolyfill/AudioWorkletProcessorPolyfill\";\nimport RegisterProcessorPolyfill from \"../../workletPolyfill/RegisterProcessorPolyfill\";\nimport utilFunctions from \"../../utils/Functions\";\n\nexport default abstract class AbstractAudioFilterWorklet<T> extends AbstractAudioFilter {\n\n    protected currentWorkletNode: AudioWorkletNode | WorkletScriptProcessorNodeAdapter | null = null;\n    protected fallbackToScriptProcessor = false;\n    protected keepCurrentNodeIfPossible = false;\n\n    /**\n     * Return the worklet name (as registered with method registerProcessor)\n     */\n    abstract get workletName(): string;\n\n    /**\n     * Return the path to worklet file\n     */\n    abstract get workletPath(): string;\n\n    /**\n     * Receive event from the worklet\n     */\n    abstract receiveEvent(message: MessageEvent<T>): void;\n\n    /**\n     * Initialize the audio worklet by loading the module\n     * @param audioContext The audio context\n     */\n    async initializeWorklet(audioContext: BaseAudioContext): Promise<void> {\n        this.stop();\n\n        if(!utilFunctions.isAudioWorkletCompatible(audioContext)) {\n            console.error(\"Audio Worklets not supported on this browser. Fallback to ScriptProcessor\");\n            this.fallbackToScriptProcessor = true;\n            return;\n        }\n\n        const workletPath = (this.configService ? this.configService.getWorkletBasePath() : \"\") + this.workletPath;\n\n        await audioContext.audioWorklet.addModule(workletPath)\n            .catch(e => {\n                console.error(`Error when loading Worklet (${workletPath}) for filter ${this.id}. Fallback to ScriptProcessor. Exception:`, e);\n                this.fallbackToScriptProcessor = true;\n            });\n    }\n\n    /**\n     * This method checks if audio worklet are enabled\n     * @param audioContext \n     */\n    protected isAudioWorkletEnabled() {\n        if(this.configService) {\n            return this.configService.isAudioWorkletEnabled();\n        }\n\n        return Constants.ENABLE_AUDIO_WORKLET;\n    }\n\n    /**\n     * Initialize the AudioWorkletNode or fallback to ScriptProcessorNode\n     * @param context The audio context\n     * @param workletName The worklet name\n     */\n    private initializeNode(context: BaseAudioContext, workletName: string) {\n        if (this.isAudioWorkletEnabled() && !this.fallbackToScriptProcessor) {\n            // Standard Audio Worklet\n            this.currentWorkletNode = new AudioWorkletNode(context, workletName);\n        } else {\n            // Fallback to ScriptProcessorNode (polyfill)\n            const processor = RegisterProcessorPolyfill.getProcessor(workletName);\n\n            if(processor) {\n                this.currentWorkletNode = new WorkletScriptProcessorNodeAdapter(context, processor, this.configService!.getBufferSize());\n            } else {\n                throw new Error(`No processor registered with name ${workletName} for filter ${this.id} to use the fallback/polyfill for AudioWorklet. Make sure you have created the class.`);\n            }\n        }\n\n        if (this.currentWorkletNode && this.currentWorkletNode.port) {\n            this.currentWorkletNode.port.onmessage = message => this.receiveEvent(message);\n        }\n    }\n\n    /**\n     * Apply current settings to the audio worklet node.\n     * Uses the getSettings method to extract the settings.\n     */\n    protected applyCurrentSettingsToWorklet() {\n        if (this.currentWorkletNode && this.currentWorkletNode.parameters) {\n            const currentSettings = this.getSettings();\n\n            for (const settingKey of Object.keys(currentSettings)) {\n                const settingFromWorklet = this.currentWorkletNode.parameters.get(settingKey);\n\n                if (settingFromWorklet) {\n                    settingFromWorklet.value = currentSettings[settingKey] as number;\n                    settingFromWorklet.setValueAtTime(currentSettings[settingKey] as number, 0);\n                }\n            }\n        }\n    }\n\n    /** Default implementation for GetNode - AbstractAudioFilterWorklet */\n    getNode(context: BaseAudioContext) {\n        if(!this.keepCurrentNodeIfPossible || !this.currentWorkletNode\n            || this.currentWorkletNode.context != context) {\n            this.stop();\n            this.initializeNode(context, this.workletName);\n        }\n\n        this.applyCurrentSettingsToWorklet();\n        this.setEnabled(this.isEnabled());\n\n        if (this.currentWorkletNode) {\n            if (this.currentWorkletNode instanceof WorkletScriptProcessorNodeAdapter) {\n                return {\n                    input: this.currentWorkletNode.node!,\n                    output: this.currentWorkletNode.node!,\n                };\n            } else {\n                return {\n                    input: this.currentWorkletNode,\n                    output: this.currentWorkletNode,\n                };\n            }\n        }\n\n        throw new Error(\"Worklet node has not yet been created\");\n    }\n\n    /**\n     * Stop the current worklet node. The worklet need to respond to \"stop\" events.\n     */\n    stop() {\n        if (this.currentWorkletNode && this.currentWorkletNode.port) {\n            this.currentWorkletNode.port.postMessage(\"stop\");\n            this.currentWorkletNode.port.onmessage = null;\n        }\n\n        this.currentWorkletNode = null;\n    }\n\n    /**\n     * Pass the current disabled/enabled state to the worklet.\n     * The worklet need to respond to \"enable\"/\"disable\" events.\n     * @param state The current disabled/enabled state\n     */\n    setEnabled(state: boolean): void {\n        if (this.currentWorkletNode && this.currentWorkletNode.port) {\n            this.currentWorkletNode.port.postMessage(state ? \"enable\" : \"disable\");\n        }\n\n        super.setEnabled(state);\n    }\n\n    public isWorklet(): boolean {\n        return true;\n    }\n}\n","import Constants from \"../../model/Constants\";\n\nclass BitCrusherProcessor extends AudioWorkletProcessor {\n    private stopped = false;\n    private phaser: number[] | null = null;\n    private last: number[] | null = null;\n\n    constructor() {\n        super();\n        this.port.onmessage = (event) => {\n            if (event.data == \"stop\") {\n                this.stop();\n            }\n        };\n    }\n\n    static get parameterDescriptors() {\n        return [\n            { name: \"bits\", defaultValue: 16 },\n            { name: \"normFreq\", defaultValue: 0.9 },\n        ];\n    }\n\n    get defaultParameterDescriptors() {\n        return BitCrusherProcessor.parameterDescriptors;\n    }\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n        if (this.stopped) return false;\n\n        const input = inputs[0];\n        const output = outputs[0];\n\n        const step = 2 * Math.pow(1 / 2, parameters.bits[0]);\n        const currentNormFreq = (1 - parameters.normFreq[0]) / (sampleRate / 48000);\n\n        if (this.last == null) {\n            this.last = new Array(input.length).fill(0);\n        }\n\n        if (this.phaser == null) {\n            this.phaser = new Array(input.length).fill(0);\n        }\n\n        if (input && input[0]) {\n            const blockSize = input[0].length;\n\n            for (let channel = 0; channel < input.length; channel++) {\n                const inp = input[channel];\n                const out = output[channel];\n\n                if (inp && out) {\n                    for (let i = 0; i < blockSize; i++) {\n                        this.phaser[channel] += currentNormFreq;\n\n                        if (this.phaser[channel] >= 1.0) {\n                            this.phaser[channel] -= 1.0;\n                            this.last[channel] = step * Math.floor((inp[i] * (1 / step)) + 0.5);\n                        }\n\n                        out[i] = this.last[channel];\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    stop() {\n        this.stopped = true;\n        this.phaser = null;\n        this.last = null;\n    }\n}\n\nregisterProcessor(Constants.WORKLET_NAMES.BITCRUSHER, BitCrusherProcessor);\n","import AbstractAudioFilterWorklet from \"./interfaces/AbstractAudioFilterWorklet\";\nimport Constants from \"../model/Constants\";\nimport BitCrusherSettings from \"../model/filtersSettings/BitCrusherSettings\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\nimport \"./worklets/BitCrusher.worklet\";\nimport utilFunctions from \"../utils/Functions\";\n\nexport default class BitCrusherFilter extends AbstractAudioFilterWorklet<void> {\n    private bits = 16;\n    private normFreq = 0.9;\n\n    constructor(bits: number, normFreq: number) {\n        super();\n        this.bits = bits;\n        this.normFreq = normFreq;\n    }\n    \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    receiveEvent(message: MessageEvent<void>): void {\n        // Do nothing\n    }\n\n    get workletPath(): string {\n        return Constants.WORKLET_PATHS.BITCRUSHER;\n    }\n    \n    get workletName(): string {\n        return Constants.WORKLET_NAMES.BITCRUSHER;\n    }\n\n    get order(): number {\n        return 6;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.BITCRUSHER;\n    }\n\n    getSettings(): BitCrusherSettings {\n        return {\n            bits: this.bits,\n            normFreq: this.normFreq,\n        };\n    }\n\n    async setSetting(settingId: string, value: FilterSettingValue) {\n        if(!utilFunctions.isSettingValueValid(value)) {\n            return;\n        }\n\n        switch (settingId) {\n        case \"bits\":\n            this.bits = parseInt(value as string);\n            break;\n        case \"normFreq\":\n            this.normFreq = parseFloat(value as string);\n            break;\n        }\n\n        this.applyCurrentSettingsToWorklet();\n    }\n}\n","import AbstractAudioFilter from \"./interfaces/AbstractAudioFilter\";\nimport Constants from \"../model/Constants\";\nimport EchoSettings from \"../model/filtersSettings/EchoSettings\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\nimport utilFunctions from \"../utils/Functions\";\n\nexport default class EchoFilter extends AbstractAudioFilter {\n    private delay = 0.2;\n    private gain = 0.75;\n\n    constructor(delay: number, gain: number) {\n        super();\n        this.delay = delay;\n        this.gain = gain;\n    }\n\n    getNode(context: BaseAudioContext) {\n        const delayNode = context.createDelay(179);\n        delayNode.delayTime.value = this.delay;\n\n        const gainNode = context.createGain();\n        gainNode.gain.value = this.gain;\n\n        gainNode.connect(delayNode);\n        delayNode.connect(gainNode);\n\n        return {\n            input: gainNode,\n            output: delayNode\n        };\n    }\n    \n    get order(): number {\n        return 7;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.ECHO;\n    }\n\n    getAddingTime() {\n        return 5;\n    }\n\n    getSettings(): EchoSettings {\n        return {\n            delay: this.delay,\n            gain: this.gain\n        };\n    }\n\n    async setSetting(settingId: string, value: FilterSettingValue) {\n        if(!utilFunctions.isSettingValueValid(value)) {\n            return;\n        }\n        \n        switch(settingId) {\n        case \"delay\":\n            this.delay = parseFloat(value as string);\n            break;\n        case \"gain\":\n            this.gain = parseFloat(value as string);\n            break;\n        }\n    }\n}\n","import AbstractAudioFilter from \"./interfaces/AbstractAudioFilter\";\nimport Constants from \"../model/Constants\";\nimport HighPassSettings from \"../model/filtersSettings/HighPassSettings\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\nimport utilFunctions from \"../utils/Functions\";\n\nexport default class HighPassFilter extends AbstractAudioFilter {\n    private highFrequency = 3500;\n\n    constructor(highFrequency: number) {\n        super();\n        this.highFrequency = highFrequency;\n    }\n\n    getNode(context: BaseAudioContext) {\n        const highPassFilter = context.createBiquadFilter();\n        highPassFilter.type = \"highpass\";\n        highPassFilter.frequency.value = this.highFrequency;\n\n        return {\n            input: highPassFilter,\n            output: highPassFilter\n        };\n    }\n    \n    get order(): number {\n        return 4;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.HIGH_PASS;\n    }\n\n    getSettings(): HighPassSettings {\n        return {\n            highFrequency: this.highFrequency\n        };\n    }\n\n    async setSetting(settingId: string, value: FilterSettingValue) {\n        if(!utilFunctions.isSettingValueValid(value)) {\n            return;\n        }\n        \n        switch(settingId) {\n        case \"highFrequency\":\n            this.highFrequency = parseInt(value as string);\n            break;\n        }\n    }\n}\n","export default class DelayBuffer {\n    private _array: Float32Array = new Float32Array();\n    private n: number = 0;\n    private length: number = 0;\n    private readPointer: number = 0;\n    private writePointer: number = 0;\n\n    constructor(n: number) {\n        this.n = Math.floor(n);\n        this.init();\n    }\n\n    init() {\n        this._array = new Float32Array(2 * this.n);\n        this.length = this._array.length;\n        this.readPointer = 0;\n        this.writePointer = this.n - 1;\n        this._array.fill(0);\n    }\n\n    read() {\n        const value = this._array[this.readPointer % this.length];\n        this.readPointer = (this.readPointer + 1) % this.length;\n        return value;\n    }\n\n    push(v: number) {\n        this._array[this.writePointer % this.length] = v;\n        this.writePointer = (this.writePointer + 1) % this.length;\n    }\n\n    reset() {\n        this.init();\n    }\n\n    clear() {\n        this._array = new Float32Array();\n        this.length = 0;\n        this.readPointer = 0;\n        this.writePointer = 0;\n    }\n\n    sum() {\n        return this._array.reduce((a, b) => a + b, 0);\n    }\n}\n","/*\n * Copyright (C) 2019-2023 Eliastik (eliastiksofts.com)\n *\n * This file is part of \"Simple Voice Changer\".\n *\n * \"Simple Voice Changer\" is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * \"Simple Voice Changer\" is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with \"Simple Voice Changer\".  If not, see <http://www.gnu.org/licenses/>.\n */\n// Source: https://webaudiotech.com/2016/01/21/should-your-web-audio-app-have-a-limiter/ (https://web.archive.org/web/20220519100003/https://webaudiotech.com/2016/01/21/should-your-web-audio-app-have-a-limiter/)\n// Original code: https://webaudiotech.com/sites/limiter_comparison/limiter.js\n// Additions by Eliastik (eliastiksofts.com): Stereo and multi-channel support, code simplified in one object class (Limiter), converted into AudioWorklet\nimport Constants from \"../../model/Constants\";\nimport DelayBuffer from \"../../utils/DelayBuffer\";\n\nclass LimiterProcessor extends AudioWorkletProcessor {\n    private delayBuffer: DelayBuffer[] = [];\n    private envelopeSample = 0;\n    private stopped = false;\n    private disabled = false;\n\n    constructor() {\n        super();\n        this.port.onmessage = (event) => {\n            if (event.data == \"reset\") {\n                this.reset();\n            } else if (event.data == \"stop\") {\n                this.stop();\n            } else if (event.data == \"disable\") {\n                this.disabled = true;\n            } else if (event.data == \"enable\") {\n                this.disabled = false;\n            }\n        };\n    }\n\n    static get parameterDescriptors() {\n        return [\n            { name: \"preGain\", defaultValue: 0 },\n            { name: \"postGain\", defaultValue: 0 },\n            { name: \"attackTime\", defaultValue: 0 },\n            { name: \"releaseTime\", defaultValue: 3 },\n            { name: \"threshold\", defaultValue: -0.05 },\n            { name: \"lookAheadTime\", defaultValue: 0 }\n        ];\n    }\n\n    get defaultParameterDescriptors() {\n        return LimiterProcessor.parameterDescriptors;\n    }\n\n    getEnvelope(data: Float32Array, attackTime: number, releaseTime: number, sampleRate: number) {\n        const attackGain = Math.exp(-1 / (sampleRate * attackTime));\n        const releaseGain = Math.exp(-1 / (sampleRate * releaseTime));\n\n        const envelope = new Float32Array(data.length);\n\n        for (let i = 0; i < data.length; i++) {\n            const envIn = Math.abs(data[i]);\n\n            if (this.envelopeSample < envIn) {\n                this.envelopeSample = envIn + attackGain * (this.envelopeSample - envIn);\n            } else {\n                this.envelopeSample = envIn + releaseGain * (this.envelopeSample - envIn);\n            }\n\n            envelope[i] = this.envelopeSample;\n        }\n\n        return envelope;\n    }\n\n    getMaxEnvelope(envelope: Float32Array[], channels: number, index: number) {\n        let max = envelope[0][index];\n\n        for (let channel = 0; channel < channels; channel++) {\n            if (envelope[channel][index] > max) {\n                max = envelope[channel][index];\n            }\n        }\n\n        return max;\n    }\n\n    ampToDB(value: number) {\n        return 20 * Math.log10(value);\n    }\n\n    dBToAmp(db: number) {\n        return Math.pow(10, db / 20);\n    }\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n        if (this.stopped) return false;\n\n        const inputBuffer = inputs[0];\n        const outputBuffer = outputs[0];\n        const envelopeData = [];\n\n        // transform db to amplitude value\n        const postGainAmp = this.dBToAmp(parameters.postGain[0]);\n        const preGainAmp = this.dBToAmp(parameters.preGain[0]);\n\n        // apply pre gain to signal\n        // compute the envelope for each channel\n        for (let channel = 0; channel < outputBuffer.length; channel++) {\n            const inp = inputBuffer[channel];\n            const out = outputBuffer[channel];\n\n            // create a delay buffer\n            if (this.delayBuffer[channel] == null) {\n                this.delayBuffer[channel] = new DelayBuffer(parameters.lookAheadTime[0] * sampleRate);\n            }\n\n            // apply pre gain to signal\n            if (inp && out) {\n                for (let k = 0; k < inp.length; ++k) {\n                    if (!this.disabled) {\n                        out[k] = preGainAmp * inp[k];\n                    } else {\n                        out[k] = inp[k];\n                    }\n                }\n            }\n\n            // compute the envelope\n            if (!this.disabled && out) {\n                envelopeData[channel] = this.getEnvelope(out, parameters.attackTime[0], parameters.releaseTime[0], sampleRate);\n            }\n        }\n\n        for (let channel = 0; channel < outputBuffer.length; channel++) {\n            const inp = inputBuffer[channel];\n            const out = outputBuffer[channel];\n\n            if (parameters.lookAheadTime[0] > 0 && out) {\n                // write signal into buffer and read delayed signal\n                for (let i = 0; i < out.length; i++) {\n                    this.delayBuffer[channel].push(out[i]);\n                    out[i] = this.delayBuffer[channel].read();\n                }\n            }\n\n            // If disabled we don't apply the limitation to the audio\n            if (this.disabled) {\n                continue;\n            }\n\n            // limiter mode: slope is 1\n            const slope = 1;\n\n            if (inp && out) {\n                for (let i = 0; i < inp.length; i++) {\n                    let gainDB = slope * (parameters.threshold[0] - this.ampToDB(this.getMaxEnvelope(envelopeData, outputBuffer.length, i))); // max gain\n\n                    // is gain below zero?\n                    gainDB = Math.min(0, gainDB);\n                    const gain = this.dBToAmp(gainDB);\n                    out[i] *= (gain * postGainAmp);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    reset() {\n        for (let i = 0; i < this.delayBuffer.length; i++) {\n            if (this.delayBuffer[i] != null) {\n                this.delayBuffer[i].reset();\n            }\n        }\n\n        this.envelopeSample = 0;\n    }\n\n    stop() {\n        for (let i = 0; i < this.delayBuffer.length; i++) {\n            if (this.delayBuffer[i] != null) {\n                this.delayBuffer[i].clear();\n            }\n        }\n\n        this.delayBuffer = [];\n        this.envelopeSample = 0;\n        this.stopped = true;\n    }\n}\n\nregisterProcessor(Constants.WORKLET_NAMES.LIMITER, LimiterProcessor);\n","import AbstractAudioFilterWorklet from \"./interfaces/AbstractAudioFilterWorklet\";\nimport Constants from \"../model/Constants\";\nimport LimiterSettings from \"../model/filtersSettings/LimiterSettings\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\nimport \"./worklets/Limiter.worklet\";\nimport utilFunctions from \"../utils/Functions\";\n\nexport default class LimiterFilter extends AbstractAudioFilterWorklet<void> {\n    private preGain = 0; // dB\n    private postGain = 0; // dB\n    private attackTime = 0; // s\n    private releaseTime = 3; // s\n    private threshold = -0.05; // dB\n    private lookAheadTime = 0.1; // s\n\n    constructor(preGain: number, postGain: number, attackTime: number, releaseTime: number, threshold: number, lookAheadTime: number) {\n        super();\n        this.preGain = preGain || this.preGain;\n        this.postGain = postGain || this.postGain;\n        this.attackTime = attackTime || this.attackTime;\n        this.releaseTime = releaseTime || this.releaseTime;\n        this.threshold = threshold || this.threshold;\n        this.lookAheadTime = lookAheadTime || this.lookAheadTime;\n        this.keepCurrentNodeIfPossible = true;\n        this.enable();\n        this.setDefaultEnabled(true);\n    }\n    \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    receiveEvent(message: MessageEvent<void>): void {\n        // Do nothing\n    }\n\n    get workletPath(): string {\n        return Constants.WORKLET_PATHS.LIMITER;\n    }\n    \n    get workletName(): string {\n        return Constants.WORKLET_NAMES.LIMITER;\n    }\n\n    get order(): number {\n        return 11;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.LIMITER;\n    }\n\n    getAddingTime() {\n        return this.lookAheadTime;\n    }\n\n    getSettings(): LimiterSettings {\n        return {\n            preGain: this.preGain,\n            postGain: this.postGain,\n            attackTime: this.attackTime,\n            releaseTime: this.releaseTime,\n            threshold: this.threshold,\n            lookAheadTime: this.lookAheadTime\n        };\n    }\n\n    async setSetting(settingId: string, value: FilterSettingValue) {\n        if(!utilFunctions.isSettingValueValid(value)) {\n            return;\n        }\n        \n        switch (settingId) {\n        case \"preGain\":\n            this.preGain = parseFloat(value as string);\n            break;\n        case \"postGain\":\n            this.postGain = parseFloat(value as string);\n            break;\n        case \"attackTime\":\n            this.attackTime = parseFloat(value as string);\n            break;\n        case \"releaseTime\":\n            this.releaseTime = parseFloat(value as string);\n            break;\n        case \"threshold\":\n            this.threshold = parseFloat(value as string);\n            break;\n        case \"lookAheadTime\":\n            this.lookAheadTime = parseFloat(value as string);\n            break;\n        }\n\n        this.applyCurrentSettingsToWorklet();\n    }\n}\n","import AbstractAudioFilter from \"./interfaces/AbstractAudioFilter\";\nimport Constants from \"../model/Constants\";\nimport LowPassSettings from \"../model/filtersSettings/LowPassSettings\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\nimport utilFunctions from \"../utils/Functions\";\n\nexport default class LowPassFilter extends AbstractAudioFilter {\n    private lowFrequency = 3500;\n\n    constructor(lowFrequency: number) {\n        super();\n        this.lowFrequency = lowFrequency;\n    }\n    \n    getNode(context: BaseAudioContext) {\n        const lowPassFilter = context.createBiquadFilter();\n        lowPassFilter.type = \"lowpass\";\n        lowPassFilter.frequency.value = this.lowFrequency;\n\n        return {\n            input: lowPassFilter,\n            output: lowPassFilter\n        };\n    }\n    \n    get order(): number {\n        return 5;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.LOW_PASS;\n    }\n\n    getSettings(): LowPassSettings {\n        return {\n            lowFrequency: this.lowFrequency\n        };\n    }\n\n    async setSetting(settingId: string, value: FilterSettingValue) {\n        if(!utilFunctions.isSettingValueValid(value)) {\n            return;\n        }\n        \n        switch (settingId) {\n        case \"lowFrequency\":\n            this.lowFrequency = parseInt(value as string);\n            break;\n        }\n    }\n}\n","import AbstractAudioElement from \"./AbstractAudioElement\";\n\nexport default abstract class AbstractAudioRenderer extends AbstractAudioElement {\n    /** Render an AudioBuffer based on another input AudioBuffer */\n    abstract renderAudio(context: BaseAudioContext, buffer: AudioBuffer): Promise<AudioBuffer>;\n}","import AbstractAudioRenderer from \"./interfaces/AbstractAudioRenderer\";\nimport Constants from \"../model/Constants\";\n\nexport default class ReturnAudioRenderer extends AbstractAudioRenderer {\n    renderAudio(context: BaseAudioContext, buffer: AudioBuffer): Promise<AudioBuffer> {\n        return new Promise(resolve => {\n            const numChannels = buffer.numberOfChannels;\n            const totalFrames = context.sampleRate * buffer.duration + context.sampleRate * 2;\n            const bufferReturned = context.createBuffer(numChannels, totalFrames, context.sampleRate);\n\n            for (let channel = 0; channel < numChannels; channel++) {\n                const nowBuffering = bufferReturned.getChannelData(channel);\n                const sourceChannelData = buffer.getChannelData(channel);\n\n                for (let i = 0; i < totalFrames; i++) {\n                    if (i < sourceChannelData.length) {\n                        nowBuffering[i] = sourceChannelData[sourceChannelData.length - 1 - i];\n                    } else {\n                        nowBuffering[i] = 0;\n                    }\n                }\n            }\n\n            resolve(bufferReturned);\n        });\n    }\n\n    get order(): number {\n        return 0;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.RETURN_AUDIO;\n    }\n}\n","import AbstractAudioFilter from \"./interfaces/AbstractAudioFilter\";\nimport Constants from \"../model/Constants\";\nimport { ReverbEnvironment } from \"../model/ReverbEnvironment\";\nimport ReverbSettings from \"../model/filtersSettings/ReverbSettings\";\nimport GenericSettingValue from \"../model/filtersSettings/GenericSettingValue\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\nimport utilFunctions from \"@/utils/Functions\";\n\nexport default class ReverbFilter extends AbstractAudioFilter {\n\n    private reverbEnvironment: ReverbEnvironment = Constants.DEFAULT_REVERB_ENVIRONMENT;\n    private reverbCustomEnvironmentAddTime = 5;\n    private customEnvironment: AudioBuffer | null = null;\n\n    getNode(context: BaseAudioContext) {\n        const convolver = context.createConvolver();\n\n        if (!this.reverbEnvironment || (this.reverbEnvironment.url == \"custom\" && !this.customEnvironment)) {\n            // Fallback to default environment otherwise\n            this.reverbEnvironment = Constants.DEFAULT_REVERB_ENVIRONMENT;\n        }\n\n        const buffer = this.getReverbBuffer(context);\n\n        if (buffer) {\n            convolver.buffer = buffer;\n        }\n\n        return {\n            input: convolver,\n            output: convolver\n        };\n    }\n\n    private getReverbBuffer(context: BaseAudioContext): AudioBuffer | undefined {\n        if (this.reverbEnvironment.url == \"custom\" && this.customEnvironment) {\n            if (this.customEnvironment.sampleRate === context.sampleRate) {\n                return this.customEnvironment;\n            } else {\n                this.reverbEnvironment = Constants.DEFAULT_REVERB_ENVIRONMENT;\n            }\n        } else if (this.bufferFetcherService) {\n            return this.bufferFetcherService.getAudioBuffer(this.reverbEnvironment.url);\n        }\n\n        return;\n    }\n\n    get order(): number {\n        return 9;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.REVERB;\n    }\n\n    getAddingTime() {\n        const settings = this.getSettings();\n\n        if (settings && settings.reverbEnvironment) {\n            if (settings.reverbEnvironment.value != \"custom\") {\n                if (settings.reverbEnvironment.additionalData) {\n                    return settings.reverbEnvironment.additionalData.addDuration as number;\n                }\n            } else {\n                return this.reverbCustomEnvironmentAddTime;\n            }\n        }\n\n        return 0;\n    }\n\n    getSettings(): ReverbSettings {\n        if (!this.reverbEnvironment) {\n            return {\n                reverbCustomEnvironmentAddTime: this.reverbCustomEnvironmentAddTime\n            };\n        }\n\n        return {\n            reverbEnvironment: {\n                name: this.reverbEnvironment.name,\n                value: this.reverbEnvironment.url,\n                additionalData: {\n                    size: this.reverbEnvironment.size,\n                    link: this.reverbEnvironment.link,\n                    addDuration: this.reverbEnvironment.addDuration\n                }\n            },\n            downloadedBuffers: this.bufferFetcherService?.getDownloadedBuffersList(),\n            hasCustomEnvironment: this.customEnvironment ? true : false,\n            reverbCustomEnvironmentAddTime: this.reverbCustomEnvironmentAddTime\n        };\n    }\n\n    async setSetting(settingId: string, value: FilterSettingValue) {\n        if (settingId == \"reverbEnvironment\") {\n            const reverbEnvironment = value as GenericSettingValue;\n\n            if (reverbEnvironment) {\n                const url = reverbEnvironment.value;\n\n                try {\n                    if (url != \"custom\") {\n                        await this.bufferFetcherService?.fetchBuffer(url);\n                    }\n\n                    if (reverbEnvironment.additionalData) {\n                        this.reverbEnvironment = {\n                            name: reverbEnvironment.name,\n                            url,\n                            size: reverbEnvironment.additionalData.size as number,\n                            addDuration: reverbEnvironment.additionalData.addDuration as number,\n                            link: reverbEnvironment.additionalData.link as string\n                        };\n                    } else {\n                        this.reverbEnvironment = {\n                            name: reverbEnvironment.name,\n                            url,\n                            size: 0,\n                            addDuration: 0,\n                            link: \"\"\n                        };\n                    }\n                } catch (e) { /* empty */ }\n            }\n        } else if (settingId == \"reverbCustomEnvironmentAddTime\") {\n            if (utilFunctions.isSettingValueValid(value)) {\n                this.reverbCustomEnvironmentAddTime = parseInt(value as string);\n            }\n        } else if (settingId == \"reverbCustomEnvironmentFile\") {\n            if (this.bufferDecoderService && value) {\n                this.customEnvironment = await this.bufferDecoderService.decodeBufferFromFile(value as File);\n\n                if (!this.customEnvironment) {\n                    // Fallback to default environment\n                    this.reverbEnvironment = Constants.DEFAULT_REVERB_ENVIRONMENT;\n                }\n            }\n        }\n    }\n}\n","/*\n * SoundTouch JS v0.1.30 audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nclass FifoSampleBuffer {\n  constructor() {\n    this._vector = new Float32Array();\n    this._position = 0;\n    this._frameCount = 0;\n  }\n  get vector() {\n    return this._vector;\n  }\n  get position() {\n    return this._position;\n  }\n  get startIndex() {\n    return this._position * 2;\n  }\n  get frameCount() {\n    return this._frameCount;\n  }\n  get endIndex() {\n    return (this._position + this._frameCount) * 2;\n  }\n  clear() {\n    this.receive(this._frameCount);\n    this.rewind();\n  }\n  put(numFrames) {\n    this._frameCount += numFrames;\n  }\n  putSamples(samples, position, numFrames = 0) {\n    position = position || 0;\n    const sourceOffset = position * 2;\n    if (!(numFrames >= 0)) {\n      numFrames = (samples.length - sourceOffset) / 2;\n    }\n    const numSamples = numFrames * 2;\n    this.ensureCapacity(numFrames + this._frameCount);\n    const destOffset = this.endIndex;\n    this.vector.set(samples.subarray(sourceOffset, sourceOffset + numSamples), destOffset);\n    this._frameCount += numFrames;\n  }\n  putBuffer(buffer, position, numFrames = 0) {\n    position = position || 0;\n    if (!(numFrames >= 0)) {\n      numFrames = buffer.frameCount - position;\n    }\n    this.putSamples(buffer.vector, buffer.position + position, numFrames);\n  }\n  receive(numFrames) {\n    if (!(numFrames >= 0) || numFrames > this._frameCount) {\n      numFrames = this.frameCount;\n    }\n    this._frameCount -= numFrames;\n    this._position += numFrames;\n  }\n  receiveSamples(output, numFrames = 0) {\n    const numSamples = numFrames * 2;\n    const sourceOffset = this.startIndex;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n    this.receive(numFrames);\n  }\n  extract(output, position = 0, numFrames = 0) {\n    const sourceOffset = this.startIndex + position * 2;\n    const numSamples = numFrames * 2;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n  }\n  ensureCapacity(numFrames = 0) {\n    const minLength = parseInt(numFrames * 2);\n    if (this._vector.length < minLength) {\n      const newVector = new Float32Array(minLength);\n      newVector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._vector = newVector;\n      this._position = 0;\n    } else {\n      this.rewind();\n    }\n  }\n  ensureAdditionalCapacity(numFrames = 0) {\n    this.ensureCapacity(this._frameCount + numFrames);\n  }\n  rewind() {\n    if (this._position > 0) {\n      this._vector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._position = 0;\n    }\n  }\n}\n\nclass AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    if (createBuffers) {\n      this._inputBuffer = new FifoSampleBuffer();\n      this._outputBuffer = new FifoSampleBuffer();\n    } else {\n      this._inputBuffer = this._outputBuffer = null;\n    }\n  }\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n  set inputBuffer(inputBuffer) {\n    this._inputBuffer = inputBuffer;\n  }\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n  set outputBuffer(outputBuffer) {\n    this._outputBuffer = outputBuffer;\n  }\n  clear() {\n    this._inputBuffer.clear();\n    this._outputBuffer.clear();\n  }\n}\n\nclass RateTransposer extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this.reset();\n    this._rate = 1;\n  }\n  set rate(rate) {\n    this._rate = rate;\n  }\n  reset() {\n    this.slopeCount = 0;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n  }\n  clone() {\n    const result = new RateTransposer();\n    result.rate = this._rate;\n    return result;\n  }\n  process() {\n    const numFrames = this._inputBuffer.frameCount;\n    this._outputBuffer.ensureAdditionalCapacity(numFrames / this._rate + 1);\n    const numFramesOutput = this.transpose(numFrames);\n    this._inputBuffer.receive();\n    this._outputBuffer.put(numFramesOutput);\n  }\n  transpose(numFrames = 0) {\n    if (numFrames === 0) {\n      return 0;\n    }\n    const src = this._inputBuffer.vector;\n    const srcOffset = this._inputBuffer.startIndex;\n    const dest = this._outputBuffer.vector;\n    const destOffset = this._outputBuffer.endIndex;\n    let used = 0;\n    let i = 0;\n    while (this.slopeCount < 1.0) {\n      dest[destOffset + 2 * i] = (1.0 - this.slopeCount) * this.prevSampleL + this.slopeCount * src[srcOffset];\n      dest[destOffset + 2 * i + 1] = (1.0 - this.slopeCount) * this.prevSampleR + this.slopeCount * src[srcOffset + 1];\n      i = i + 1;\n      this.slopeCount += this._rate;\n    }\n    this.slopeCount -= 1.0;\n    if (numFrames !== 1) {\n      out: while (true) {\n        while (this.slopeCount > 1.0) {\n          this.slopeCount -= 1.0;\n          used = used + 1;\n          if (used >= numFrames - 1) {\n            break out;\n          }\n        }\n        const srcIndex = srcOffset + 2 * used;\n        dest[destOffset + 2 * i] = (1.0 - this.slopeCount) * src[srcIndex] + this.slopeCount * src[srcIndex + 2];\n        dest[destOffset + 2 * i + 1] = (1.0 - this.slopeCount) * src[srcIndex + 1] + this.slopeCount * src[srcIndex + 3];\n        i = i + 1;\n        this.slopeCount += this._rate;\n      }\n    }\n    this.prevSampleL = src[srcOffset + 2 * numFrames - 2];\n    this.prevSampleR = src[srcOffset + 2 * numFrames - 1];\n    return i;\n  }\n}\n\nclass FilterSupport {\n  constructor(pipe) {\n    this._pipe = pipe;\n  }\n  get pipe() {\n    return this._pipe;\n  }\n  get inputBuffer() {\n    return this._pipe.inputBuffer;\n  }\n  get outputBuffer() {\n    return this._pipe.outputBuffer;\n  }\n  fillInputBuffer() {\n    throw new Error('fillInputBuffer() not overridden');\n  }\n  fillOutputBuffer(numFrames = 0) {\n    while (this.outputBuffer.frameCount < numFrames) {\n      const numInputFrames = 8192 * 2 - this.inputBuffer.frameCount;\n      this.fillInputBuffer(numInputFrames);\n      if (this.inputBuffer.frameCount < 8192 * 2) {\n        break;\n      }\n      this._pipe.process();\n    }\n  }\n  clear() {\n    this._pipe.clear();\n  }\n}\n\nconst noop = function () {\n  return;\n};\n\nclass SimpleFilter extends FilterSupport {\n  constructor(sourceSound, pipe, callback = noop) {\n    super(pipe);\n    this.callback = callback;\n    this.sourceSound = sourceSound;\n    this.historyBufferSize = 22050;\n    this._sourcePosition = 0;\n    this.outputBufferPosition = 0;\n    this._position = 0;\n  }\n  get position() {\n    return this._position;\n  }\n  set position(position) {\n    if (position > this._position) {\n      throw new RangeError('New position may not be greater than current position');\n    }\n    const newOutputBufferPosition = this.outputBufferPosition - (this._position - position);\n    if (newOutputBufferPosition < 0) {\n      throw new RangeError('New position falls outside of history buffer');\n    }\n    this.outputBufferPosition = newOutputBufferPosition;\n    this._position = position;\n  }\n  get sourcePosition() {\n    return this._sourcePosition;\n  }\n  set sourcePosition(sourcePosition) {\n    this.clear();\n    this._sourcePosition = sourcePosition;\n  }\n  onEnd() {\n    this.callback();\n  }\n  fillInputBuffer(numFrames = 0) {\n    const samples = new Float32Array(numFrames * 2);\n    const numFramesExtracted = this.sourceSound.extract(samples, numFrames, this._sourcePosition);\n    this._sourcePosition += numFramesExtracted;\n    this.inputBuffer.putSamples(samples, 0, numFramesExtracted);\n  }\n  extract(target, numFrames = 0) {\n    this.fillOutputBuffer(this.outputBufferPosition + numFrames);\n    const numFramesExtracted = Math.min(numFrames, this.outputBuffer.frameCount - this.outputBufferPosition);\n    this.outputBuffer.extract(target, this.outputBufferPosition, numFramesExtracted);\n    const currentFrames = this.outputBufferPosition + numFramesExtracted;\n    this.outputBufferPosition = Math.min(this.historyBufferSize, currentFrames);\n    this.outputBuffer.receive(Math.max(currentFrames - this.historyBufferSize, 0));\n    this._position += numFramesExtracted;\n    return numFramesExtracted;\n  }\n  handleSampleData(event) {\n    this.extract(event.data, 4096);\n  }\n  clear() {\n    super.clear();\n    this.outputBufferPosition = 0;\n  }\n}\n\nconst USE_AUTO_SEQUENCE_LEN = 0;\nconst DEFAULT_SEQUENCE_MS = USE_AUTO_SEQUENCE_LEN;\nconst USE_AUTO_SEEKWINDOW_LEN = 0;\nconst DEFAULT_SEEKWINDOW_MS = USE_AUTO_SEEKWINDOW_LEN;\nconst DEFAULT_OVERLAP_MS = 8;\nconst _SCAN_OFFSETS = [[124, 186, 248, 310, 372, 434, 496, 558, 620, 682, 744, 806, 868, 930, 992, 1054, 1116, 1178, 1240, 1302, 1364, 1426, 1488, 0], [-100, -75, -50, -25, 25, 50, 75, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-20, -15, -10, -5, 5, 10, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-4, -3, -2, -1, 1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];\nconst AUTOSEQ_TEMPO_LOW = 0.5;\nconst AUTOSEQ_TEMPO_TOP = 2.0;\nconst AUTOSEQ_AT_MIN = 125.0;\nconst AUTOSEQ_AT_MAX = 50.0;\nconst AUTOSEQ_K = (AUTOSEQ_AT_MAX - AUTOSEQ_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEQ_C = AUTOSEQ_AT_MIN - AUTOSEQ_K * AUTOSEQ_TEMPO_LOW;\nconst AUTOSEEK_AT_MIN = 25.0;\nconst AUTOSEEK_AT_MAX = 15.0;\nconst AUTOSEEK_K = (AUTOSEEK_AT_MAX - AUTOSEEK_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEEK_C = AUTOSEEK_AT_MIN - AUTOSEEK_K * AUTOSEQ_TEMPO_LOW;\nclass Stretch extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this._quickSeek = true;\n    this.midBufferDirty = false;\n    this.midBuffer = null;\n    this.overlapLength = 0;\n    this.autoSeqSetting = true;\n    this.autoSeekSetting = true;\n    this._tempo = 1;\n    this.setParameters(44100, DEFAULT_SEQUENCE_MS, DEFAULT_SEEKWINDOW_MS, DEFAULT_OVERLAP_MS);\n  }\n  clear() {\n    super.clear();\n    this.clearMidBuffer();\n  }\n  clearMidBuffer() {\n    if (this.midBufferDirty) {\n      this.midBufferDirty = false;\n      this.midBuffer = null;\n    }\n  }\n  setParameters(sampleRate, sequenceMs, seekWindowMs, overlapMs) {\n    if (sampleRate > 0) {\n      this.sampleRate = sampleRate;\n    }\n    if (overlapMs > 0) {\n      this.overlapMs = overlapMs;\n    }\n    if (sequenceMs > 0) {\n      this.sequenceMs = sequenceMs;\n      this.autoSeqSetting = false;\n    } else {\n      this.autoSeqSetting = true;\n    }\n    if (seekWindowMs > 0) {\n      this.seekWindowMs = seekWindowMs;\n      this.autoSeekSetting = false;\n    } else {\n      this.autoSeekSetting = true;\n    }\n    this.calculateSequenceParameters();\n    this.calculateOverlapLength(this.overlapMs);\n    this.tempo = this._tempo;\n  }\n  set tempo(newTempo) {\n    let intskip;\n    this._tempo = newTempo;\n    this.calculateSequenceParameters();\n    this.nominalSkip = this._tempo * (this.seekWindowLength - this.overlapLength);\n    this.skipFract = 0;\n    intskip = Math.floor(this.nominalSkip + 0.5);\n    this.sampleReq = Math.max(intskip + this.overlapLength, this.seekWindowLength) + this.seekLength;\n  }\n  get tempo() {\n    return this._tempo;\n  }\n  get inputChunkSize() {\n    return this.sampleReq;\n  }\n  get outputChunkSize() {\n    return this.overlapLength + Math.max(0, this.seekWindowLength - 2 * this.overlapLength);\n  }\n  calculateOverlapLength(overlapInMsec = 0) {\n    let newOvl;\n    newOvl = this.sampleRate * overlapInMsec / 1000;\n    newOvl = newOvl < 16 ? 16 : newOvl;\n    newOvl -= newOvl % 8;\n    this.overlapLength = newOvl;\n    this.refMidBuffer = new Float32Array(this.overlapLength * 2);\n    this.midBuffer = new Float32Array(this.overlapLength * 2);\n  }\n  checkLimits(x, mi, ma) {\n    return x < mi ? mi : x > ma ? ma : x;\n  }\n  calculateSequenceParameters() {\n    let seq;\n    let seek;\n    if (this.autoSeqSetting) {\n      seq = AUTOSEQ_C + AUTOSEQ_K * this._tempo;\n      seq = this.checkLimits(seq, AUTOSEQ_AT_MAX, AUTOSEQ_AT_MIN);\n      this.sequenceMs = Math.floor(seq + 0.5);\n    }\n    if (this.autoSeekSetting) {\n      seek = AUTOSEEK_C + AUTOSEEK_K * this._tempo;\n      seek = this.checkLimits(seek, AUTOSEEK_AT_MAX, AUTOSEEK_AT_MIN);\n      this.seekWindowMs = Math.floor(seek + 0.5);\n    }\n    this.seekWindowLength = Math.floor(this.sampleRate * this.sequenceMs / 1000);\n    this.seekLength = Math.floor(this.sampleRate * this.seekWindowMs / 1000);\n  }\n  set quickSeek(enable) {\n    this._quickSeek = enable;\n  }\n  clone() {\n    const result = new Stretch();\n    result.tempo = this._tempo;\n    result.setParameters(this.sampleRate, this.sequenceMs, this.seekWindowMs, this.overlapMs);\n    return result;\n  }\n  seekBestOverlapPosition() {\n    return this._quickSeek ? this.seekBestOverlapPositionStereoQuick() : this.seekBestOverlapPositionStereo();\n  }\n  seekBestOverlapPositionStereo() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let i = 0;\n    this.preCalculateCorrelationReferenceStereo();\n    bestOffset = 0;\n    bestCorrelation = Number.MIN_VALUE;\n    for (; i < this.seekLength; i = i + 1) {\n      correlation = this.calculateCrossCorrelationStereo(2 * i, this.refMidBuffer);\n      if (correlation > bestCorrelation) {\n        bestCorrelation = correlation;\n        bestOffset = i;\n      }\n    }\n    return bestOffset;\n  }\n  seekBestOverlapPositionStereoQuick() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let scanCount = 0;\n    let correlationOffset;\n    let tempOffset;\n    this.preCalculateCorrelationReferenceStereo();\n    bestCorrelation = Number.MIN_VALUE;\n    bestOffset = 0;\n    correlationOffset = 0;\n    tempOffset = 0;\n    for (; scanCount < 4; scanCount = scanCount + 1) {\n      let j = 0;\n      while (_SCAN_OFFSETS[scanCount][j]) {\n        tempOffset = correlationOffset + _SCAN_OFFSETS[scanCount][j];\n        if (tempOffset >= this.seekLength) {\n          break;\n        }\n        correlation = this.calculateCrossCorrelationStereo(2 * tempOffset, this.refMidBuffer);\n        if (correlation > bestCorrelation) {\n          bestCorrelation = correlation;\n          bestOffset = tempOffset;\n        }\n        j = j + 1;\n      }\n      correlationOffset = bestOffset;\n    }\n    return bestOffset;\n  }\n  preCalculateCorrelationReferenceStereo() {\n    let i = 0;\n    let context;\n    let temp;\n    for (; i < this.overlapLength; i = i + 1) {\n      temp = i * (this.overlapLength - i);\n      context = i * 2;\n      this.refMidBuffer[context] = this.midBuffer[context] * temp;\n      this.refMidBuffer[context + 1] = this.midBuffer[context + 1] * temp;\n    }\n  }\n  calculateCrossCorrelationStereo(mixingPosition, compare) {\n    const mixing = this._inputBuffer.vector;\n    mixingPosition += this._inputBuffer.startIndex;\n    let correlation = 0;\n    let i = 2;\n    const calcLength = 2 * this.overlapLength;\n    let mixingOffset;\n    for (; i < calcLength; i = i + 2) {\n      mixingOffset = i + mixingPosition;\n      correlation += mixing[mixingOffset] * compare[i] + mixing[mixingOffset + 1] * compare[i + 1];\n    }\n    return correlation;\n  }\n  overlap(overlapPosition) {\n    this.overlapStereo(2 * overlapPosition);\n  }\n  overlapStereo(inputPosition) {\n    const input = this._inputBuffer.vector;\n    inputPosition += this._inputBuffer.startIndex;\n    const output = this._outputBuffer.vector;\n    const outputPosition = this._outputBuffer.endIndex;\n    let i = 0;\n    let context;\n    let tempFrame;\n    const frameScale = 1 / this.overlapLength;\n    let fi;\n    let inputOffset;\n    let outputOffset;\n    for (; i < this.overlapLength; i = i + 1) {\n      tempFrame = (this.overlapLength - i) * frameScale;\n      fi = i * frameScale;\n      context = 2 * i;\n      inputOffset = context + inputPosition;\n      outputOffset = context + outputPosition;\n      output[outputOffset + 0] = input[inputOffset + 0] * fi + this.midBuffer[context + 0] * tempFrame;\n      output[outputOffset + 1] = input[inputOffset + 1] * fi + this.midBuffer[context + 1] * tempFrame;\n    }\n  }\n  process() {\n    let offset;\n    let temp;\n    let overlapSkip;\n    if (this.midBuffer === null) {\n      if (this._inputBuffer.frameCount < this.overlapLength) {\n        return;\n      }\n      this.midBuffer = new Float32Array(this.overlapLength * 2);\n      this._inputBuffer.receiveSamples(this.midBuffer, this.overlapLength);\n    }\n    while (this._inputBuffer.frameCount >= this.sampleReq) {\n      offset = this.seekBestOverlapPosition();\n      this._outputBuffer.ensureAdditionalCapacity(this.overlapLength);\n      this.overlap(Math.floor(offset));\n      this._outputBuffer.put(this.overlapLength);\n      temp = this.seekWindowLength - 2 * this.overlapLength;\n      if (temp > 0) {\n        this._outputBuffer.putBuffer(this._inputBuffer, offset + this.overlapLength, temp);\n      }\n      const start = this._inputBuffer.startIndex + 2 * (offset + this.seekWindowLength - this.overlapLength);\n      this.midBuffer.set(this._inputBuffer.vector.subarray(start, start + 2 * this.overlapLength));\n      this.skipFract += this.nominalSkip;\n      overlapSkip = Math.floor(this.skipFract);\n      this.skipFract -= overlapSkip;\n      this._inputBuffer.receive(overlapSkip);\n    }\n  }\n}\n\nconst testFloatEqual = function (a, b) {\n  return (a > b ? a - b : b - a) > 1e-10;\n};\n\nclass SoundTouch {\n  constructor() {\n    this.transposer = new RateTransposer(false);\n    this.stretch = new Stretch(false);\n    this._inputBuffer = new FifoSampleBuffer();\n    this._intermediateBuffer = new FifoSampleBuffer();\n    this._outputBuffer = new FifoSampleBuffer();\n    this._rate = 0;\n    this._tempo = 0;\n    this.virtualPitch = 1.0;\n    this.virtualRate = 1.0;\n    this.virtualTempo = 1.0;\n    this.calculateEffectiveRateAndTempo();\n  }\n  clear() {\n    this.transposer.clear();\n    this.stretch.clear();\n  }\n  clone() {\n    const result = new SoundTouch();\n    result.rate = this.rate;\n    result.tempo = this.tempo;\n    return result;\n  }\n  get rate() {\n    return this._rate;\n  }\n  set rate(rate) {\n    this.virtualRate = rate;\n    this.calculateEffectiveRateAndTempo();\n  }\n  set rateChange(rateChange) {\n    this._rate = 1.0 + 0.01 * rateChange;\n  }\n  get tempo() {\n    return this._tempo;\n  }\n  set tempo(tempo) {\n    this.virtualTempo = tempo;\n    this.calculateEffectiveRateAndTempo();\n  }\n  set tempoChange(tempoChange) {\n    this.tempo = 1.0 + 0.01 * tempoChange;\n  }\n  set pitch(pitch) {\n    this.virtualPitch = pitch;\n    this.calculateEffectiveRateAndTempo();\n  }\n  set pitchOctaves(pitchOctaves) {\n    this.pitch = Math.exp(0.69314718056 * pitchOctaves);\n    this.calculateEffectiveRateAndTempo();\n  }\n  set pitchSemitones(pitchSemitones) {\n    this.pitchOctaves = pitchSemitones / 12.0;\n  }\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n  calculateEffectiveRateAndTempo() {\n    const previousTempo = this._tempo;\n    const previousRate = this._rate;\n    this._tempo = this.virtualTempo / this.virtualPitch;\n    this._rate = this.virtualRate * this.virtualPitch;\n    if (testFloatEqual(this._tempo, previousTempo)) {\n      this.stretch.tempo = this._tempo;\n    }\n    if (testFloatEqual(this._rate, previousRate)) {\n      this.transposer.rate = this._rate;\n    }\n    if (this._rate > 1.0) {\n      if (this._outputBuffer != this.transposer.outputBuffer) {\n        this.stretch.inputBuffer = this._inputBuffer;\n        this.stretch.outputBuffer = this._intermediateBuffer;\n        this.transposer.inputBuffer = this._intermediateBuffer;\n        this.transposer.outputBuffer = this._outputBuffer;\n      }\n    } else {\n      if (this._outputBuffer != this.stretch.outputBuffer) {\n        this.transposer.inputBuffer = this._inputBuffer;\n        this.transposer.outputBuffer = this._intermediateBuffer;\n        this.stretch.inputBuffer = this._intermediateBuffer;\n        this.stretch.outputBuffer = this._outputBuffer;\n      }\n    }\n  }\n  process() {\n    if (this._rate > 1.0) {\n      this.stretch.process();\n      this.transposer.process();\n    } else {\n      this.transposer.process();\n      this.stretch.process();\n    }\n  }\n}\n\nclass WebAudioBufferSource {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this._position = 0;\n  }\n  get dualChannel() {\n    return this.buffer.numberOfChannels > 1;\n  }\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position = value;\n  }\n  extract(target, numFrames = 0, position = 0) {\n    this.position = position;\n    let left = this.buffer.getChannelData(0);\n    let right = this.dualChannel ? this.buffer.getChannelData(1) : this.buffer.getChannelData(0);\n    let i = 0;\n    for (; i < numFrames; i++) {\n      target[i * 2] = left[i + position];\n      target[i * 2 + 1] = right[i + position];\n    }\n    return Math.min(numFrames, left.length - position);\n  }\n}\n\nconst getWebAudioNode = function (context, filter, sourcePositionCallback = noop, bufferSize = 4096) {\n  const node = context.createScriptProcessor(bufferSize, 2, 2);\n  const samples = new Float32Array(bufferSize * 2);\n  node.onaudioprocess = event => {\n    let left = event.outputBuffer.getChannelData(0);\n    let right = event.outputBuffer.getChannelData(1);\n    let framesExtracted = filter.extract(samples, bufferSize);\n    sourcePositionCallback(filter.sourcePosition);\n    if (framesExtracted === 0) {\n      filter.onEnd();\n    }\n    let i = 0;\n    for (; i < framesExtracted; i++) {\n      left[i] = samples[i * 2];\n      right[i] = samples[i * 2 + 1];\n    }\n  };\n  return node;\n};\n\nconst pad = function (n, width, z) {\n  z = z || '0';\n  n = n + '';\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n};\nconst minsSecs = function (secs) {\n  const mins = Math.floor(secs / 60);\n  const seconds = secs - mins * 60;\n  return `${mins}:${pad(parseInt(seconds), 2)}`;\n};\n\nconst onUpdate = function (sourcePosition) {\n  const currentTimePlayed = this.timePlayed;\n  const sampleRate = this.sampleRate;\n  this.sourcePosition = sourcePosition;\n  this.timePlayed = sourcePosition / sampleRate;\n  if (currentTimePlayed !== this.timePlayed) {\n    const timePlayed = new CustomEvent('play', {\n      detail: {\n        timePlayed: this.timePlayed,\n        formattedTimePlayed: this.formattedTimePlayed,\n        percentagePlayed: this.percentagePlayed\n      }\n    });\n    this._node.dispatchEvent(timePlayed);\n  }\n};\nclass PitchShifter {\n  constructor(context, buffer, bufferSize, onEnd = noop) {\n    this._soundtouch = new SoundTouch();\n    const source = new WebAudioBufferSource(buffer);\n    this.timePlayed = 0;\n    this.sourcePosition = 0;\n    this._filter = new SimpleFilter(source, this._soundtouch, onEnd);\n    this._node = getWebAudioNode(context, this._filter, sourcePostion => onUpdate.call(this, sourcePostion), bufferSize);\n    this.tempo = 1;\n    this.rate = 1;\n    this.duration = buffer.duration;\n    this.sampleRate = context.sampleRate;\n    this.listeners = [];\n  }\n  get formattedDuration() {\n    return minsSecs(this.duration);\n  }\n  get formattedTimePlayed() {\n    return minsSecs(this.timePlayed);\n  }\n  get percentagePlayed() {\n    return 100 * this._filter.sourcePosition / (this.duration * this.sampleRate);\n  }\n  set percentagePlayed(perc) {\n    this._filter.sourcePosition = parseInt(perc * this.duration * this.sampleRate);\n    this.sourcePosition = this._filter.sourcePosition;\n    this.timePlayed = this.sourcePosition / this.sampleRate;\n  }\n  get node() {\n    return this._node;\n  }\n  set pitch(pitch) {\n    this._soundtouch.pitch = pitch;\n  }\n  set pitchSemitones(semitone) {\n    this._soundtouch.pitchSemitones = semitone;\n  }\n  set rate(rate) {\n    this._soundtouch.rate = rate;\n  }\n  set tempo(tempo) {\n    this._soundtouch.tempo = tempo;\n  }\n  connect(toNode) {\n    this._node.connect(toNode);\n  }\n  disconnect() {\n    this._node.disconnect();\n  }\n  on(eventName, cb) {\n    this.listeners.push({\n      name: eventName,\n      cb: cb\n    });\n    this._node.addEventListener(eventName, event => cb(event.detail));\n  }\n  off(eventName = null) {\n    let listeners = this.listeners;\n    if (eventName) {\n      listeners = listeners.filter(e => e.name === eventName);\n    }\n    listeners.forEach(e => {\n      this._node.removeEventListener(e.name, event => e.cb(event.detail));\n    });\n  }\n}\n\nexport { AbstractFifoSamplePipe, PitchShifter, RateTransposer, SimpleFilter, SoundTouch, Stretch, WebAudioBufferSource, getWebAudioNode };\n//# sourceMappingURL=soundtouch.js.map\n","import SoundtouchWorkletMessage from \"../../model/SoundtouchWorkletMessage\";\nimport { SoundtouchWorkletOptionsWrapper } from \"../../model/SoundtouchWorkletOptionsWrapper\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet soundtouchWrapperFilterWorkletNodeClass: any;\n\nif(typeof(window) !== \"undefined\" && typeof(window.AudioWorkletNode) !== \"undefined\") {\n    soundtouchWrapperFilterWorkletNodeClass = class SoundtouchWrapperFilterWorkletNode extends AudioWorkletNode {\n\n        name: string = \"\";\n        private running = false;\n        private _tempo = 1;\n        private _pitch = 1;\n\n        constructor(context: BaseAudioContext, workletName: string, options: SoundtouchWorkletOptionsWrapper) {\n            super(context, workletName, options);\n            this.name = this.constructor.name;\n            this.running = true;\n            this.updateInterval = options.processorOptions.updateInterval;\n        }\n\n        async setup(tempo: number, pitch: number): Promise<void> {\n            return new Promise(resolve => {\n                if(this.port) {\n                    this.port.onmessage = (ev: MessageEvent<SoundtouchWorkletMessage>) => {\n                        if(ev && ev.data && ev.data.status === \"OK\" && ev.data.args[0] === \"setup\") {\n                            this.port.onmessage = this.messageProcessor.bind(this);\n                            resolve();\n                        }\n                    };\n    \n                    this.port.postMessage({ command: \"setup\", args: [tempo, pitch] });\n\n                    this._tempo = tempo;\n                    this._pitch = pitch;\n                }\n            });\n        }\n\n        set updateInterval(value: number) {\n            this.port.postMessage({ command: \"updateInterval\", args: [value] });\n        }\n\n        get node() {\n            return this;\n        }\n\n        set tempo(value: number) {\n            this.port.postMessage({ command: \"setTempo\", args: [value] });\n        }\n\n        set pitch(value: number) {\n            this.port.postMessage({ command: \"setPitch\", args: [value] });\n        }\n\n        get tempo(): number {\n            this.port.postMessage({ command: \"getTempo\", args: [] });\n            return this._tempo;\n        }\n\n        get pitch(): number {\n            this.port.postMessage({ command: \"getPitch\", args: [] });\n            return this._pitch;\n        }\n\n        async stop() {\n            if (!this.running) return;\n\n            this.port.postMessage({ command: \"stop\", args: [] });\n            this.disconnect();\n\n            this.running = false;\n        }\n\n        messageProcessor(e: MessageEvent<SoundtouchWorkletMessage>) {\n            if (e.data.command) {\n                const { command } = e.data;\n                \n                switch (command) {\n                case \"End\":\n                    this.stop();\n                    break;\n                default:\n                    break;\n                }\n\n                if (e.data.status) {\n                    const value = e.data.args[1];\n\n                    switch (e.data.args[0]) {\n                    case \"getTempo\":\n                        this._tempo = value as number;\n                        break;\n                    case \"getPitch\":\n                        this._pitch = value as number;\n                        break;\n                    default:\n                        break;\n                    }\n                    return;\n                }\n            }\n        }\n    };\n}\n\nexport default soundtouchWrapperFilterWorkletNodeClass;\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n//@ts-ignore\nimport { PitchShifter } from \"soundtouchjs\";\nimport Constants from \"../model/Constants\";\nimport AbstractAudioFilterWorklet from \"./interfaces/AbstractAudioFilterWorklet\";\nimport AudioFilterEntrypointInterface from \"./interfaces/AudioFilterEntrypointInterface\";\nimport { AudioFilterNodes } from \"../model/AudioNodes\";\nimport utils from \"../utils/Functions\";\nimport SoundtouchWrapperFilterWorkletNode from \"./worklets/SoundtouchWrapperFilterWorkletNode\";\nimport SimpleAudioWorkletProcessor from \"../workletPolyfill/SimpleAudioWorkletProcessor\";\nimport SoundtouchSettings from \"../model/filtersSettings/SoundtouchSettings\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\nimport utilFunctions from \"../utils/Functions\";\n\nexport default class SoundtouchWrapperFilter extends AbstractAudioFilterWorklet<void> implements AudioFilterEntrypointInterface {\n\n    private speedAudio = 1;\n    private frequencyAudio = 1;\n    private currentSpeedAudio = 1;\n    private currentPitchShifterWorklet: typeof SoundtouchWrapperFilterWorkletNode;\n    private currentPitchShifter: PitchShifter;\n    private isOfflineMode = false;\n\n    constructor() {\n        super();\n        this.enable();\n        this.setDefaultEnabled(true);\n    }\n\n    async initializeWorklet(): Promise<void> {\n        // Do nothing\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    receiveEvent(message: MessageEvent<void>): void {\n        // Do nothing\n    }\n\n    get workletPath(): string {\n        return Constants.WORKLET_PATHS.SOUNDTOUCH;\n    }\n\n    constructAudioWorkletProcessor(): SimpleAudioWorkletProcessor {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    get workletName(): string {\n        return Constants.WORKLET_NAMES.SOUNDTOUCH;\n    }\n\n    async getEntrypointNode(context: BaseAudioContext, buffer: AudioBuffer, offline: boolean): Promise<AudioFilterNodes> {\n        this.isOfflineMode = offline;\n\n        this.cleanUpOldNodes();\n\n        // In offline (compatibility) mode\n        if (offline) {\n            // If the settings are untouched, we don't use Soundtouch\n            if (!this.isEnabled() || (this.speedAudio == 1 && this.frequencyAudio == 1)) {\n                // Just return an audio buffer source node\n                const bufferSource = context.createBufferSource();\n                bufferSource.buffer = buffer;\n                bufferSource.start();\n\n                return {\n                    input: bufferSource,\n                    output: bufferSource\n                };\n            } else {\n                // If audio worklet is enabled for soundtouch, and if the speed of audio is untouched\n                // Soundtouch Audio Worklet don't support speed editing yet\n                if (this.isAudioWorkletEnabled() && utils.isAudioWorkletCompatible(context) && this.speedAudio == 1) {\n                    return this.renderWithWorklet(buffer, context);\n                } else {\n                    return this.renderWithScriptProcessorNode(buffer, context);\n                }\n            }\n        }\n\n        // Not in offline mode: get classic soundtouch script processor node\n        this.currentPitchShifter = this.getSoundtouchScriptProcessorNode(buffer, context);\n        this.updateState();\n\n        return {\n            input: this.currentPitchShifter,\n            output: this.currentPitchShifter\n        };\n    }\n\n    /** Cleanup old nodes (worklets, pitch shifter) */\n    private cleanUpOldNodes() {\n        // Stop current worklet\n        if (this.currentPitchShifterWorklet) {\n            this.currentPitchShifterWorklet.stop();\n            this.currentPitchShifterWorklet.disconnect();\n        }\n\n        if (this.currentPitchShifter) {\n            this.currentPitchShifter.disconnect();\n            this.currentPitchShifter._filter = null;\n        }\n    }\n\n    private getSoundtouchScriptProcessorNode(buffer: AudioBuffer, context: BaseAudioContext): AudioNode {\n        return new PitchShifter(context, buffer, Constants.SOUNDTOUCH_PITCH_SHIFTER_BUFFER_SIZE);\n    }\n\n    /**\n     * Use script processor node (deprecated) to render the audio buffer with Soundtouch, according to the current settings.\n     * Not working on Firefox\n     * @param buffer Audio buffer\n     * @param context Audio context\n     * @returns A promise resolving to audio nodes with the rendered audio as a buffer source\n     */\n    private async renderWithScriptProcessorNode(buffer: AudioBuffer, context: BaseAudioContext): Promise<AudioFilterNodes> {\n        const durationAudio = utils.calcAudioDuration(buffer, this.speedAudio);\n        const offlineContext = new OfflineAudioContext(2, context.sampleRate * durationAudio, context.sampleRate);\n\n        this.currentPitchShifter = this.getSoundtouchScriptProcessorNode(buffer, offlineContext);\n        this.updateState();\n\n        this.currentPitchShifter.connect(offlineContext.destination);\n\n        const renderedBuffer = await offlineContext.startRendering();\n\n        const bufferSourceRendered = context.createBufferSource();\n        bufferSourceRendered.buffer = renderedBuffer;\n        bufferSourceRendered.start();\n\n        this.cleanUpOldNodes();\n\n        return {\n            input: bufferSourceRendered,\n            output: bufferSourceRendered\n        };\n    }\n\n    /**\n     * EXPERIMENTAL - Use audio worklet to render the audio buffer with Soundtouch, according to the current settings.\n     * Working in Firefox and Chrome\n     * @param buffer Audio buffer\n     * @param context Audio context\n     * @returns A promise resolving to audio nodes with the rendered audio as a buffer source\n     */\n    private async renderWithWorklet(buffer: AudioBuffer, context: BaseAudioContext): Promise<AudioFilterNodes> {\n        const durationAudio = utils.calcAudioDuration(buffer, this.speedAudio);\n\n        try {\n            // Setup worklet JS module\n            await context.audioWorklet.addModule((this.configService ? this.configService.getWorkletBasePath() : \"\") + Constants.WORKLET_PATHS.SOUNDTOUCH);\n\n            // Setup an audio buffer source from the audio buffer\n            const bufferSource = context.createBufferSource();\n            bufferSource.buffer = buffer;\n            bufferSource.start();\n\n            // Create the worklet node\n            this.currentPitchShifterWorklet = new SoundtouchWrapperFilterWorkletNode(context, \"soundtouch-worklet\", {\n                processorOptions: {\n                    bypass: false,\n                    recording: false,\n                    nInputFrames: this.approximateNInputFrames(durationAudio, context),\n                    updateInterval: 10.0,\n                    sampleRate: buffer.sampleRate\n                },\n            });\n\n            // Connect the node for correct rendering\n            bufferSource.connect(this.currentPitchShifterWorklet.node);\n\n            // Setup pitch/speed of Soundtouch\n            if (this.isEnabled()) {\n                await this.currentPitchShifterWorklet.setup(this.speedAudio, this.frequencyAudio);\n            } else {\n                await this.currentPitchShifterWorklet.setup(1, 1);\n            }\n\n            return {\n                input: this.currentPitchShifterWorklet,\n                output: this.currentPitchShifterWorklet\n            };\n        } catch (e) {\n            // Fallback to script processor node\n            console.error(e);\n            return this.renderWithScriptProcessorNode(buffer, context);\n        }\n    }\n\n    private approximateNInputFrames(durationAudio: number, context: BaseAudioContext) {\n        // {frequencyAudio, multiplicator}: {{0.1, 10}, {0.2, 5}, {0.3, 3.33}, {0.4, 2.5}, {0.5, 2}, {0.6, 1.67}, {0.7, 1.43}, {0.8, 1.25}, {0.9, 1.11}, {1, 1}}\n        return durationAudio * context.sampleRate * (Math.round(14 * Math.exp(-4 * this.frequencyAudio)) + 1);\n    }\n\n    get order(): number {\n        return 2;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.SOUNDTOUCH;\n    }\n\n    getSettings(): SoundtouchSettings {\n        return {\n            speedAudio: this.speedAudio,\n            frequencyAudio: this.frequencyAudio\n        };\n    }\n\n    protected isAudioWorkletEnabled() {\n        if (this.configService) {\n            return this.configService.isSoundtouchAudioWorkletEnabled();\n        }\n\n        return Constants.ENABLE_SOUNDTOUCH_AUDIO_WORKLET;\n    }\n\n    private getCurrentPitchShifter() {\n        if (this.isOfflineMode) {\n            // If the settings are untouched, we don't use Soundtouch\n            if (this.speedAudio == 1 && this.frequencyAudio == 1) {\n                return null;\n            } else {\n                if (this.isAudioWorkletEnabled() && this.currentPitchShifterWorklet && this.speedAudio == 1) {\n                    return this.currentPitchShifterWorklet;\n                } else {\n                    return this.currentPitchShifter;\n                }\n            }\n        }\n\n        return this.currentPitchShifter;\n    }\n\n    updateState(): void {\n        const pitchShifter = this.getCurrentPitchShifter();\n\n        if (!this.isEnabled()) {\n            if (pitchShifter) {\n                pitchShifter.pitch = 1;\n                pitchShifter.tempo = 1;\n            }\n\n            this.currentSpeedAudio = 1;\n        } else {\n            if (pitchShifter) {\n                pitchShifter.pitch = this.frequencyAudio;\n                pitchShifter.tempo = this.speedAudio;\n            }\n\n            this.currentSpeedAudio = this.speedAudio;\n        }\n    }\n\n    async setSetting(settingId: string, value: FilterSettingValue) {\n        if (!utilFunctions.isSettingValueValid(value)) {\n            return;\n        }\n\n        const valueFloat = parseFloat(value as string);\n\n        switch (settingId) {\n        case \"speedAudio\":\n            this.speedAudio = valueFloat;\n            break;\n        case \"frequencyAudio\":\n            this.frequencyAudio = valueFloat;\n            break;\n        default:\n            break;\n        }\n\n        this.updateState();\n    }\n\n    setEnabled(state: boolean): void {\n        super.setEnabled(state);\n        this.updateState();\n    }\n\n    getSpeed(): number {\n        return this.currentSpeedAudio;\n    }\n}\n","import AbstractAudioFilter from \"./interfaces/AbstractAudioFilter\";\nimport Constants from \"../model/Constants\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\n\nexport default class BitCrusherFilter extends AbstractAudioFilter {\n\n    getNode(context: BaseAudioContext) {\n        const lpf1 = context.createBiquadFilter();\n        lpf1.type = \"lowpass\";\n        lpf1.frequency.value = 2000.0;\n        const lpf2 = context.createBiquadFilter();\n        lpf2.type = \"lowpass\";\n        lpf2.frequency.value = 2000.0;\n        const hpf1 = context.createBiquadFilter();\n        hpf1.type = \"highpass\";\n        hpf1.frequency.value = 500.0;\n        const hpf2 = context.createBiquadFilter();\n        hpf2.type = \"highpass\";\n        hpf2.frequency.value = 500.0;\n        lpf1.connect(lpf2);\n        lpf2.connect(hpf1);\n        hpf1.connect(hpf2);\n    \n        return {\n            input: lpf1,\n            output: hpf2\n        };\n    }\n    \n    get order(): number {\n        return 7;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.TELEPHONIZER;\n    }\n\n    getSettings() {\n        return {};\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async setSetting(settingId: string, value: FilterSettingValue) { }\n}\n","/*\n * Copyright (c) 2012 The Chromium Authors. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *    * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *    * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *    * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/*\n * Copyright (C) 2023 Eliastik (eliastiksofts.com)\n *\n * This file is part of \"Simple Voice Changer\".\n *\n * \"Simple Voice Changer\" is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * \"Simple Voice Changer\" is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with \"Simple Voice Changer\".  If not, see <http://www.gnu.org/licenses/>.\n */\ninterface VocoderBand {\n    frequency: number;\n}\n\nexport default class Vocoder {\n\n    private FILTER_QUALITY = 6;  // The Q value for the carrier and modulator filters\n    private FOURIER_SIZE = 4096;\n    private WAVETABLEBOOST = 40.0;\n    private SAWTOOTHBOOST = 0.40;\n    private oscillatorType = 4;   // CUSTOM\n    private oscillatorDetuneValue = 0;\n\n    private audioContext: BaseAudioContext | null = null;\n    private modulatorBuffer: AudioBuffer | undefined;\n    private carrierBuffer: AudioBuffer | null = null;\n    private modulatorNode: AudioBufferSourceNode | null = null;\n    private vocoding = false;\n\n    // These are \"placeholder\" gain nodes - because the modulator and carrier will get swapped in\n    // as they are loaded, it's easier to connect these nodes to all the bands, and the \"real\"\n    // modulator & carrier AudioBufferSourceNodes connect to these.\n    private modulatorInput: GainNode | null = null;\n    private carrierInput: GainNode | null = null;\n\n    private modulatorGain: GainNode | null = null;\n    private modulatorGainValue = 1.0;\n\n    // noise node added to the carrier signal\n    private noiseBuffer: AudioBuffer | null = null;\n    private noiseNode: AudioBufferSourceNode | null = null;\n    private noiseGain: GainNode | null = null;\n    private noiseGainValue = 0.2;\n\n    // Carrier sample gain\n    private carrierSampleNode: AudioBufferSourceNode | null = null;\n    private carrierSampleGain: GainNode | null = null;\n    private carrierSampleGainValue = 0.0;\n\n    // Carrier Synth oscillator stuff\n    private oscillatorNode: OscillatorNode | null = null;\n    private oscillatorGain: GainNode | null = null;\n    private oscillatorGainValue = 1.0;\n    private wavetable: PeriodicWave | null = null;\n    private wavetableSignalGain: GainNode | null = null;\n\n    // These are the arrays of nodes - the \"columns\" across the frequency band \"rows\"\n    private modFilterBands: BiquadFilterNode[] | null = null;    // tuned bandpass filters\n    private modFilterPostGains: GainNode[] | null = null;  // post-filter gains.\n    private heterodynes: GainNode[] | null = null;   // gain nodes used to multiply bandpass X sine\n    private powers: number[] | null = null;      // gain nodes used to multiply prev out by itself\n    private lpFilters: BiquadFilterNode[] | null = null;   // tuned LP filters to remove doubled copy of product\n    private lpFilterPostGains: GainNode[] | null = null;   // gain nodes for tuning input to waveshapers\n    private carrierBands: BiquadFilterNode[] | null = null;  // tuned bandpass filters, same as modFilterBands but in carrier chain\n    private carrierFilterPostGains: GainNode[] | null = null;  // post-bandpass gain adjustment\n    private carrierBandGains: GainNode[] | null = null;  // these are the \"control gains\" driven by the lpFilters\n\n    private vocoderBands: VocoderBand[] | null = null;\n    private numVocoderBands: number = 0;\n\n    private hpFilterGain: GainNode | null = null;\n    private outputGain: GainNode | null = null;\n\n    // Initialization function for the page.\n    constructor(ctx: BaseAudioContext, carrierB: AudioBuffer, modulatorB?: AudioBuffer) {\n        this.audioContext = ctx;\n        this.carrierBuffer = carrierB;\n        this.modulatorBuffer = modulatorB;\n    }\n\n    init() {\n        this.generateVocoderBands(55, 7040, 28);\n        // Set up the vocoder chains\n        this.setupVocoderGraph();\n        this.vocode();\n    }\n\n    getNodes() {\n        return {\n            modulatorNode: this.modulatorNode,\n            modulatorGain: this.modulatorGain,\n            synthLevel: this.oscillatorGain,\n            noiseNode: this.noiseGain,\n            oscillatorNode: this.oscillatorNode,\n            hpFilterGain: this.hpFilterGain,\n            outputGain: this.outputGain\n        };\n    }\n\n    private shutOffCarrier() {\n        if (this.oscillatorNode && this.noiseNode && this.carrierSampleNode) {\n            this.oscillatorNode.stop(0);\n            this.oscillatorNode = null;\n            this.noiseNode.stop(0);\n            this.noiseNode = null;\n            this.carrierSampleNode.stop(0);\n            this.carrierSampleNode = null;\n        }\n    }\n\n    selectSawtooth() {\n        if (this.wavetableSignalGain)\n            this.wavetableSignalGain.gain.value = this.SAWTOOTHBOOST;\n        if (this.oscillatorNode)\n            this.oscillatorNode.type = \"sawtooth\";\n    }\n\n    selectWavetable() {\n        if (this.wavetableSignalGain)\n            this.wavetableSignalGain.gain.value = this.WAVETABLEBOOST;\n        if (this.oscillatorNode && this.wavetable)\n            this.oscillatorNode.setPeriodicWave(this.wavetable);\n        if (this.wavetableSignalGain)\n            this.wavetableSignalGain.gain.value = this.WAVETABLEBOOST;\n    }\n\n    updateModGain(value: number) {\n        this.modulatorGainValue = value;\n        if (this.modulatorGain)\n            this.modulatorGain.gain.value = value;\n    }\n\n    // sample-based carrier\n    updateSampleLevel(value: number) {\n        this.carrierSampleGainValue = value;\n        if (this.carrierSampleGain)\n            this.carrierSampleGain.gain.value = value;\n    }\n\n    // noise in carrier\n    updateSynthLevel(value: number) {\n        this.oscillatorGainValue = value;\n        if (this.oscillatorGain)\n            this.oscillatorGain.gain.value = value;\n    }\n\n    // noise in carrier\n    updateNoiseLevel(value: number) {\n        this.noiseGainValue = value;\n        if (this.noiseGain)\n            this.noiseGain.gain.value = value;\n    }\n\n    updateDetuneValue(value: number) {\n        this.oscillatorDetuneValue = value;\n        if (this.oscillatorNode)\n            this.oscillatorNode.detune.value = value;\n    }\n\n    // this will algorithmically re-calculate vocoder bands, distributing evenly\n    // from startFreq to endFreq, splitting evenly (logarhythmically) into a given numBands.\n    // The function places this info into the global vocoderBands and numVocoderBands letiables.\n    private generateVocoderBands(startFreq: number, endFreq: number, numBands: number) {\n        // Remember: 1200 cents in octave, 100 cents per semitone\n\n        const totalRangeInCents = 1200 * Math.log(endFreq / startFreq) / Math.LN2;\n        const centsPerBand = totalRangeInCents / numBands;\n        const scale = Math.pow(2, centsPerBand / 1200);  // This is the scaling for successive bands\n\n        this.vocoderBands = [];\n        let currentFreq = startFreq;\n\n        for (let i = 0; i < numBands; i++) {\n            this.vocoderBands[i] = { frequency: currentFreq };\n            //console.log( \"Band \" + i + \" centered at \" + currentFreq + \"Hz\" );\n            currentFreq = currentFreq * scale;\n        }\n\n        this.numVocoderBands = numBands;\n    }\n\n    private loadNoiseBuffer() {  // create a 5-second buffer of noise\n        if (!this.audioContext) return;\n\n        const lengthInSamples = 5 * this.audioContext.sampleRate;\n        this.noiseBuffer = this.audioContext.createBuffer(1, lengthInSamples, this.audioContext.sampleRate);\n        const bufferData = this.noiseBuffer.getChannelData(0);\n\n        for (let i = 0; i < lengthInSamples; ++i) {\n            bufferData[i] = (2 * Math.random() - 1);  // -1 to +1\n        }\n    }\n\n    private initBandpassFilters() {\n        if (!this.audioContext) return;\n\n        // When this function is called, the carrierNode and modulatorAnalyser\n        // may not already be created.  Create placeholder nodes for them.\n        this.modulatorInput = this.audioContext.createGain();\n        this.carrierInput = this.audioContext.createGain();\n\n        if (this.modFilterBands == null)\n            this.modFilterBands = [];\n\n        if (this.modFilterPostGains == null)\n            this.modFilterPostGains = [];\n\n        if (this.heterodynes == null)\n            this.heterodynes = [];\n\n        if (this.powers == null)\n            this.powers = [];\n\n        if (this.lpFilters == null)\n            this.lpFilters = [];\n\n        if (this.lpFilterPostGains == null)\n            this.lpFilterPostGains = [];\n\n        if (this.carrierBands == null)\n            this.carrierBands = [];\n\n        if (this.carrierFilterPostGains == null)\n            this.carrierFilterPostGains = [];\n\n        if (this.carrierBandGains == null)\n            this.carrierBandGains = [];\n\n        const waveShaperCurve = new Float32Array(65536);\n        // Populate with a \"curve\" that does an abs()\n        const n = 65536;\n        const n2 = n / 2;\n        let x;\n\n        for (let i = 0; i < n2; ++i) {\n            x = i / n2;\n\n            waveShaperCurve[n2 + i] = x;\n            waveShaperCurve[n2 - i - 1] = x;\n        }\n\n        // Set up a high-pass filter to add back in the fricatives, etc.\n        // (this isn't used by default in the \"production\" version, as I hid the slider)\n        const hpFilter = this.audioContext.createBiquadFilter();\n        hpFilter.type = \"highpass\";\n        hpFilter.frequency.value = 8000; // or use vocoderBands[numVocoderBands-1].frequency;\n        hpFilter.Q.value = 1; //  no peaking\n        this.modulatorInput.connect(hpFilter);\n\n        this.hpFilterGain = this.audioContext.createGain();\n        this.hpFilterGain.gain.value = 0.0;\n\n        hpFilter.connect(this.hpFilterGain);\n\n        if(this.modulatorBuffer) {\n            this.hpFilterGain.connect(this.audioContext.destination);\n        }\n\n        //clear the arrays\n        this.modFilterBands.length = 0;\n        this.modFilterPostGains.length = 0;\n        this.heterodynes.length = 0;\n        this.powers.length = 0;\n        this.lpFilters.length = 0;\n        this.lpFilterPostGains.length = 0;\n        this.carrierBands.length = 0;\n        this.carrierFilterPostGains.length = 0;\n        this.carrierBandGains.length = 0;\n\n        this.outputGain = this.audioContext.createGain();\n\n        if(this.modulatorBuffer) {\n            this.outputGain.connect(this.audioContext.destination);\n        }\n\n        const rectifierCurve = new Float32Array(65536);\n        for (let i = -32768; i < 32768; i++)\n            rectifierCurve[i + 32768] = ((i > 0) ? i : -i) / 32768;\n\n        for (let i = 0; i < this.numVocoderBands; i++) {\n            // CREATE THE MODULATOR CHAIN\n            // create the bandpass filter in the modulator chain\n            const modulatorFilter = this.audioContext.createBiquadFilter();\n            modulatorFilter.type = \"bandpass\";  // Bandpass filter\n            if (this.vocoderBands)\n                modulatorFilter.frequency.value = this.vocoderBands[i].frequency;\n            modulatorFilter.Q.value = this.FILTER_QUALITY; //  initial quality\n            this.modulatorInput.connect(modulatorFilter);\n            this.modFilterBands.push(modulatorFilter);\n\n            // Now, create a second bandpass filter tuned to the same frequency -\n            // this turns our second-order filter into a 4th-order filter,\n            // which has a steeper rolloff/octave\n            const secondModulatorFilter = this.audioContext.createBiquadFilter();\n            secondModulatorFilter.type = \"bandpass\";  // Bandpass filter\n            if (this.vocoderBands)\n                secondModulatorFilter.frequency.value = this.vocoderBands[i].frequency;\n            secondModulatorFilter.Q.value = this.FILTER_QUALITY; //  initial quality\n            //modulatorFilter.chainedFilter = secondModulatorFilter;\n            modulatorFilter.connect(secondModulatorFilter);\n\n            // create a post-filtering gain to bump the levels up.\n            const modulatorFilterPostGain = this.audioContext.createGain();\n            modulatorFilterPostGain.gain.value = 6;\n            secondModulatorFilter.connect(modulatorFilterPostGain);\n            this.modFilterPostGains.push(modulatorFilterPostGain);\n\n            // Create the sine oscillator for the heterodyne\n            const heterodyneOscillator = this.audioContext.createOscillator();\n            if (this.vocoderBands)\n                heterodyneOscillator.frequency.value = this.vocoderBands[i].frequency;\n\n            heterodyneOscillator.start(0);\n\n            // Create the node to multiply the sine by the modulator\n            const heterodyne = this.audioContext.createGain();\n            modulatorFilterPostGain.connect(heterodyne);\n            heterodyne.gain.value = 0.0;  // audio-rate inputs are summed with initial intrinsic value\n            heterodyneOscillator.connect(heterodyne.gain);\n\n            const heterodynePostGain = this.audioContext.createGain();\n            heterodynePostGain.gain.value = 2.0;    // GUESS:  boost\n            heterodyne.connect(heterodynePostGain);\n            this.heterodynes.push(heterodynePostGain);\n\n\n            // Create the rectifier node\n            const rectifier = this.audioContext.createWaveShaper();\n            rectifier.curve = rectifierCurve;\n            heterodynePostGain.connect(rectifier);\n\n            // Create the lowpass filter to mask off the difference (near zero)\n            const lpFilter = this.audioContext.createBiquadFilter();\n            lpFilter.type = \"lowpass\";  // Lowpass filter\n            lpFilter.frequency.value = 5.0; // Guesstimate!  Mask off 20Hz and above.\n            lpFilter.Q.value = 1; // don't need a peak\n            this.lpFilters.push(lpFilter);\n            rectifier.connect(lpFilter);\n\n            const lpFilterPostGain = this.audioContext.createGain();\n            lpFilterPostGain.gain.value = 1.0;\n            lpFilter.connect(lpFilterPostGain);\n            this.lpFilterPostGains.push(lpFilterPostGain);\n\n            const waveshaper = this.audioContext.createWaveShaper();\n            waveshaper.curve = waveShaperCurve;\n            lpFilterPostGain.connect(waveshaper);\n\n\n            // Create the bandpass filter in the carrier chain\n            const carrierFilter = this.audioContext.createBiquadFilter();\n            carrierFilter.type = \"bandpass\";\n            if (this.vocoderBands)\n                carrierFilter.frequency.value = this.vocoderBands[i].frequency;\n            carrierFilter.Q.value = this.FILTER_QUALITY;\n            this.carrierBands.push(carrierFilter);\n            this.carrierInput.connect(carrierFilter);\n\n            // We want our carrier filters to be 4th-order filter too.\n            const secondCarrierFilter = this.audioContext.createBiquadFilter();\n            secondCarrierFilter.type = \"bandpass\";  // Bandpass filter\n            if (this.vocoderBands)\n                secondCarrierFilter.frequency.value = this.vocoderBands[i].frequency;\n            secondCarrierFilter.Q.value = this.FILTER_QUALITY; //  initial quality\n            //carrierFilter.chainedFilter = secondCarrierFilter;\n            carrierFilter.connect(secondCarrierFilter);\n\n            const carrierFilterPostGain = this.audioContext.createGain();\n            carrierFilterPostGain.gain.value = 10.0;\n            secondCarrierFilter.connect(carrierFilterPostGain);\n            this.carrierFilterPostGains.push(carrierFilterPostGain);\n\n            // Create the carrier band gain node\n            const bandGain = this.audioContext.createGain();\n            this.carrierBandGains.push(bandGain);\n            carrierFilterPostGain.connect(bandGain);\n            bandGain.gain.value = 0.0;  // audio-rate inputs are summed with initial intrinsic value\n            waveshaper.connect(bandGain.gain);  // connect the lp controller\n\n            bandGain.connect(this.outputGain);\n        }\n\n\n        // Now set up our wavetable stuff.\n        const real = new Float32Array(this.FOURIER_SIZE);\n        const imag = new Float32Array(this.FOURIER_SIZE);\n        real[0] = 0.0;\n        imag[0] = 0.0;\n        for (let i = 1; i < this.FOURIER_SIZE; i++) {\n            real[i] = 1.0;\n            imag[i] = 1.0;\n        }\n\n        this.wavetable = this.audioContext.createPeriodicWave(real, imag);\n        this.loadNoiseBuffer();\n    }\n\n    private setupVocoderGraph() {\n        this.initBandpassFilters();\n    }\n\n    private createCarriersAndPlay(output: GainNode | null) {\n        if(!this.audioContext || !output) return;\n\n        this.carrierSampleNode = this.audioContext.createBufferSource();\n        this.carrierSampleNode.buffer = this.carrierBuffer;\n        this.carrierSampleNode.loop = true;\n\n        this.carrierSampleGain = this.audioContext.createGain();\n        this.carrierSampleGain.gain.value = this.carrierSampleGainValue;\n        this.carrierSampleNode.connect(this.carrierSampleGain);\n        this.carrierSampleGain.connect(output);\n\n        // The wavetable signal needs a boost.\n        this.wavetableSignalGain = this.audioContext.createGain();\n\n        this.oscillatorNode = this.audioContext.createOscillator();\n        if (this.oscillatorType == 4 && this.wavetable) { // wavetable\n            this.oscillatorNode.setPeriodicWave(this.wavetable);\n            this.wavetableSignalGain.gain.value = this.WAVETABLEBOOST;\n        } else {\n            //oscillatorNode.type = oscillatorType;\n            this.wavetableSignalGain.gain.value = this.SAWTOOTHBOOST;\n        }\n        this.oscillatorNode.frequency.value = 110;\n        this.oscillatorNode.detune.value = this.oscillatorDetuneValue;\n        this.oscillatorNode.connect(this.wavetableSignalGain);\n\n        this.oscillatorGain = this.audioContext.createGain();\n        this.oscillatorGain.gain.value = this.oscillatorGainValue;\n\n        this.wavetableSignalGain.connect(this.oscillatorGain);\n        this.oscillatorGain.connect(output);\n\n        this.noiseNode = this.audioContext.createBufferSource();\n        this.noiseNode.buffer = this.noiseBuffer;\n        this.noiseNode.loop = true;\n        this.noiseGain = this.audioContext.createGain();\n        this.noiseGain.gain.value = this.noiseGainValue;\n        this.noiseNode.connect(this.noiseGain);\n\n        this.noiseGain.connect(output);\n        this.oscillatorNode.start(0);\n        this.noiseNode.start(0);\n        this.carrierSampleNode.start(0);\n\n    }\n\n    private vocode() {\n        if(!this.audioContext) return;\n\n        if (this.vocoding) {\n            if (this.modulatorNode) {\n                this.modulatorNode.stop(0);\n            }\n            this.shutOffCarrier();\n            this.vocoding = false;\n            return;\n        }\n\n        this.createCarriersAndPlay(this.carrierInput);\n\n        this.vocoding = true;\n\n        this.modulatorGain = this.audioContext.createGain();\n        this.modulatorGain.gain.value = this.modulatorGainValue;\n\n        if(this.modulatorBuffer) {\n            this.modulatorNode = this.audioContext.createBufferSource();\n            this.modulatorNode.buffer = this.modulatorBuffer;\n            this.modulatorNode.connect(this.modulatorGain);\n            this.modulatorNode.start(0);\n        }\n\n        if (this.modulatorInput)\n            this.modulatorGain.connect(this.modulatorInput);\n    }\n}\n","import AbstractAudioFilter from \"./interfaces/AbstractAudioFilter\";\nimport { AudioFilterNodes } from \"../model/AudioNodes\";\nimport Constants from \"../model/Constants\";\nimport Vocoder from \"../utils/Vocoder\";\nimport VocoderSettings from \"../model/filtersSettings/VocoderSettings\";\nimport utilFunctions from \"../utils/Functions\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\n\nexport default class VocoderFilter extends AbstractAudioFilter {\n\n    private currentVocoder: Vocoder | null = null;\n    private modulatorGainValue = 1.0;\n    private carrierSampleGainValue = 0;\n    private oscillatorGainValue = 1.0;\n    private noiseGainValue = 0.2;\n    private oscillatorDetuneValue = 0;\n\n    getNode(context: BaseAudioContext): AudioFilterNodes {\n        const modulatorBuffer = this.bufferFetcherService?.getAudioBuffer(Constants.VOCODER_MODULATOR);\n\n        this.currentVocoder = new Vocoder(context, modulatorBuffer!);\n        this.currentVocoder.init();\n        this.applyCurrentSettingsToVocoder();\n\n        const { modulatorGain, outputGain } = this.currentVocoder.getNodes();\n\n        return {\n            input: modulatorGain!,\n            output: outputGain!\n        };\n    }\n\n    getSettings(): VocoderSettings {\n        return {\n            modulatorGainValue: this.modulatorGainValue,\n            carrierSampleGainValue: this.carrierSampleGainValue,\n            oscillatorGainValue: this.oscillatorGainValue,\n            noiseGainValue: this.noiseGainValue,\n            oscillatorDetuneValue: this.oscillatorDetuneValue\n        };\n    }\n\n    async setSetting(settingId: string, value: FilterSettingValue) {\n        if(!utilFunctions.isSettingValueValid(value)) {\n            return;\n        }\n        \n        switch (settingId) {\n        case \"modulatorGainValue\":\n            this.modulatorGainValue = parseFloat(value as string);\n            break;\n        case \"carrierSampleGainValue\":\n            this.carrierSampleGainValue = parseFloat(value as string);\n            break;\n        case \"oscillatorGainValue\":\n            this.oscillatorGainValue = parseFloat(value as string);\n            break;\n        case \"noiseGainValue\":\n            this.noiseGainValue = parseFloat(value as string);\n            break;\n        case \"oscillatorDetuneValue\":\n            this.oscillatorDetuneValue = parseFloat(value as string);\n            break;\n        }\n\n        this.applyCurrentSettingsToVocoder();\n    }\n\n    private applyCurrentSettingsToVocoder() {\n        if(this.currentVocoder) {\n            this.currentVocoder.updateModGain(this.modulatorGainValue);\n            this.currentVocoder.updateSampleLevel(this.carrierSampleGainValue);\n            this.currentVocoder.updateSynthLevel(this.oscillatorGainValue);\n            this.currentVocoder.updateNoiseLevel(this.noiseGainValue);\n            this.currentVocoder.updateDetuneValue(this.oscillatorDetuneValue);\n        }\n    }\n    \n    get order(): number {\n        return 1;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.VOCODER;\n    }\n}\n","import Constants from \"../../model/Constants\";\n\nclass PassthroughWorkletProcessor extends AudioWorkletProcessor {\n\n    stopped = false;\n    samplesCount = 0;\n\n    constructor() {\n        super();\n        this.port.onmessage = (event) => {\n            if (event.data == \"stop\") {\n                this.stop();\n            }\n        };\n    }\n\n    static get parameterDescriptors() {\n        return [];\n    }\n\n    get defaultParameterDescriptors() {\n        return PassthroughWorkletProcessor.parameterDescriptors;\n    }\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][]): boolean {\n        if (this.stopped) return false;\n\n        const input = inputs[0];\n        const output = outputs[0];\n\n        if (input && input[0]) {\n            this.samplesCount += input[0].length;\n        }\n\n        if (output) {\n            for(let channel = 0; channel < output.length; channel++) {\n                const inp = input[channel];\n                const out = output[channel];\n\n                if (inp) {\n                    for (let sample = 0; sample < inp.length; sample++) {\n                        out[sample] = inp[sample];\n                    }\n                }\n            }\n\n            this.port.postMessage({ command: \"update\", samplesCount: this.samplesCount });\n        }\n\n        return true;\n    }\n\n    stop() {\n        this.stopped = true;\n    }\n}\n\nregisterProcessor(Constants.WORKLET_NAMES.PASSTHROUGH, PassthroughWorkletProcessor);\n","import AbstractAudioFilterWorklet from \"./interfaces/AbstractAudioFilterWorklet\";\nimport Constants from \"../model/Constants\";\nimport \"./worklets/Passthrough.worklet\";\nimport { FilterSettingValue } from \"../model/filtersSettings/FilterSettings\";\nimport PassThroughWorkletEvent from \"@/model/PassThroughWorkletEvent\";\nimport { EventType } from \"@/model/EventTypeEnum\";\n\nexport default class PassThroughFilter extends AbstractAudioFilterWorklet<PassThroughWorkletEvent> {\n    \n    private _totalSamples = 0;\n    private currentTime = 0;\n    private lastSampleCount = 0;\n    private samplePerSecond = 0;\n    private currentTimeSamplesPerSecond = 0;\n\n    receiveEvent(message: MessageEvent<PassThroughWorkletEvent>): void {\n        const currentTime = performance.now();\n        const samplesProcessed = message.data.samplesCount;\n\n        if (message.data.command === \"update\") {\n            this.calculatePercentageProcessed(currentTime, samplesProcessed);\n        }\n\n        this.calculateRemainingTimeProcessing(currentTime, samplesProcessed);\n    }\n\n    /**\n     * Calculate percentage processed\n     * @param currentTime Current time (ms)\n     * @param samplesProcessed Samples count processed\n     */\n    private calculatePercentageProcessed(currentTime: number, samplesProcessed: number) {\n        if (this.currentTime === 0) {\n            this.currentTime = currentTime;\n        }\n\n        const timeDifference = currentTime - this.currentTime;\n        const percentageProcessed = (samplesProcessed / this._totalSamples);\n\n        if (this.eventEmitter && timeDifference >= Constants.TREATMENT_TIME_COUNTING_THROTTLE_INTERVAL) {\n            this.eventEmitter.emit(EventType.UPDATE_AUDIO_TREATMENT_PERCENT, percentageProcessed * 100);\n            this.currentTime = currentTime;\n        }\n    }\n\n    /**\n     * Calculate remaining time to process the audio\n     * @param currentTime Current time (ms)\n     * @param samplesProcessed Samples count processed\n     */\n    private calculateRemainingTimeProcessing(currentTime: number, samplesProcessed: number) {\n        if (this.currentTimeSamplesPerSecond === 0) {\n            this.currentTimeSamplesPerSecond = currentTime;\n        }\n\n        const timeDifferenceSamplePerSecond = currentTime - this.currentTimeSamplesPerSecond;\n        const remainingSamples = this._totalSamples - samplesProcessed;\n\n        if (this.eventEmitter && remainingSamples <= 0) {\n            this.eventEmitter.emit(EventType.UPDATE_REMAINING_TIME_ESTIMATED, 0);\n            return;\n        }\n\n        if (this.eventEmitter && timeDifferenceSamplePerSecond >= 1000) {\n            this.calculateSmoothedSamplePerSecond(timeDifferenceSamplePerSecond, samplesProcessed);\n\n            const remainingTimeSeconds = remainingSamples / this.samplePerSecond;\n            \n            this.currentTimeSamplesPerSecond = currentTime;\n            this.lastSampleCount = samplesProcessed;\n\n            if (isNaN(remainingTimeSeconds) || !isFinite(remainingTimeSeconds)) {\n                this.eventEmitter.emit(EventType.UPDATE_REMAINING_TIME_ESTIMATED, -1);\n            } else {\n                this.eventEmitter.emit(EventType.UPDATE_REMAINING_TIME_ESTIMATED, remainingTimeSeconds);\n            }\n        }\n    }\n\n    /**\n     * Calculate smoothed samples per second\n     * @param timeDifferenceSamplePerSecond Time difference \n     * @param samplesProcessed Samples count processed\n     * @returns Smoothed samples per second\n     */\n    private calculateSmoothedSamplePerSecond(timeDifferenceSamplePerSecond: number, samplesProcessed: number): void {\n        if (timeDifferenceSamplePerSecond > 0) {\n            const currentSampleRate = (samplesProcessed - this.lastSampleCount) / (timeDifferenceSamplePerSecond / 1000);\n            this.samplePerSecond = (Constants.TREATMENT_TIME_COUNTING_SMOOTHING_FACTOR * currentSampleRate) + ((1 - Constants.TREATMENT_TIME_COUNTING_SMOOTHING_FACTOR) * this.samplePerSecond);\n        }\n    }\n\n    get workletName(): string {\n        return Constants.WORKLET_NAMES.PASSTHROUGH;\n    }\n\n    get workletPath(): string {\n        return Constants.WORKLET_PATHS.PASSTHROUGH;\n    }\n\n    get order(): number {\n        return 10;\n    }\n\n    get id(): string {\n        return Constants.FILTERS_NAMES.PASSTHROUGH;\n    }\n\n    set totalSamples(value: number) {\n        this._totalSamples = value;\n        this.currentTime = 0;\n        this.currentTimeSamplesPerSecond = 0;\n        this.samplePerSecond = 0;\n        this.lastSampleCount = 0;\n    }\n\n    getSettings() {\n        return {};\n    }\n\n    isEnabled(): boolean {\n        return true;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async setSetting(settingId: string, value: FilterSettingValue) {}\n}\n","import AbstractAudioElement from \"@/filters/interfaces/AbstractAudioElement\";\nimport BassBoosterFilter from \"../filters/BassBoosterFilter\";\nimport BitCrusherFilter from \"../filters/BitCrusherFilter\";\nimport EchoFilter from \"../filters/EchoFilter\";\nimport HighPassFilter from \"../filters/HighPassFilter\";\nimport LimiterFilter from \"../filters/LimiterFilter\";\nimport LowPassFilter from \"../filters/LowPassFilter\";\nimport ReturnAudioRenderer from \"../filters/ReturnAudioRenderer\";\nimport ReverbFilter from \"../filters/ReverbFilter\";\nimport SoundtouchWrapperFilter from \"../filters/SountouchWrapperFilter\";\nimport TelephonizerFilter from \"../filters/TelephonizerFilter\";\nimport VocoderFilter from \"../filters/VocoderFilter\";\nimport PassThroughFilter from \"../filters/PassThroughFilter\";\nimport AbstractAudioFilter from \"@/filters/interfaces/AbstractAudioFilter\";\nimport AudioFilterEntrypointInterface from \"@/filters/interfaces/AudioFilterEntrypointInterface\";\nimport AbstractAudioRenderer from \"@/filters/interfaces/AbstractAudioRenderer\";\nimport { AudioFilterNodes } from \"@/model/AudioNodes\";\nimport AbstractAudioFilterWorklet from \"@/filters/interfaces/AbstractAudioFilterWorklet\";\nimport EventEmitter from \"@/utils/EventEmitter\";\nimport BufferPlayer from \"@/BufferPlayer\";\nimport { FilterState } from \"@/model/FilterState\";\nimport { FilterSettings } from \"@/model/filtersSettings/FilterSettings\";\nimport Constants from \"@/model/Constants\";\nimport BufferFetcherService from \"@/services/BufferFetcherService\";\nimport BufferDecoderService from \"@/services/BufferDecoderService\";\nimport { ConfigService } from \"@/services/ConfigService\";\nimport GenericConfigService from \"@/utils/GenericConfigService\";\n\nexport default class FilterManager extends AbstractAudioElement {\n\n    /** A list of filters */\n    private filters: AbstractAudioFilter[] = [];\n    /** A list of renderers */\n    private renderers: AbstractAudioRenderer[] = [];\n    /** The entrypoint filter */\n    private _entryPointFilter: (AbstractAudioFilter & AudioFilterEntrypointInterface) | null = null;\n    /** The current connected nodes */\n    private _currentNodes: AudioFilterNodes | null = null;\n    /** The current event emitter */\n    private eventEmitter: EventEmitter | undefined;\n\n    constructor(eventEmitter: EventEmitter | null, bufferFetcherService: BufferFetcherService, bufferDecoderService: BufferDecoderService, configService: ConfigService) {\n        super();\n        this.eventEmitter = eventEmitter || new EventEmitter();\n        this.configService = configService || new GenericConfigService();\n        this.bufferFetcherService = bufferFetcherService;\n        this.bufferDecoderService = bufferDecoderService;\n\n        this.setupDefaultFilters();\n        this.setupDefaultRenderers();\n    }\n\n    /**\n     * Add a new custom filter for this audio editor\n     * @param filters One or more AbstractAudioFilter\n     */\n    addFilters(...filters: AbstractAudioFilter[]) {\n        for (const filter of filters) {\n            filter.initializeDefaultSettings();\n            filter.bufferFetcherService = this.bufferFetcherService;\n            filter.bufferDecoderService = this.bufferDecoderService;\n            filter.configService = this.configService;\n            filter.eventEmitter = this.eventEmitter;\n        }\n\n        this.filters.push(...filters);\n    }\n\n    /**\n     * Add a new custom renderer for this audio editor\n     * @param renderers One or more AbstractAudioRenderer\n     */\n    addRenderers(...renderers: AbstractAudioRenderer[]) {\n        for (const renderer of renderers) {\n            renderer.bufferFetcherService = this.bufferFetcherService;\n            renderer.bufferDecoderService = this.bufferDecoderService;\n            renderer.configService = this.configService;\n        }\n\n        this.renderers.push(...renderers);\n    }\n\n    /** Setup all audio filters */\n    private setupDefaultFilters() {\n        const bassBooster = new BassBoosterFilter(200, 15, 200, -2);\n        const bitCrusher = new BitCrusherFilter(16, 0.9);\n        const echo = new EchoFilter(0.2, 0.75);\n        const highPass = new HighPassFilter(3500);\n        const lowPass = new LowPassFilter(3500);\n        const reverb = new ReverbFilter();\n        const soundtouchWrapper = new SoundtouchWrapperFilter();\n        const limiterFilter = new LimiterFilter(0, 0, 0, 3, -0.05, 0.1);\n        const telephonizerFilter = new TelephonizerFilter();\n        const vocoder = new VocoderFilter();\n        const passthrough = new PassThroughFilter();\n\n        this._entryPointFilter = soundtouchWrapper;\n        this.addFilters(bassBooster, bitCrusher, echo, highPass, lowPass, reverb, limiterFilter, telephonizerFilter, soundtouchWrapper, vocoder, passthrough);\n    }\n\n    /** Setup the renderers */\n    private setupDefaultRenderers() {\n        const returnAudio = new ReturnAudioRenderer();\n        this.addRenderers(returnAudio);\n    }\n\n    /**\n     * Get enabled/disabled state of all filters/renderers\n     * @returns The filters state (enabled/disabled)\n     */\n    getFiltersState(): FilterState {\n        const state: FilterState = {};\n\n        [...this.filters, ...this.renderers].forEach(filter => {\n            state[filter.id] = filter.isEnabled();\n        });\n\n        return state;\n    }\n\n    /**\n     * Get the settings of all filters/renderers\n     * @returns \n     */\n    getFiltersSettings(): Map<string, FilterSettings> {\n        const settings = new Map<string, FilterSettings>();\n\n        for (const filter of this.filters) {\n            settings.set(filter.id, filter.getSettings());\n        }\n\n        return settings;\n    }\n\n    /**\n     * Toggle enabled/disabled state for a filter/renderer\n     * @param filterId The filter/renderer ID\n     */\n    toggleFilter(filterId: string) {\n        const filter = this.filters.find(f => f.id === filterId);\n        const renderer = this.renderers.find(f => f.id === filterId);\n\n        if (filter) {\n            filter.toggle();\n        }\n\n        if (renderer) {\n            renderer.toggle();\n        }\n    }\n\n    /**\n     * Change a filter/renderer setting\n     * @param filterId Filter ID\n     * @param settings Filter setting (key/value)\n     */\n    async changeFilterSettings(filterId: string, settings: FilterSettings) {\n        const filter = this.filters.find(f => f.id === filterId);\n\n        if (filter) {\n            for (const key of Object.keys(settings)) {\n                await filter.setSetting(key, settings[key]);\n            }\n        }\n    }\n\n    /**\n     * Reset the settings of a filter/renderer\n     * @param filterId Id of the filter/renderer\n     */\n    async resetFilterSettings(filterId: string) {\n        const filter = this.filters.find(f => f.id === filterId);\n\n        if (filter) {\n            await filter.resetSettings();\n        }\n    }\n\n    /**\n     * Reset all filters/renderers state (enabled/disabled) based on their default states\n     */\n    resetAllFiltersState() {\n        [...this.filters, ...this.renderers].forEach(element => {\n            if (element.isDefaultEnabled()) {\n                element.enable();\n            } else {\n                element.disable();\n            }\n        });\n    }\n\n    /**\n     * Connect the Audio API nodes of the enabled filters\n     * @param context The Audio Context\n     * @param buffer  The Audio Buffer\n     * @param keepCurrentInputOutput Keep current first input/output nodes?\n     */\n    async connectNodes(context: BaseAudioContext, buffer: AudioBuffer, keepCurrentInputOutput: boolean, isCompatibilityMode: boolean) {\n        if (!this._entryPointFilter) {\n            return;\n        }\n\n        let entrypointNode: AudioNode | null = null;\n\n        if (keepCurrentInputOutput && this._currentNodes) {\n            entrypointNode = this._currentNodes.input;\n        } else {\n            const entrypointNodes = await this._entryPointFilter.getEntrypointNode(context, buffer, !isCompatibilityMode);\n            entrypointNode = entrypointNodes.input;\n        }\n\n        const intermediateNodes: AudioFilterNodes[] = [];\n        let previousNode: AudioNode | undefined = entrypointNode;\n\n        this.disconnectOldNodes(keepCurrentInputOutput);\n\n        // Sort by filter order, then remove the disabled filter (but always keep the last/output filter)\n        const filters = this.filters\n            .sort((a, b) => a.order - b.order)\n            .filter((filter, index) => filter !== this._entryPointFilter && (filter.isEnabled() || index >= this.filters.length - 1));\n\n        for (const filter of filters) {\n            const node = filter.getNode(context);\n\n            if (previousNode) {\n                previousNode.connect(node.input);\n            }\n\n            previousNode = node.output;\n            intermediateNodes.push(node);\n        }\n\n        if (this._entryPointFilter) {\n            this._entryPointFilter.updateState();\n        }\n\n        this._currentNodes = {\n            input: entrypointNode!,\n            output: previousNode!,\n            intermediateNodes: intermediateNodes\n                .filter(n => n.input != previousNode && n.output != previousNode &&\n                    n.input != entrypointNode && n.output != entrypointNode)\n        };\n    }\n\n    /**\n     * Disconnect old audio nodes\n     * @param keepCurrentOutput Keeps current output nodes?\n     */\n    disconnectOldNodes(keepCurrentOutput: boolean) {\n        if (this._currentNodes) {\n            this._currentNodes.input.disconnect();\n\n            if (!keepCurrentOutput) {\n                this._currentNodes.output.disconnect();\n            }\n\n            if (this._currentNodes.intermediateNodes) {\n                for (const intermediate of this._currentNodes.intermediateNodes) {\n                    intermediate.input.disconnect();\n                    intermediate.output.disconnect();\n                }\n            }\n        }\n    }\n\n    /** Initialize worklets filters */\n    async initializeWorklets(context: BaseAudioContext) {\n        for (const filter of this.filters) {\n            if (filter.isWorklet()) {\n                await (filter as AbstractAudioFilterWorklet<object>).initializeWorklet(context);\n            }\n        }\n    }\n    \n    /**\n     * Execute audio renderers then returns audio buffer rendered\n     * @param buffer The buffer to process\n     * @param outputContext The output context\n     * @returns Audio buffer rendered\n     */\n    async executeAudioRenderers(buffer: AudioBuffer, outputContext: AudioContext | OfflineAudioContext) {\n        let currentBuffer = buffer;\n\n        for (const renderer of this.renderers.sort((a, b) => a.order - b.order)) {\n            if (renderer.isEnabled()) {\n                currentBuffer = await renderer.renderAudio(outputContext, currentBuffer);\n            }\n        }\n        return currentBuffer;\n    }\n\n    setupPlayerSpeed(bufferPlayer: BufferPlayer) {\n        if (this._entryPointFilter) {\n            const speedAudio = this._entryPointFilter.getSpeed();\n            bufferPlayer.speedAudio = speedAudio;\n        }\n    }\n\n    getAddingTime() {\n        let duration = 0;\n        \n        for (const filter of this.filters) {\n            if (filter.isEnabled()) {\n                duration += filter.getAddingTime();\n            }\n        }\n\n        return duration;\n    }\n\n    /**\n     * Setup the passthrough filter to count audio rendering progress\n     * @param durationAudio Audio duration - number\n     */\n    setupPasstroughFilter(durationAudio: number, currentContext: AudioContext | null) {\n        const passthroughFilter = this.filters.find(f => f.id === Constants.FILTERS_NAMES.PASSTHROUGH);\n\n        if (passthroughFilter && currentContext) {\n            (passthroughFilter as PassThroughFilter).totalSamples = durationAudio * currentContext.sampleRate;\n        }\n    }\n\n    get entrypointFilter() {\n        return this._entryPointFilter;\n    }\n\n    get currentNodes() {\n        return this._currentNodes;\n    }\n\n    get order(): number {\n        return -1;\n    }\n\n    get id(): string {\n        return \"FilterManager\";\n    }\n}\n","import { EventType } from \"@/model/EventTypeEnum\";\nimport { ConfigService } from \"@/services/ConfigService\";\nimport AbstractAudioElement from \"@/filters/interfaces/AbstractAudioElement\";\nimport Constants from \"@/model/Constants\";\nimport EventEmitter from \"@/utils/EventEmitter\";\n\nexport default class AudioContextManager extends AbstractAudioElement {\n\n    /** The current event emitter */\n    private eventEmitter: EventEmitter | undefined;\n    /** The current audio context */\n    private _currentContext: AudioContext | null | undefined;\n    /** The old audio context */\n    private oldAudioContext: AudioContext | null | undefined;\n    /** The previous sample rate setting */\n    private previousSampleRate = Constants.DEFAULT_SAMPLE_RATE;\n\n    constructor(context: AudioContext | undefined | null, configService: ConfigService | null, eventEmitter: EventEmitter | null) {\n        super();\n\n        this._currentContext = context;\n        this.eventEmitter = eventEmitter || new EventEmitter();\n        this.configService = configService;\n\n        this.setup();\n    }\n\n    private setup() {\n        if (this.configService) {\n            this.previousSampleRate = this.configService.getSampleRate();\n\n            if (this.eventEmitter) {\n                this.eventEmitter.emit(EventType.SAMPLE_RATE_CHANGED, this.previousSampleRate);\n            }\n        }\n\n        if (!this.currentContext) {\n            this.createNewContext(this.previousSampleRate);\n        }\n    }\n\n    /**\n     * Create new context if needed, for example if sample rate setting have changed\n     * @param principalBuffer The audio buffer\n     * @returns true if a new context was created, false otherwise\n     */\n    createNewContextIfNeeded(principalBuffer: AudioBuffer | null) {\n        const isCompatibilityModeEnabled = this.configService && this.configService.isCompatibilityModeEnabled();\n\n        if (isCompatibilityModeEnabled && principalBuffer) {\n            // If compatibility mode is enabled, we use the sample rate of the input audio buffer\n            if (this.currentSampleRate != principalBuffer.sampleRate) {\n                this.createNewContext(principalBuffer.sampleRate);\n                this.previousSampleRate = principalBuffer.sampleRate;\n\n                return true;\n            }\n        } else {\n            // Otherwise we change the context if the sample rate has changed\n            let currentSampleRate = Constants.DEFAULT_SAMPLE_RATE;\n\n            if (this.configService) {\n                currentSampleRate = this.configService.getSampleRate();\n            }\n\n            // If sample rate setting has changed, create a new audio context\n            if (currentSampleRate != this.previousSampleRate) {\n                this.createNewContext(currentSampleRate);\n                this.previousSampleRate = currentSampleRate;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /** \n     * Stop previous audio context and create a new one\n     * @param sampleRate New sample rate\n     */\n    private createNewContext(sampleRate: number) {\n        if (this._currentContext) {\n            this.oldAudioContext = this._currentContext;\n            this.destroyOldContext();\n        }\n\n        const options: AudioContextOptions = {\n            latencyHint: \"interactive\"\n        };\n\n        if (sampleRate != 0) {\n            options.sampleRate = sampleRate;\n        }\n\n        this._currentContext = new AudioContext(options);\n\n        if (this.eventEmitter) {\n            this.eventEmitter.emit(EventType.SAMPLE_RATE_CHANGED, this.currentSampleRate);\n        }\n    }\n\n    /**\n     * Destroy previous AudioContext\n     */\n    private destroyOldContext() {\n        if (this.oldAudioContext) {\n            this.oldAudioContext.close();\n            this.oldAudioContext = null;\n        }\n    }\n\n    /**\n     * Get the current sample rate used\n     */\n    get currentSampleRate(): number {\n        if (this.currentContext) {\n            return this.currentContext.sampleRate;\n        }\n\n        return 0;\n    }\n\n    get currentContext() {\n        return this._currentContext;\n    }\n\n    get order(): number {\n        return -1;\n    }\n\n    get id(): string {\n        return \"ContextManager\";\n    }\n}\n","export default function getRecorderWorker(workerBasePath?: string): Worker {\n    return new Worker((workerBasePath ? workerBasePath : \"\") + \"RecorderWorker.js\");\n};\n","import Constants from \"../model/Constants\";\nimport { RecorderCallback, RecorderCallbacks } from \"../model/RecorderCallback\";\nimport RecorderConfig from \"../model/RecorderConfig\";\nimport RecorderWorkerMessage from \"../model/RecorderWorkerMessage\";\nimport RecorderWorkletMessage from \"../model/RecorderWorkletMessage\";\nimport utilFunctions from \"../utils/Functions\";\nimport getRecorderWorker from \"./getRecorderWorker\";\n\nexport class Recorder {\n\n    // Inline Worker\n    private worker: Worker | null = null;\n    private node: ScriptProcessorNode | AudioWorkletNode | null = null;\n    private context: BaseAudioContext | null = null;\n\n    private config: RecorderConfig = {\n        bufferLen: 4096,\n        sampleRate: 44100,\n        numChannels: 2,\n        mimeType: \"audio/wav\",\n        workletBasePath: \"worklets/\",\n        workerBasePath: \"workers/\",\n        bitrate: Constants.DEFAULT_MP3_BITRATE,\n        callback: () => { }\n    };\n\n    private callbacks: RecorderCallbacks = {\n        getBuffer: [],\n        exportWAV: [],\n        exportMP3: []\n    };\n\n    recording = false;\n\n    constructor(cfg: RecorderConfig) {\n        Object.assign(this.config, cfg);\n    }\n\n    async setup(source: AudioNode) {\n        if (this.node) { // Disconnect previous node\n            if (this.node instanceof AudioWorkletNode) {\n                this.node.port.postMessage(\"stop\");\n            }\n\n            this.node.disconnect();\n        }\n\n        if (source) {\n            this.context = source.context;\n\n            await this.createRecorderNode();\n\n            if (this.node && this.context) {\n                source.connect(this.node);\n                this.node.connect(this.context.destination);    //this should not be necessary\n            }\n        }\n\n        if (this.context && !this.worker) {\n            this.worker = getRecorderWorker(this.config.workerBasePath);\n\n            if (this.worker) {\n                this.worker.postMessage({\n                    command: \"init\",\n                    config: {\n                        sampleRate: this.context.sampleRate,\n                        numChannels: this.config.numChannels,\n                        bitrate: this.config.bitrate\n                    }\n                });\n\n                this.worker.onmessage = (e: RecorderWorkerMessage) => {\n                    let callbacks = null;\n\n                    switch (e.data.command) {\n                    case \"getBuffer\":\n                        callbacks = this.callbacks.getBuffer;\n                        break;\n                    case Constants.EXPORT_WAV_COMMAND:\n                        callbacks = this.callbacks.exportWAV;\n                        break;\n                    case Constants.EXPORT_MP3_COMMAND:\n                        callbacks = this.callbacks.exportMP3;\n                        break;\n                    }\n\n                    if (callbacks) {\n                        const cb = callbacks.pop();\n                        if (typeof cb == \"function\") {\n                            (cb as RecorderCallback<Blob | Float32Array[]>)(e.data.data);\n                        }\n                    }\n                };\n            }\n        }\n    }\n\n\n    private async createRecorderNode() {\n        if (this.context) {\n            if (utilFunctions.isAudioWorkletCompatible(this.context) && Constants.ENABLE_RECORDER_AUDIO_WORKLET) {\n                try {\n                    await this.createRecorderWorklet();\n                } catch(e) {\n                    this.createRecorderScriptProcessorNode();\n                }\n            } else {\n                this.createRecorderScriptProcessorNode();\n            }\n        }\n    }\n\n    private async createRecorderWorklet() {\n        if (this.context) {\n            await this.context.audioWorklet.addModule(this.config.workletBasePath + Constants.WORKLET_PATHS.RECORDER_WORKLET);\n\n            this.node = new AudioWorkletNode(this.context, Constants.WORKLET_NAMES.RECORDER_WORKLET);\n\n            if (this.node && this.node.port) {\n                const numChannelParameter = this.node.parameters.get(\"numChannels\");\n\n                if(numChannelParameter) {\n                    numChannelParameter.value = this.config.numChannels;\n                    numChannelParameter.setValueAtTime(this.config.numChannels, 0);\n                }\n\n                this.node.port.onmessage = (e: MessageEvent<RecorderWorkletMessage>) => {\n                    if (this.worker && e.data.command == \"record\" && e.data.buffer.length > 0) {\n                        this.worker.postMessage({\n                            command: \"record\",\n                            buffer: e.data.buffer\n                        });\n                    }\n                };\n            }\n        }\n    }\n\n    private createRecorderScriptProcessorNode() {\n        if (this.context) {\n            this.node = (this.context.createScriptProcessor).call(this.context,\n                this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n\n            this.node.onaudioprocess = (e) => {\n                if (!this.recording) return;\n\n                const buffer = [];\n                for (let channel = 0; channel < this.config.numChannels; channel++) {\n                    buffer.push(e.inputBuffer.getChannelData(channel));\n                }\n\n                if (this.worker) {\n                    this.worker.postMessage({\n                        command: \"record\",\n                        buffer: buffer\n                    });\n                }\n            };\n        }\n    }\n\n    record() {\n        this.recording = true;\n\n        if (this.node instanceof AudioWorkletNode) {\n            this.node.port.postMessage(\"record\");\n        }\n    }\n\n    stop() {\n        this.recording = false;\n\n        if (this.node instanceof AudioWorkletNode) {\n            this.node.port.postMessage(\"stop\");\n        }\n    }\n\n    clear() {\n        if (this.worker) {\n            this.worker.postMessage({ command: \"clear\" });\n        }\n    }\n\n    kill() {\n        this.clear();\n        this.stop();\n\n        if (this.worker) {\n            this.worker.terminate();\n        }\n    }\n\n    getBuffer(cb: RecorderCallback<Float32Array[]>) {\n        cb = cb || this.config.callback;\n        if (!cb) throw new Error(\"Callback not set\");\n\n        this.callbacks.getBuffer.push(cb);\n\n        if (this.worker) {\n            this.worker.postMessage({ command: \"getBuffer\" });\n        }\n    }\n\n    exportWAV(cb: RecorderCallback<Blob>, mimeType?: string) {\n        mimeType = mimeType || this.config.mimeType;\n        cb = cb || this.config.callback;\n        if (!cb) throw new Error(\"Callback not set\");\n\n        this.callbacks.exportWAV.push(cb);\n\n        if (this.worker) {\n            this.worker.postMessage({\n                command: Constants.EXPORT_WAV_COMMAND,\n                type: mimeType\n            });\n        }\n    }\n\n    exportMP3(cb: RecorderCallback<Blob>, mimeType?: string) {\n        mimeType = mimeType || this.config.mimeType;\n        cb = cb || this.config.callback;\n        if (!cb) throw new Error(\"Callback not set\");\n\n        this.callbacks.exportMP3.push(cb);\n\n        if (this.worker) {\n            this.worker.postMessage({\n                command: Constants.EXPORT_MP3_COMMAND,\n                type: mimeType\n            });\n        }\n    }\n\n    static forceDownload(blob: Blob, filename: string) {\n        const link = window.document.createElement(\"a\");\n        const url = (window.URL || window.webkitURL).createObjectURL(blob);\n        window.document.body.appendChild(link);\n        link.href = url;\n        link.download = filename || \"output.wav\";\n        link.click();\n        window.URL.revokeObjectURL(url);\n    }\n};\n\nexport default Recorder;\n","\nimport { Recorder } from \"../recorder/Recorder\";\nimport { EventType } from \"@/model/EventTypeEnum\";\nimport { ConfigService } from \"@/services/ConfigService\";\nimport BufferPlayer from \"@/BufferPlayer\";\nimport AbstractAudioElement from \"@/filters/interfaces/AbstractAudioElement\";\nimport SaveBufferOptions from \"@/model/SaveBufferOptions\";\nimport EventEmitter from \"@/utils/EventEmitter\";\nimport AudioContextManager from \"./AudioContextManager\";\nimport Constants from \"@/model/Constants\";\nimport FilterManager from \"./FilterManager\";\nimport RecorderWorkerMessage from \"../model/RecorderWorkerMessage\";\nimport getRecorderWorker from \"../recorder/getRecorderWorker\";\n\nexport default class SaveBufferManager extends AbstractAudioElement {\n    \n    /** The filter manager */\n    private filterManager: FilterManager | undefined;\n    /** The context manager */\n    private contextManager: AudioContextManager | undefined;\n    /** The current event emitter */\n    private eventEmitter: EventEmitter | undefined;\n    /** The audio player */\n    private bufferPlayer: BufferPlayer | undefined;\n\n    /** If we are currently processing and downloading the buffer */\n    private savingBuffer = false;\n    /** Callback used when saving audio */\n    private playingStoppedCallback: (() => void) | null = null;\n\n    constructor(contextManager: AudioContextManager | undefined, configService: ConfigService | null, eventEmitter: EventEmitter | null, bufferPlayer: BufferPlayer) {\n        super();\n\n        this.contextManager = contextManager;\n        this.eventEmitter = eventEmitter || new EventEmitter();\n        this.bufferPlayer = bufferPlayer;\n        this.configService = configService;\n\n        // Callback called just before starting audio player\n        this.setup();\n    }\n\n    private setup() {\n        if (this.bufferPlayer) {\n            // Callback called when playing is finished\n            this.bufferPlayer.on(EventType.PLAYING_FINISHED, () => {\n                if (this.savingBuffer && this.playingStoppedCallback && this.eventEmitter) {\n                    this.eventEmitter.off(EventType.PLAYING_STOPPED, this.playingStoppedCallback);\n                }\n            });\n        }\n    }\n\n    /**\n     * Save the rendered audio to a buffer\n     * @param options The save options\n     * @returns A promise resolved when the audio buffer is downloaded to the user\n     */\n    async saveBuffer(renderedBuffer: AudioBuffer | null, options?: SaveBufferOptions): Promise<boolean> {\n        if (this.savingBuffer) {\n            throw new Error(\"The buffer is currently saving\");\n        }\n\n        if (!this.bufferPlayer) {\n            throw new Error(\"No buffer player was found\");\n        }\n\n        this.savingBuffer = true;\n\n        let savingResult = false;\n\n        if (!this.bufferPlayer.compatibilityMode) {\n            savingResult = await this.saveBufferDirect(renderedBuffer, options);\n        } else {\n            savingResult = await this.saveBufferCompatibilityMode(options);\n        }\n\n        this.savingBuffer = false;\n\n        return savingResult;\n    }\n\n    /**\n     * Save the rendered audio to a buffer, when compatibility mode is disabled\n     * @param options The save options\n     * @returns A promise resolved when the audio buffer is downloaded to the user\n     */\n    private saveBufferDirect(renderedBuffer: AudioBuffer | null, options?: SaveBufferOptions): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            if (!renderedBuffer || (this.contextManager && !this.contextManager.currentContext)) {\n                return reject(\"No rendered buffer or AudioContext not initialized\");\n            }\n\n            const worker = getRecorderWorker(this.configService?.getWorkerBasePath());\n\n            if (worker) {\n                const buffer: Float32Array[] = [];\n\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i++) {\n                    buffer.push(renderedBuffer.getChannelData(i));\n                }\n\n                worker.onmessage = (e: RecorderWorkerMessage) => {\n                    if (e.data.command == Constants.EXPORT_WAV_COMMAND || e.data.command == Constants.EXPORT_MP3_COMMAND) {\n                        this.downloadAudioBlob(e.data.data, options);\n                    }\n\n                    worker.terminate();\n                    this.savingBuffer = false;\n                    resolve(true);\n                };\n\n                worker.postMessage({\n                    command: Constants.INIT_COMMAND,\n                    config: {\n                        sampleRate: renderedBuffer.sampleRate,\n                        numChannels: 2,\n                        bitrate: options?.bitrate || Constants.DEFAULT_MP3_BITRATE\n                    }\n                });\n\n                worker.postMessage({\n                    command: Constants.RECORD_COMMAND,\n                    buffer\n                });\n\n                worker.postMessage({\n                    command: options?.format === \"mp3\" || Constants.DEFAULT_SAVE_FORMAT === \"mp3\" ? Constants.EXPORT_MP3_COMMAND : Constants.EXPORT_WAV_COMMAND,\n                    type: Constants.AUDIO_WAV\n                });\n            }\n        });\n    }\n\n    /**\n     * Save the rendered audio to a buffer, when compatibility mode is enabled\n     * @param options The save options\n     * @returns A promise resolved when the audio buffer is downloaded to the user\n     */\n    private saveBufferCompatibilityMode(options?: SaveBufferOptions): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            if (!this.bufferPlayer) {\n                return reject(\"No buffer player found\");\n            }\n\n            this.bufferPlayer.start().then(() => {\n                if (!this.configService) {\n                    return reject(\"No config service found\");\n                }\n\n                if (!this.filterManager) {\n                    return reject(\"No filter manager found\");\n                }\n\n                const rec = new Recorder({\n                    bufferLen: this.configService.getBufferSize(),\n                    sampleRate: this.configService.getSampleRate(),\n                    numChannels: 2,\n                    workletBasePath: this.configService.getWorkletBasePath(),\n                    workerBasePath: this.configService.getWorkerBasePath(),\n                    mimeType: options?.format == \"mp3\" ? Constants.AUDIO_MP3 : Constants.AUDIO_WAV,\n                    bitrate: options?.bitrate || Constants.DEFAULT_MP3_BITRATE\n                });\n\n                rec.setup(this.filterManager.currentNodes!.output).then(() => {\n                    rec.record();\n\n                    this.playingStoppedCallback = () => {\n                        rec.kill();\n\n                        this.savingBuffer = false;\n\n                        if (this.eventEmitter) {\n                            this.eventEmitter.off(EventType.PLAYING_FINISHED, finishedCallback);\n    \n                            if (this.playingStoppedCallback) {\n                                this.eventEmitter.off(EventType.PLAYING_STOPPED, this.playingStoppedCallback);\n                            }\n                        }\n\n                        resolve(true);\n                    };\n\n                    const finishedCallback = () => {\n                        if (this.playingStoppedCallback && this.eventEmitter) {\n                            this.eventEmitter.off(EventType.PLAYING_STOPPED, this.playingStoppedCallback);\n                        }\n\n                        rec.stop();\n\n                        const downloadBlobCallback = (blob: Blob) => {\n                            this.downloadAudioBlob(blob, options);\n\n                            this.savingBuffer = false;\n\n                            if (this.eventEmitter) {\n                                this.eventEmitter.off(EventType.PLAYING_FINISHED, finishedCallback);\n                            }\n                            \n                            rec.kill();\n\n                            resolve(true);\n                        };\n\n                        if (options?.format === \"mp3\" || Constants.DEFAULT_SAVE_FORMAT === \"mp3\") {\n                            rec.exportMP3(downloadBlobCallback);\n                        } else {\n                            rec.exportWAV(downloadBlobCallback);\n                        }\n                    };\n\n                    if (this.eventEmitter) {\n                        this.eventEmitter.on(EventType.PLAYING_FINISHED, finishedCallback);\n                        this.eventEmitter.on(EventType.PLAYING_STOPPED, this.playingStoppedCallback);\n                    }\n                });\n            });\n        });\n    }\n\n    /**\n     * Download an audio Blob\n     * @param blob The blob\n     * @param options The save options\n     */\n    private downloadAudioBlob(blob: Blob, options?: SaveBufferOptions) {\n        Recorder.forceDownload(blob, \"audio-\" + new Date().toISOString() + \".\" + (options?.format || Constants.DEFAULT_SAVE_FORMAT));\n    }\n\n    get order(): number {\n        return -1;\n    }\n\n    get id(): string {\n        return \"SaveBufferManager\";\n    }\n}\n","/*\n * Copyright (C) 2019-2023 Eliastik (eliastiksofts.com)\n *\n * This file is part of \"Simple Voice Changer\".\n *\n * \"Simple Voice Changer\" is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * \"Simple Voice Changer\" is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with \"Simple Voice Changer\".  If not, see <http://www.gnu.org/licenses/>.\n */\nexport default class TimerSaveTime {\n    seconds = 0;\n    initialSeconds = 0;\n    interval: number | null = null;\n    incr = 1;\n\n    private countCallback: () => void = () => {};\n\n    constructor(seconds: number, incr: number) {\n        this.seconds = seconds;\n        this.initialSeconds = seconds;\n        this.interval;\n        this.incr = incr;\n    }\n\n    start() {\n        this.interval = window.setInterval(() => this.count(), 1000);\n    }\n\n    stop() {\n        clearInterval(this.interval!);\n    }\n\n    count() {\n        this.seconds += this.incr;\n\n        if(this.seconds <= 0) {\n            this.stop();\n        }\n\n        if(this.countCallback) {\n            this.countCallback();\n        }\n    }\n\n    onCount(callback: () => void) {\n        this.countCallback = callback;\n    }\n}","import AbstractAudioElement from \"../filters/interfaces/AbstractAudioElement\";\nimport AbstractAudioFilter from \"../filters/interfaces/AbstractAudioFilter\";\nimport AbstractAudioRenderer from \"../filters/interfaces/AbstractAudioRenderer\";\nimport utils from \"../utils/Functions\";\nimport BufferPlayer from \"../BufferPlayer\";\nimport BufferFetcherService from \"../services/BufferFetcherService\";\nimport EventEmitter from \"../utils/EventEmitter\";\nimport { EventType } from \"../model/EventTypeEnum\";\nimport Constants from \"../model/Constants\";\nimport { ConfigService } from \"../services/ConfigService\";\nimport utilFunctions from \"../utils/Functions\";\nimport { FilterSettings } from \"../model/filtersSettings/FilterSettings\";\nimport { EventEmitterCallback } from \"../model/EventEmitterCallback\";\nimport { FilterState } from \"../model/FilterState\";\nimport GenericConfigService from \"../utils/GenericConfigService\";\nimport ReverbSettings from \"../model/filtersSettings/ReverbSettings\";\nimport BufferDecoderService from \"../services/BufferDecoderService\";\nimport SaveBufferOptions from \"../model/SaveBufferOptions\";\nimport FilterManager from \"./FilterManager\";\nimport AudioContextManager from \"./AudioContextManager\";\nimport SaveBufferManager from \"./SaveBufferManager\";\n\nexport default class AudioEditor extends AbstractAudioElement {\n\n    /** The filter manager */\n    private filterManager: FilterManager | undefined;\n    /** The context manager */\n    private contextManager: AudioContextManager | undefined;\n    /** The save buffer manager */\n    private saveBufferManager: SaveBufferManager | undefined;\n\n    /** The current offline context */\n    private currentOfflineContext: OfflineAudioContext | null | undefined;\n    /** The audio buffer to be processed */\n    private principalBuffer: AudioBuffer | null = null;\n    /** The sum of all the samples of the principal buffer,\n     * used to detect the need to enable the compatibility mode */\n    private sumPrincipalBuffer: number = 0;\n    /** The resulting audio buffer */\n    private renderedBuffer: AudioBuffer | null = null;\n    /** The audio player */\n    private bufferPlayer: BufferPlayer | undefined;\n    /** The event emitter */\n    private eventEmitter: EventEmitter | undefined;\n    /** List of audio buffers to fetch */\n    private audioBuffersToFetch: string[] = [];\n    /** true if the user wanted to cancel audio rendering */\n    private audioRenderingLastCanceled = false;\n    /** true if initial rendering for the current buffer was done */\n    private initialRenderingDone = false;\n    /** True if we are downloading initial buffer data */\n    downloadingInitialData = false;\n\n    constructor(context?: AudioContext | null, player?: BufferPlayer, eventEmitter?: EventEmitter, configService?: ConfigService, audioBuffersToFetch?: string[]) {\n        super();\n\n        this.eventEmitter = eventEmitter || new EventEmitter();\n        this.configService = configService || new GenericConfigService();\n\n        this.contextManager = new AudioContextManager(context, this.configService, this.eventEmitter);\n\n        this.bufferPlayer = player || new BufferPlayer(this.contextManager, this.eventEmitter);\n        this.bufferFetcherService = new BufferFetcherService(this.contextManager, this.configService, this.eventEmitter);\n        this.bufferDecoderService = new BufferDecoderService(this.contextManager, this.eventEmitter);\n\n        this.filterManager = new FilterManager(this.eventEmitter, this.bufferFetcherService, this.bufferDecoderService, this.configService);\n        this.saveBufferManager = new SaveBufferManager(this.contextManager, this.configService, this.eventEmitter, this.bufferPlayer);\n\n        this.audioBuffersToFetch = audioBuffersToFetch || [];\n\n        // Callback called just before starting audio player\n        this.setup();\n    }\n\n    private setup() {\n        if (this.bufferPlayer) {\n            // Callback called just before starting playing audio, when compatibility mode is enabled\n            this.bufferPlayer.onBeforePlaying(async () => {\n                if (this.bufferPlayer && this.bufferPlayer.compatibilityMode\n                    && this.contextManager && this.contextManager.currentContext) {\n                    await this.setupOutput(this.contextManager.currentContext);\n                }\n            });\n\n            // Callback called when playing is finished\n            this.bufferPlayer.on(EventType.PLAYING_FINISHED, () => {\n                if (this.bufferPlayer && this.bufferPlayer.loop) {\n                    this.bufferPlayer.start();\n                }\n            });\n\n            this.bufferPlayer.contextManager = this.contextManager;\n        }\n\n        if (this.audioBuffersToFetch.length > 0) {\n            this.fetchBuffers(false);\n        }\n    }\n\n    /**\n     * Add a new custom filter for this audio editor\n     * @param filters One or more AbstractAudioFilter\n     */\n    addFilters(...filters: AbstractAudioFilter[]) {\n        if (this.filterManager) {\n            this.filterManager.addFilters(...filters);\n        }\n    }\n\n    /**\n     * Add a new custom renderer for this audio editor\n     * @param renderers One or more AbstractAudioRenderer\n     */\n    addRenderers(...renderers: AbstractAudioRenderer[]) {\n        if (this.filterManager) {\n            this.filterManager.addRenderers(...renderers);\n        }\n    }\n\n    /**\n     * Fetch default buffers from network\n     * @param refetch true if we need to refetch the buffers\n     */\n    private async fetchBuffers(refetch: boolean) {\n        if (this.downloadingInitialData || !this.bufferFetcherService) {\n            return;\n        }\n\n        this.downloadingInitialData = true;\n\n        if (this.eventEmitter && !refetch) {\n            this.eventEmitter.emit(EventType.LOADING_BUFFERS);\n        }\n\n        try {\n            await this.bufferFetcherService.fetchAllBuffers(this.audioBuffersToFetch);\n            this.downloadingInitialData = false;\n\n            if (this.eventEmitter && !refetch) {\n                this.eventEmitter.emit(EventType.LOADED_BUFFERS);\n            }\n        } catch (e) {\n            if (this.eventEmitter && !refetch) {\n                this.eventEmitter.emit(EventType.LOADING_BUFFERS_ERROR);\n            }\n        }\n    }\n\n    /**\n     * Reset the buffer fetcher and redownload the buffers. Used when changing sample rate.\n     */\n    private async resetBufferFetcher() {\n        if (this.bufferFetcherService) {\n            this.bufferFetcherService.reset();\n            await this.fetchBuffers(true);\n            // Fetch the current select environment for the reverb filter\n            await this.resetReverbFilterBuffer();\n        }\n    }\n\n    private async resetReverbFilterBuffer() {\n        const filterSettings = this.getFiltersSettings();\n        const reverbSettings = filterSettings.get(Constants.FILTERS_NAMES.REVERB);\n\n        if (reverbSettings) {\n            const reverbUrl = (reverbSettings as ReverbSettings).reverbEnvironment?.value;\n\n            if (reverbUrl && reverbUrl !== \"custom\" && this.bufferFetcherService) {\n                await this.bufferFetcherService.fetchBuffer(reverbUrl);\n            }\n        }\n    }\n\n    /** Prepare the AudioContext before use */\n    private async prepareContext() {\n        if (this.contextManager) {\n            const changed = this.contextManager.createNewContextIfNeeded(this.principalBuffer);\n\n            if (changed) {\n                await this.resetBufferFetcher();\n            }\n    \n            if (this.contextManager.currentContext) {\n                this.contextManager.currentContext.resume();\n            }\n        }\n    }\n\n    /**\n     * Get the current sample rate used\n     */\n    get currentSampleRate(): number {\n        if (this.contextManager) {\n            return this.contextManager.currentSampleRate;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get the default device sample rate\n     */\n    get defaultDeviceSampleRate(): number {\n        const tempContext = new AudioContext();\n        let sampleRate = 0;\n\n        if (tempContext) {\n            sampleRate = tempContext.sampleRate;\n            tempContext.close();\n        }\n\n        return sampleRate;\n    }\n\n    /** Decode and load an audio buffer from an audio file */\n    async loadBufferFromFile(file: File) {\n        this.principalBuffer = null;\n\n        await this.prepareContext();\n\n        if (this.contextManager && this.contextManager.currentContext && this.bufferDecoderService) {\n            this.principalBuffer = await this.bufferDecoderService.decodeBufferFromFile(file);\n            this.initialRenderingDone = false;\n\n            if (this.principalBuffer) {\n                this.sumPrincipalBuffer = utils.sumAudioBuffer(this.principalBuffer);\n            } else {\n                throw new Error(\"Error decoding audio file\");\n            }\n\n            this.resetAudioRenderingProgress();\n        } else {\n            throw new Error(\"Audio Context is not ready!\");\n        }\n    }\n\n    /**\n     * Reset audio rendering progress\n     */\n    private resetAudioRenderingProgress() {\n        if (this.eventEmitter) {\n            this.eventEmitter.emit(EventType.UPDATE_AUDIO_TREATMENT_PERCENT, 0);\n            this.eventEmitter.emit(EventType.UPDATE_REMAINING_TIME_ESTIMATED, -1);\n        }\n    }\n\n    /** Change the principal audio buffer of this editor */\n    loadBuffer(audioBuffer: AudioBuffer) {\n        this.principalBuffer = audioBuffer;\n        this.sumPrincipalBuffer = utils.sumAudioBuffer(this.principalBuffer);\n        this.initialRenderingDone = false;\n    }\n\n    /**\n     * Get the rendered audio buffer\n     * @returns The AudioBuffer\n     */\n    getOutputBuffer() {\n        return this.renderedBuffer;\n    }\n\n    /**\n     * Render the audio to a buffer\n     * @returns A promise resolved when the audio processing is finished.\n     * The promise return false if the audio processing was cancelled or if an error occurred.\n     * The resulting audio buffer can then be obtained by using the \"getOutputBuffer\" method.\n     */\n    async renderAudio(): Promise<boolean> {\n        await this.prepareContext();\n\n        if (!this.contextManager || !this.contextManager.currentContext) {\n            throw new Error(\"AudioContext is not yet available\");\n        }\n\n        if(!this.filterManager) {\n            throw new Error(\"Filter manager is not available\");\n        }\n\n        if (!this.filterManager.entrypointFilter) {\n            throw new Error(\"Entrypoint filter is not available\");\n        }\n\n        if (!this.principalBuffer) {\n            throw new Error(\"No principal buffer available\");\n        }\n\n        // If initial rendering is disabled and compatibility mode is disabled, we stop here\n        if (!this.initialRenderingDone && this.configService && this.configService.isInitialRenderingDisabled() && !this.configService.isCompatibilityModeEnabled()) {\n            this.loadInitialBuffer();\n            this.initialRenderingDone = true;\n            return true;\n        }\n\n        // If switching from compatiblity mode to normal mode, we stop the audio player\n        if (this.configService && this.bufferPlayer && !this.configService.isCompatibilityModeEnabled() && this.bufferPlayer.compatibilityMode) {\n            this.bufferPlayer.stop();\n        }\n\n        const speedAudio = this.filterManager.entrypointFilter.getSpeed();\n        const durationAudio = this.calculateAudioDuration(speedAudio);\n        const offlineContext = new OfflineAudioContext(2, this.contextManager.currentContext.sampleRate * durationAudio, this.contextManager.currentContext.sampleRate);\n        const outputContext = this.configService && this.configService.isCompatibilityModeEnabled() ? this.contextManager.currentContext : offlineContext;\n\n        this.renderedBuffer = await this.filterManager.executeAudioRenderers(this.principalBuffer, outputContext);\n        this.currentOfflineContext = null;\n        this.audioRenderingLastCanceled = false;\n\n\n        this.resetAudioRenderingProgress();\n        this.filterManager.setupPasstroughFilter(durationAudio, this.contextManager.currentContext);\n\n        return await this.setupOutput(outputContext, durationAudio, offlineContext);\n    }\n\n    /**\n     * Setup output buffers/nodes, then process the audio\n     * @param outputContext Output audio context\n     * @param durationAudio Duration of the audio buffer\n     * @param offlineContext An offline context to do the rendering (can be omited, in this case the rendering is done in real time - \"compatibility mode\")\n     * @returns A promise resolved when the audio processing is done. The promise returns false if the audio processing was cancelled, or if an error occurred.\n     */\n    private async setupOutput(outputContext: BaseAudioContext, durationAudio?: number, offlineContext?: OfflineAudioContext): Promise<boolean> {\n        if (this.renderedBuffer && this.configService && this.eventEmitter && this.bufferPlayer && this.filterManager) {\n            // Initialize worklets then connect the filter nodes\n            await this.filterManager.initializeWorklets(outputContext);\n            await this.filterManager.connectNodes(outputContext, this.renderedBuffer, false, this.configService.isCompatibilityModeEnabled());\n\n            this.filterManager.setupPlayerSpeed(this.bufferPlayer);\n\n            // Standard mode\n            if (!this.configService.isCompatibilityModeEnabled() && offlineContext && this.filterManager.currentNodes) {\n                this.currentOfflineContext = offlineContext;\n                this.filterManager.currentNodes.output.connect(outputContext.destination);\n\n                const renderedBuffer = await offlineContext.startRendering();\n\n                if (this.contextManager && !this.loadRenderedAudio(renderedBuffer)) {\n                    return await this.setupOutput(this.contextManager.currentContext!, durationAudio);\n                }\n\n                if (this.audioRenderingLastCanceled) {\n                    return false;\n                }\n\n                this.eventEmitter.emit(EventType.OFFLINE_AUDIO_RENDERING_FINISHED);\n            } else { // Compatibility mode\n                this.bufferPlayer.setCompatibilityMode(this.filterManager.currentNodes!.output, durationAudio);\n                this.initialRenderingDone = true;\n            }\n\n            this.eventEmitter.emit(EventType.AUDIO_RENDERING_FINISHED);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Load rendered audio buffer into audio player\n     * @param renderedBuffer Rendered audio buffer - AudioBuffer\n     * @returns false if the rendred audio buffer is invalid, true otherwise\n     */\n    private loadRenderedAudio(renderedBuffer: AudioBuffer): boolean {\n        if (this.eventEmitter && this.bufferPlayer) {\n            if (!this.audioRenderingLastCanceled) {\n                const sumRenderedAudio = utils.sumAudioBuffer(renderedBuffer);\n\n                if (sumRenderedAudio == 0 && this.sumPrincipalBuffer !== 0) {\n                    if (this.configService && !this.configService.isCompatibilityModeChecked()) {\n                        this.setCompatibilityModeChecked(true);\n                        this.configService.enableCompatibilityMode();\n                        this.eventEmitter.emit(EventType.COMPATIBILITY_MODE_AUTO_ENABLED);\n\n                        return false;\n                    }\n\n                    this.eventEmitter.emit(EventType.RENDERING_AUDIO_PROBLEM_DETECTED);\n                }\n\n                this.renderedBuffer = renderedBuffer;\n                this.bufferPlayer.loadBuffer(this.renderedBuffer);\n            } else if (!this.initialRenderingDone) {\n                this.loadInitialBuffer();\n                this.eventEmitter.emit(EventType.CANCELLED_AND_LOADED_INITIAL_AUDIO);\n            }\n\n            this.initialRenderingDone = true;\n        }\n\n        return true;\n    }\n\n    /**\n     * Load the initial audio buffer to the buffer player\n     */\n    private loadInitialBuffer() {\n        if (this.bufferPlayer) {\n            this.renderedBuffer = this.principalBuffer;\n            this.bufferPlayer.loadBuffer(this.principalBuffer!);\n        }\n    }\n\n    /**\n     * Cancel the audio rendering\n     */\n    public cancelAudioRendering() {\n        if (this.currentOfflineContext && !this.audioRenderingLastCanceled && this.filterManager) {\n            this.audioRenderingLastCanceled = true;\n            this.filterManager.disconnectOldNodes(false);\n\n            if (this.eventEmitter) {\n                this.eventEmitter.emit(EventType.CANCELLING_AUDIO_PROCESSING);\n            }\n        }\n    }\n\n    /**\n     * Calculate approximative audio duration according to enabled filters and their settings\n     * @param speedAudio Current audio speed\n     * @returns The audio duration\n     */\n    private calculateAudioDuration(speedAudio: number): number {\n        if (this.principalBuffer && this.filterManager) {\n            const duration = utils.calcAudioDuration(this.principalBuffer, speedAudio);\n            return duration + this.filterManager.getAddingTime();\n        }\n\n        return 0;\n    }\n\n    get order(): number {\n        return -1;\n    }\n\n    get id(): string {\n        return Constants.AUDIO_EDITOR;\n    }\n\n    isEnabled(): boolean {\n        return true;\n    }\n\n    /**\n     * Check if AudioWorklet are available\n     * @returns boolean\n     */\n    isAudioWorkletAvailable(): boolean {\n        if (this.contextManager && this.contextManager.currentContext) {\n            return utilFunctions.isAudioWorkletCompatible(this.contextManager.currentContext);\n        }\n\n        return false;\n    }\n\n    /**\n     * Set compatibility/direct audio rendering mode already checked for auto enabling (if an error occurs rendering in offline context)\n     * @param checked boolean\n     */\n    private setCompatibilityModeChecked(checked: boolean) {\n        if (this.configService) {\n            this.configService.setConfig(Constants.PREFERENCES_KEYS.COMPATIBILITY_MODE_CHECKED, \"\" + checked);\n        }\n    }\n\n    /** Filters settings */\n\n    /**\n     * Get enabled/disabled state of all filters/renderers\n     * @returns The filters state (enabled/disabled)\n     */\n    getFiltersState(): FilterState {\n        if (this.filterManager) {\n            return this.filterManager.getFiltersState();\n        }\n\n        return {};\n    }\n\n    /**\n     * Get the settings of all filters/renderers\n     * @returns \n     */\n    getFiltersSettings(): Map<string, FilterSettings> {\n        if (this.filterManager) {\n            return this.filterManager.getFiltersSettings();\n        }\n\n        return new Map();\n    }\n\n    /** Reconnect the nodes if the compatibility/direct mode is enabled */\n    async reconnectNodesIfNeeded() {\n        if (this.contextManager && this.bufferPlayer && this.bufferPlayer.compatibilityMode &&\n            this.contextManager.currentContext && this.principalBuffer &&\n            this.filterManager && this.filterManager.entrypointFilter) {\n            await this.filterManager.connectNodes(this.contextManager.currentContext, this.principalBuffer, true, this.bufferPlayer.compatibilityMode);\n\n            const speedAudio = this.filterManager.entrypointFilter.getSpeed();\n            this.bufferPlayer.speedAudio = speedAudio;\n            this.bufferPlayer.duration = this.calculateAudioDuration(speedAudio) * speedAudio;\n        }\n    }\n\n    /**\n     * Toggle enabled/disabled state for a filter/renderer\n     * @param filterId The filter/renderer ID\n     */\n    toggleFilter(filterId: string) {\n        if (this.filterManager && this.contextManager && this.contextManager.currentContext && this.principalBuffer) {\n            this.filterManager.toggleFilter(filterId);\n            this.reconnectNodesIfNeeded();\n        }\n    }\n\n    /**\n     * Change a filter/renderer setting\n     * @param filterId Filter ID\n     * @param settings Filter setting (key/value)\n     */\n    async changeFilterSettings(filterId: string, settings: FilterSettings) {\n        if (this.filterManager && this.contextManager && this.contextManager.currentContext && this.principalBuffer) {\n            await this.filterManager.changeFilterSettings(filterId, settings);\n            await this.reconnectNodesIfNeeded();\n        }\n    }\n\n    /**\n     * Reset the settings of a filter/renderer\n     * @param filterId Id of the filter/renderer\n     */\n    async resetFilterSettings(filterId: string) {\n        if (this.filterManager && this.contextManager && this.contextManager.currentContext && this.principalBuffer) {\n            await this.filterManager.resetFilterSettings(filterId);\n            await this.reconnectNodesIfNeeded();\n        }\n    }\n\n    /**\n     * Reset all filters/renderers state (enabled/disabled) based on their default states\n     */\n    resetAllFiltersState() {\n        if (this.filterManager && this.contextManager && this.contextManager.currentContext && this.principalBuffer) {\n            this.filterManager.resetAllFiltersState();\n            this.reconnectNodesIfNeeded();\n        }\n    }\n\n    /** Events and exit */\n\n    /**\n     * Exit/reset the audio editor basic state\n     */\n    exit() {\n        if (this.bufferPlayer) {\n            this.bufferPlayer.stop();\n            this.bufferPlayer.reset();\n        }\n\n        this.cancelAudioRendering();\n        this.principalBuffer = null;\n    }\n\n    /**\n     * Subscribe to an event\n     * @param event The event ID\n     * @param callback The callback function\n     */\n    on(event: string, callback: EventEmitterCallback) {\n        if (this.eventEmitter) {\n            this.eventEmitter.on(event, callback);\n        }\n    }\n\n    /**\n     * Unsubscribe to an event\n     * @param event The event ID\n     * @param callback The callback function\n     */\n    off(event: string, callback: EventEmitterCallback) {\n        if (this.eventEmitter) {\n            this.eventEmitter.off(event, callback);\n        }\n    }\n\n    /**\n     * Save the rendered audio to a buffer\n     * @param options The save options\n     * @returns A promise resolved when the audio buffer is downloaded to the user\n     */\n    async saveBuffer(options?: SaveBufferOptions): Promise<boolean> {\n        if (this.saveBufferManager) {\n            return await this.saveBufferManager?.saveBuffer(this.renderedBuffer, options);\n        }\n\n        return false;\n    }\n}\n","\n/*\n * Copyright (C) 2019-2023 Eliastik (eliastiksofts.com)\n *\n * This file is part of \"Simple Voice Changer\".\n *\n * \"Simple Voice Changer\" is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * \"Simple Voice Changer\" is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with \"Simple Voice Changer\".  If not, see <http://www.gnu.org/licenses/>.\n */\n// The Voice Recorder class\n// Used to record a sound (voice, etc.) with the user microphone\n// Offer control with play/pause and audio feedback\nimport TimerSaveTime from \"./utils/TimerSaveTime\";\nimport EventEmitter from \"./utils/EventEmitter\";\nimport { EventType } from \"./model/EventTypeEnum\";\nimport AudioConstraintWrapper from \"./model/AudioConstraintWrapper\";\nimport { RecorderSettings } from \"./model/RecorderSettings\";\nimport { ConfigService } from \"./services/ConfigService\";\nimport AbstractAudioElement from \"./filters/interfaces/AbstractAudioElement\";\nimport Constants from \"./model/Constants\";\nimport { EventEmitterCallback } from \"./model/EventEmitterCallback\";\nimport { AudioConstraint } from \"./model/AudioConstraint\";\nimport Recorder from \"./recorder/Recorder\";\n\nexport default class VoiceRecorder extends AbstractAudioElement {\n\n    private context: AudioContext | null | undefined;\n    private input: MediaStreamAudioSourceNode | null = null;\n    private stream: MediaStream | null = null;\n    private recorder: Recorder | null = null;\n    private alreadyInit = false;\n    private timer: TimerSaveTime | null = null;\n    private enableAudioFeedback = false;\n    private recording = false;\n    private deviceList: MediaDeviceInfo[] = [];\n    private constraints: AudioConstraintWrapper = {\n        audio: {\n            noiseSuppression: true,\n            echoCancellation: true,\n            autoGainControl: true,\n            sampleRate: { ideal: 44100 }\n        }\n    };\n    private eventEmitter: EventEmitter | null = null;\n    private previousSampleRate = Constants.DEFAULT_SAMPLE_RATE;\n    private sampleRateConfigNotSupported = false;\n\n    constructor(context?: AudioContext | null, eventEmitter?: EventEmitter, configService?: ConfigService) {\n        super();\n        this.context = context;\n        this.eventEmitter = eventEmitter || new EventEmitter();\n        this.configService = configService || null;\n\n        if (this.configService) {\n            this.previousSampleRate = this.configService.getSampleRate();\n        }\n    }\n\n    /** Initialize this voice recorder */\n    async init() {\n        if (!this.isRecordingAvailable()) {\n            return;\n        }\n\n        // Specific case: Firefox doesn't support changing sample-rate for MediaDevice API\n        // In this case we disable sample-rate config feature for this VoiceRecorder\n        this.sampleRateConfigNotSupported = !navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n        if (!this.context) {\n            await this.createNewContext(this.previousSampleRate);\n        } else {\n            await this.createNewContextIfNeeded();\n        }\n\n        this.eventEmitter?.emit(EventType.RECORDER_INIT);\n\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia(this.constraints);\n\n            if (this.context) {\n                this.context.resume();\n            }\n\n            await this.setup(stream, false, false);\n\n            this.alreadyInit = true;\n            this.timer = new TimerSaveTime(0, 1);\n\n            this.timer.onCount(() => {\n                this.eventEmitter?.emit(EventType.RECORDER_COUNT_UPDATE);\n            });\n\n            this.successCallback();\n        } catch (e) {\n            console.error(e);\n\n            const exception = e as DOMException;\n\n            if (exception) {\n                switch (exception.name) {\n                case \"SecurityError\":\n                case \"NotAllowedError\":\n                    this.errorCallback();\n                    break;\n                case \"NotFoundError\":\n                    this.notFoundErrorCallback();\n                    break;\n                // Disable sample rate configuration\n                case \"NotSupportedError\":\n                    if (!this.sampleRateConfigNotSupported) {\n                        this.previousSampleRate = 0;\n                        this.sampleRateConfigNotSupported = true;\n                        this.init();\n                    }\n                    break;\n                default:\n                    this.unknownErrorCallback();\n                    break;\n                }\n            }\n        }\n\n        navigator.mediaDevices.ondevicechange = () => this.updateInputList();\n    }\n\n    /**\n     * Create new context if needed, for example if sample rate setting have changed\n     */\n    private async createNewContextIfNeeded() {\n        let currentSampleRate = Constants.DEFAULT_SAMPLE_RATE;\n\n        if (this.configService) {\n            currentSampleRate = this.configService.getSampleRate();\n        }\n\n        // If sample rate setting has changed, create a new audio context\n        if (currentSampleRate != this.previousSampleRate) {\n            await this.createNewContext(currentSampleRate);\n            this.previousSampleRate = currentSampleRate;\n        }\n    }\n\n    /** \n     * Stop previous audio context and create a new one\n     */\n    private async createNewContext(sampleRate: number) {\n        if (this.context) {\n            await this.context.close();\n        }\n\n        const options: AudioContextOptions = {\n            latencyHint: \"balanced\"\n        };\n\n        if (sampleRate != 0 && !this.sampleRateConfigNotSupported) {\n            options.sampleRate = sampleRate;\n        }\n\n        this.context = new AudioContext(options);\n        this.constraints.audio.sampleRate = { ideal: this.context.sampleRate };\n    }\n\n    private successCallback() {\n        this.eventEmitter?.emit(EventType.RECORDER_SUCCESS);\n    }\n\n    private errorCallback() {\n        this.eventEmitter?.emit(EventType.RECORDER_ERROR);\n    }\n\n    private notFoundErrorCallback() {\n        this.eventEmitter?.emit(EventType.RECORDER_NOT_FOUND_ERROR);\n    }\n\n    private unknownErrorCallback() {\n        this.eventEmitter?.emit(EventType.RECORDER_UNKNOWN_ERROR);\n    }\n\n    /**\n     * Enable or disable audio feedback\n     * @param enable boolean\n     */\n    audioFeedback(enable: boolean) {\n        if (this.context) {\n            if (enable) {\n                this.input && this.input.connect(this.context.destination);\n                this.enableAudioFeedback = true;\n            } else {\n                this.input && this.input.connect(this.context.destination) && this.input.disconnect(this.context.destination);\n                this.enableAudioFeedback = false;\n            }\n\n            this.eventEmitter?.emit(EventType.RECORDER_UPDATE_CONSTRAINTS);\n        }\n    }\n\n    /**\n     * Get current constraints/settings\n     * @returns MediaTrackSettings\n     */\n    private getConstraints() {\n        if (this.stream) {\n            const tracks = this.stream.getTracks();\n\n            if (tracks && tracks.length > 0) {\n                return tracks[0].getSettings();\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Update the current constraints\n     */\n    private updateConstraints() {\n        const constraints = this.getConstraints();\n\n        if (constraints) {\n            this.constraints.audio = Object.assign(this.constraints.audio, constraints);\n            this.eventEmitter?.emit(EventType.RECORDER_UPDATE_CONSTRAINTS);\n        }\n    }\n\n    /**\n     * Reset the current constraints\n     * @param newConstraint AudioConstraintWrapper\n     */\n    private async resetConstraints(newConstraint?: AudioConstraintWrapper) {\n        if (this.stream) {\n            const precAudioFeedback = this.enableAudioFeedback;\n            const precRecording = this.recording;\n            const tracks = this.stream.getTracks();\n\n            if (newConstraint) {\n                this.updateConstraints();\n                this.constraints.audio = Object.assign(this.constraints.audio, newConstraint.audio);\n            }\n\n            if (tracks && tracks.length > 0) {\n                try {\n                    await tracks[0].applyConstraints(this.constraints.audio);\n\n                    const newConstraints = this.getConstraints();\n                    const newConstraintName = newConstraint ? Object.keys(newConstraint.audio)[0] : \"\";\n\n                    this.audioFeedback(false);\n                    this.pause();\n\n                    if (!newConstraint ||\n                        (newConstraints && (newConstraints as AudioConstraint)[newConstraintName] != newConstraint.audio[newConstraintName])) {\n                        this.stopStream();\n\n                        const stream = await navigator.mediaDevices.getUserMedia(this.constraints);\n\n                        await this.setup(stream, precRecording, precAudioFeedback);\n                    } else {\n                        await this.setup(null, precRecording, precAudioFeedback);\n                    }\n                } catch (e) {\n                    this.errorCallback();\n                }\n            }\n        }\n    }\n\n    /**\n     * Setup this voice recorder\n     * @param stream MediaStream\n     * @param precRecording Was recording?\n     * @param precAudioFeedback Has audio feedback?\n     */\n    private async setup(stream: MediaStream | null, precRecording: boolean, precAudioFeedback: boolean) {\n        if (stream && this.context) {\n            this.input = this.context.createMediaStreamSource(stream);\n            this.stream = stream;\n        }\n\n        if (this.recorder && this.input) {\n            await this.recorder.setup(this.input);\n\n            if (precRecording) {\n                await this.record();\n            }\n        }\n\n        this.audioFeedback(precAudioFeedback);\n        this.updateConstraints();\n        await this.updateInputList();\n    }\n\n    /**\n     * Enable/disable noise suppression\n     * @param enable boolean\n     */\n    setNoiseSuppression(enable: boolean) {\n        this.resetConstraints({\n            audio: {\n                noiseSuppression: enable\n            }\n        });\n    }\n\n    /**\n     * Enable/disable auto gain\n     * @param enable boolean\n     */\n    setAutoGain(enable: boolean) {\n        this.resetConstraints({\n            audio: {\n                autoGainControl: enable\n            }\n        });\n    }\n\n    /**\n     * Enable/disable echo cancellation\n     * @param enable boolean\n     */\n    setEchoCancellation(enable: boolean) {\n        this.resetConstraints({\n            audio: {\n                echoCancellation: enable\n            }\n        });\n    }\n\n    /**\n     * Update current audio input list\n     */\n    private async updateInputList() {\n        if (this.deviceList) {\n            const devices = await navigator.mediaDevices.enumerateDevices();\n            this.deviceList = [];\n\n            devices.forEach(device => {\n                if (device.kind == \"audioinput\") {\n                    this.deviceList.push(device);\n                }\n            });\n        }\n    }\n\n    /**\n     * Change audio input\n     * @param deviceId Device ID\n     * @param groupId Group ID (optional)\n     */\n    changeInput(deviceId: string, groupId: string | undefined) {\n        if (groupId) {\n            this.constraints.audio.deviceId = deviceId;\n            this.constraints.audio.groupId = groupId;\n            this.resetConstraints();\n        }\n    }\n\n    /**\n     * Start audio recording\n     */\n    async record() {\n        if (this.alreadyInit && this.configService && this.input) {\n            if (!this.recorder) {\n                this.recorder = new Recorder({\n                    bufferLen: this.configService.getBufferSize(),\n                    sampleRate: this.configService.getSampleRate(),\n                    numChannels: 2,\n                    workletBasePath: this.configService.getWorkletBasePath(),\n                    workerBasePath: this.configService.getWorkerBasePath(),\n                    mimeType: \"audio/wav\"\n                });\n\n                await this.recorder.setup(this.input);\n            }\n\n            if (this.recorder) {\n                this.recorder.record();\n            }\n\n            this.timer && this.timer.start();\n            this.recording = true;\n\n            if (this.eventEmitter) {\n                this.eventEmitter.emit(EventType.RECORDER_RECORDING);\n            }\n        }\n    }\n\n    /**\n     * Stop audio recording\n     */\n    async stop() {\n        if (this.alreadyInit && this.recorder) {\n            this.recorder.stop();\n            this.timer && this.timer.stop();\n            this.recording = false;\n\n            this.recorder.getBuffer((buffer: Float32Array[]) => {\n                if (this.context) {\n                    this.context.resume();\n\n                    const newBuffer = this.context.createBuffer(2, buffer[0].length, this.context.sampleRate);\n                    newBuffer.getChannelData(0).set(buffer[0]);\n                    newBuffer.getChannelData(1).set(buffer[1]);\n\n                    this.eventEmitter?.emit(EventType.RECORDER_STOPPED, newBuffer);\n                    this.reset();\n                }\n            });\n        }\n    }\n\n    /**\n     * Pause audio recording\n     */\n    pause() {\n        if (this.alreadyInit) {\n            this.recorder && this.recorder.stop();\n            this.timer && this.timer.stop();\n            this.recording = false;\n            this.eventEmitter?.emit(EventType.RECORDER_PAUSED);\n        }\n    }\n\n    /**\n     * Stop stream\n     */\n    private stopStream() {\n        if (this.stream) {\n            const tracks = this.stream.getTracks();\n\n            for (let i = 0, l = tracks.length; i < l; i++) {\n                tracks[i].stop();\n            }\n        }\n    }\n\n    /**\n     * Reset this voice recorder\n     */\n    reset() {\n        this.recorder && this.recorder.kill();\n        this.timer && this.timer.stop();\n        this.audioFeedback(false);\n\n        this.stopStream();\n\n        this.input = null;\n        this.recorder = null;\n        this.stream = null;\n        this.alreadyInit = false;\n        this.timer = null;\n\n        this.eventEmitter?.emit(EventType.RECORDER_RESETED);\n    }\n\n    /**\n     * Get current recording time in text format\n     */\n    get currentTimeDisplay() {\n        return this.timer?.seconds ? (\"0\" + Math.trunc(this.timer?.seconds / 60)).slice(-2) + \":\" + (\"0\" + Math.trunc(this.timer?.seconds % 60)).slice(-2) : \"00:00\";\n    }\n\n    /**\n     * Get current recording time in seconds\n     */\n    get currentTime() {\n        return this.timer ? this.timer.seconds : 0;\n    }\n\n    /**\n     * Get the current settings for this voice recorder\n     * @returns RecorderSettings\n     */\n    getSettings(): RecorderSettings {\n        return {\n            deviceList: this.deviceList,\n            audioFeedback: this.enableAudioFeedback,\n            constraints: this.constraints.audio\n        };\n    }\n\n    /**\n     * Observe an event\n     * @param event The event name\n     * @param callback Callback called when an event of this type occurs\n     */\n    on(event: string, callback: EventEmitterCallback) {\n        this.eventEmitter?.on(event, callback);\n    }\n\n    /**\n     * Check if browser is compatible with audio recording\n     * @returns boolean\n     */\n    isRecordingAvailable() {\n        return typeof (navigator.mediaDevices) !== \"undefined\" && typeof (navigator.mediaDevices.getUserMedia) !== \"undefined\";\n    }\n\n    get order(): number {\n        return -1;\n    }\n\n    get id(): string {\n        throw Constants.VOICE_RECORDER;\n    }\n}\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","SuppressedError","AbstractAudioElement","constructor","this","enabled","defaultEnabled","bufferFetcherService","bufferDecoderService","configService","isEnabled","isDefaultEnabled","setDefaultEnabled","state","setEnabled","enable","disable","toggle","utilFunctions","calcAudioDuration","audio","speed","duration","loadAudioBuffer","context","file","arrayBuffer","readAsArrayBufferPromisified","audioBuffer","decodeAudioData","decodeBuffer","reader","FileReader","onload","ev","_a","target","ArrayBuffer","readAsArrayBuffer","buffer","numberOfChannels","resume","sampleRate","newBuffer","createBuffer","sourceChannelData","getChannelData","channel0Data","channel1Data","i","length","convertAudioBufferToFloat32Array","array","channel","push","convertAudioParamToFloat32Array","param","Float32Array","set","sumAudioBufferChannel","reduce","a","b","sumAudioBuffer","sum","isAudioWorkletCompatible","audioContext","isSettingValueValid","isNaN","Number","trim","EventType","EventEmitter","listeners","on","event","callback","emit","data","forEach","off","filter","cb","Constants","AUDIO_EDITOR","VOICE_RECORDER","BUFFER_PLAYER","EXPORT_WAV_COMMAND","EXPORT_MP3_COMMAND","AUDIO_WAV","AUDIO_MP3","RECORD_COMMAND","INIT_COMMAND","FILTERS_NAMES","REVERB","ECHO","BASS_BOOST","BITCRUSHER","HIGH_PASS","LIMITER","LOW_PASS","PASSTHROUGH","RETURN_AUDIO","SOUNDTOUCH","TELEPHONIZER","VOCODER","WORKLET_PATHS","RECORDER_WORKLET","WORKLET_NAMES","PREFERENCES_KEYS","COMPATIBILITY_MODE_ENABLED","COMPATIBILITY_MODE_CHECKED","ENABLE_AUDIO_WORKLET","ENABLE_SOUNDTOUCH_AUDIO_WORKLET","BUFFER_SIZE","SAMPLE_RATE","DISABLE_INITIAL_RENDERING","BITRATE_MP3","ENABLE_RECORDER_AUDIO_WORKLET","SOUNDTOUCH_PITCH_SHIFTER_BUFFER_SIZE","DEFAULT_REVERB_ENVIRONMENT","name","url","size","addDuration","link","VOCODER_MODULATOR","DEFAULT_BUFFER_SIZE","VALID_BUFFER_SIZE","VALID_MP3_BITRATES","DEFAULT_SAMPLE_RATE","VALID_SAMPLE_RATES","TREATMENT_TIME_COUNTING_THROTTLE_INTERVAL","TREATMENT_TIME_COUNTING_SMOOTHING_FACTOR","DEFAULT_SAVE_FORMAT","DEFAULT_MP3_BITRATE","BufferPlayer","contextManager","eventEmitter","super","source","currentTime","displayTime","intervals","playing","loop","speedAudio","onBeforePlayingCallback","compatibilityMode","currentNode","_contextManager","init","direct","currentContext","disconnect","createBufferSource","connect","destination","updateInfos","loadBuffer","reset","setCompatibilityMode","clearIntervals","stop","undefined","PLAYING_STOPPED","interval","clearInterval","start","PLAYING_STARTED","startTime","performance","now","window","setInterval","timeNow","nextTime","PLAYING_FINISHED","_b","playDirect","pause","PLAYING_UPDATE","setTimePercent","percent","Math","round","setTime","time","onBeforePlaying","toggleLoop","currentTimeDisplay","trunc","slice","maxTimeDisplay","remainingTimeDisplay","order","id","BufferFetcherService","buffers","Map","bufferErrors","fetchBuffer","bufferURI","force","realBufferURI","getSoundBasePath","get","getKeyFromLocation","FETCHING_BUFFERS","response","fetch","ok","FETCHING_BUFFERS_ERROR","_c","FINISHED_FETCHING_BUFFERS","_d","fetchAllBuffers","bufferURIs","uri","getAudioBuffer","filename","getOrFetchAudioBuffer","getDownloadedBuffersList","Array","from","keys","location","substring","lastIndexOf","clear","GenericConfigService","mapConfig","getConfig","key","setConfig","isCompatibilityModeEnabled","isCompatibilityModeChecked","isAudioWorkletEnabled","setting","isSoundtouchAudioWorkletEnabled","getBufferSize","parseInt","getSampleRate","getBitrateMP3","enableCompatibilityMode","disableCompatibilityMode","getWorkletBasePath","getWorkerBasePath","isInitialRenderingDisabled","BufferDecoderService","decodeBufferFromFile","DECODING_AUDIO_FILE","DECODED_AUDIO_FILE","console","error","ERROR_DECODING_AUDIO_FILE","AbstractAudioFilter","defaultSettings","getAddingTime","initializeDefaultSettings","getSettings","getDefaultSettings","resetSettings","setSetting","isWorklet","BassBoosterFilter","frequencyBooster","dbBooster","frequencyReduce","dbReduce","getNode","bassBoostFilter","createBiquadFilter","type","frequency","gain","bassBoostFilterHighFreq","input","output","settingId","AudioParamPolyfill","defaultValue","_value","_minValue","_maxValue","MAX_SAFE_INTEGER","_defaultValue","automationRate","newValue","max","min","minValue","maxValue","setValueAtTime","warn","linearRampToValueAtTime","endTime","exponentialRampToValueAtTime","cancelAndHoldAtTime","cancelTime","Error","cancelScheduledValues","setTargetAtTime","timeConstant","setValueCurveAtTime","values","WorkletScriptProcessorNodeAdapter","node","bufferSize","_parameters","_port","workletProcessor","_scriptProcessorNode","createScriptProcessor","setupPort","setupProcessor","setupWorkletScope","messageChannel","MessageChannel","port1","onmessage","port2","postMessage","onaudioprocess","inputArray","Functions","inputBuffer","ouputArray","outputBuffer","records","entries","recordsMap","Object","fromEntries","process","descriptors","defaultParameterDescriptors","descriptor","port","parameters","RegisterProcessorPolyfill","registerProcessor","processorName","processorClass","processorsMap","getProcessor","processor","SimpleAudioWorkletProcessor","inputs","outputs","parameterDescriptors","AudioWorkletProcessor","global","AbstractAudioFilterWorklet","currentWorkletNode","fallbackToScriptProcessor","keepCurrentNodeIfPossible","initializeWorklet","workletPath","audioWorklet","addModule","catch","initializeNode","workletName","AudioWorkletNode","message","receiveEvent","applyCurrentSettingsToWorklet","currentSettings","settingKey","settingFromWorklet","BitCrusherProcessor","stopped","phaser","last","pow","bits","currentNormFreq","normFreq","fill","blockSize","inp","out","floor","parseFloat","EchoFilter","delay","delayNode","createDelay","delayTime","gainNode","createGain","HighPassFilter","highFrequency","highPassFilter","DelayBuffer","n","_array","readPointer","writePointer","read","v","LimiterProcessor","delayBuffer","envelopeSample","disabled","getEnvelope","attackTime","releaseTime","attackGain","exp","releaseGain","envelope","envIn","abs","getMaxEnvelope","channels","index","ampToDB","log10","dBToAmp","db","envelopeData","postGainAmp","postGain","preGainAmp","preGain","lookAheadTime","k","slope","gainDB","threshold","LimiterFilter","LowPassFilter","lowFrequency","lowPassFilter","AbstractAudioRenderer","ReturnAudioRenderer","renderAudio","numChannels","totalFrames","bufferReturned","nowBuffering","ReverbFilter","reverbEnvironment","reverbCustomEnvironmentAddTime","customEnvironment","convolver","createConvolver","getReverbBuffer","settings","additionalData","downloadedBuffers","hasCustomEnvironment","FifoSampleBuffer","_vector","_position","_frameCount","vector","position","startIndex","frameCount","endIndex","receive","rewind","put","numFrames","putSamples","samples","sourceOffset","numSamples","ensureCapacity","destOffset","subarray","putBuffer","receiveSamples","extract","minLength","newVector","ensureAdditionalCapacity","AbstractFifoSamplePipe","createBuffers","_inputBuffer","_outputBuffer","RateTransposer","_rate","rate","slopeCount","prevSampleL","prevSampleR","clone","numFramesOutput","transpose","src","srcOffset","dest","used","srcIndex","FilterSupport","pipe","_pipe","fillInputBuffer","fillOutputBuffer","numInputFrames","noop","SimpleFilter","sourceSound","historyBufferSize","_sourcePosition","outputBufferPosition","RangeError","newOutputBufferPosition","sourcePosition","onEnd","numFramesExtracted","currentFrames","handleSampleData","_SCAN_OFFSETS","AUTOSEEK_K","Stretch","_quickSeek","midBufferDirty","midBuffer","overlapLength","autoSeqSetting","autoSeekSetting","_tempo","setParameters","clearMidBuffer","sequenceMs","seekWindowMs","overlapMs","calculateSequenceParameters","calculateOverlapLength","tempo","newTempo","intskip","nominalSkip","seekWindowLength","skipFract","sampleReq","seekLength","inputChunkSize","outputChunkSize","overlapInMsec","newOvl","refMidBuffer","checkLimits","x","mi","ma","seq","seek","AUTOSEQ_AT_MIN","AUTOSEEK_AT_MIN","quickSeek","seekBestOverlapPosition","seekBestOverlapPositionStereoQuick","seekBestOverlapPositionStereo","bestOffset","bestCorrelation","correlation","preCalculateCorrelationReferenceStereo","MIN_VALUE","calculateCrossCorrelationStereo","correlationOffset","tempOffset","scanCount","j","temp","mixingPosition","compare","mixing","calcLength","mixingOffset","overlap","overlapPosition","overlapStereo","inputPosition","outputPosition","tempFrame","frameScale","fi","inputOffset","outputOffset","offset","overlapSkip","testFloatEqual","SoundTouch","transposer","stretch","_intermediateBuffer","virtualPitch","virtualRate","virtualTempo","calculateEffectiveRateAndTempo","rateChange","tempoChange","pitch","pitchOctaves","pitchSemitones","previousTempo","previousRate","WebAudioBufferSource","dualChannel","left","right","minsSecs","secs","mins","width","z","join","onUpdate","currentTimePlayed","timePlayed","CustomEvent","detail","formattedTimePlayed","percentagePlayed","_node","dispatchEvent","PitchShifter","_soundtouch","_filter","sourcePositionCallback","framesExtracted","getWebAudioNode","sourcePostion","call","formattedDuration","perc","semitone","toNode","eventName","addEventListener","removeEventListener","soundtouchWrapperFilterWorkletNodeClass","options","running","_pitch","updateInterval","processorOptions","setup","status","args","messageProcessor","bind","command","SoundtouchWrapperFilterWorkletNode","SoundtouchWrapperFilter","frequencyAudio","currentSpeedAudio","isOfflineMode","constructAudioWorkletProcessor","getEntrypointNode","offline","cleanUpOldNodes","bufferSource","utils","renderWithWorklet","renderWithScriptProcessorNode","currentPitchShifter","getSoundtouchScriptProcessorNode","updateState","currentPitchShifterWorklet","durationAudio","offlineContext","OfflineAudioContext","renderedBuffer","startRendering","bufferSourceRendered","bypass","recording","nInputFrames","approximateNInputFrames","getCurrentPitchShifter","pitchShifter","valueFloat","getSpeed","BitCrusherFilter","lpf1","lpf2","hpf1","hpf2","Vocoder","ctx","carrierB","modulatorB","FILTER_QUALITY","FOURIER_SIZE","WAVETABLEBOOST","SAWTOOTHBOOST","oscillatorType","oscillatorDetuneValue","carrierBuffer","modulatorNode","vocoding","modulatorInput","carrierInput","modulatorGain","modulatorGainValue","noiseBuffer","noiseNode","noiseGain","noiseGainValue","carrierSampleNode","carrierSampleGain","carrierSampleGainValue","oscillatorNode","oscillatorGain","oscillatorGainValue","wavetable","wavetableSignalGain","modFilterBands","modFilterPostGains","heterodynes","powers","lpFilters","lpFilterPostGains","carrierBands","carrierFilterPostGains","carrierBandGains","vocoderBands","numVocoderBands","hpFilterGain","outputGain","modulatorBuffer","generateVocoderBands","setupVocoderGraph","vocode","getNodes","synthLevel","shutOffCarrier","selectSawtooth","selectWavetable","setPeriodicWave","updateModGain","updateSampleLevel","updateSynthLevel","updateNoiseLevel","updateDetuneValue","detune","startFreq","endFreq","numBands","centsPerBand","log","LN2","scale","currentFreq","loadNoiseBuffer","lengthInSamples","bufferData","random","initBandpassFilters","waveShaperCurve","n2","hpFilter","Q","rectifierCurve","modulatorFilter","secondModulatorFilter","modulatorFilterPostGain","heterodyneOscillator","createOscillator","heterodyne","heterodynePostGain","rectifier","createWaveShaper","curve","lpFilter","lpFilterPostGain","waveshaper","carrierFilter","secondCarrierFilter","carrierFilterPostGain","bandGain","real","imag","createPeriodicWave","createCarriersAndPlay","VocoderFilter","currentVocoder","applyCurrentSettingsToVocoder","PassthroughWorkletProcessor","samplesCount","sample","PassThroughFilter","_totalSamples","lastSampleCount","samplePerSecond","currentTimeSamplesPerSecond","samplesProcessed","calculatePercentageProcessed","calculateRemainingTimeProcessing","timeDifference","percentageProcessed","UPDATE_AUDIO_TREATMENT_PERCENT","timeDifferenceSamplePerSecond","remainingSamples","UPDATE_REMAINING_TIME_ESTIMATED","calculateSmoothedSamplePerSecond","remainingTimeSeconds","isFinite","currentSampleRate","totalSamples","FilterManager","filters","renderers","_entryPointFilter","_currentNodes","setupDefaultFilters","setupDefaultRenderers","addFilters","addRenderers","renderer","bassBooster","bitCrusher","echo","highPass","lowPass","reverb","soundtouchWrapper","limiterFilter","telephonizerFilter","TelephonizerFilter","vocoder","passthrough","returnAudio","getFiltersState","getFiltersSettings","toggleFilter","filterId","find","f","changeFilterSettings","resetFilterSettings","resetAllFiltersState","element","connectNodes","keepCurrentInputOutput","isCompatibilityMode","entrypointNode","entrypointNodes","intermediateNodes","previousNode","disconnectOldNodes","sort","keepCurrentOutput","intermediate","initializeWorklets","executeAudioRenderers","outputContext","currentBuffer","setupPlayerSpeed","bufferPlayer","setupPasstroughFilter","passthroughFilter","entrypointFilter","currentNodes","AudioContextManager","previousSampleRate","_currentContext","SAMPLE_RATE_CHANGED","createNewContext","createNewContextIfNeeded","principalBuffer","oldAudioContext","destroyOldContext","latencyHint","AudioContext","close","getRecorderWorker","workerBasePath","Worker","Recorder","cfg","worker","config","bufferLen","mimeType","workletBasePath","bitrate","callbacks","getBuffer","exportWAV","exportMP3","assign","createRecorderNode","pop","createRecorderWorklet","createRecorderScriptProcessorNode","numChannelParameter","record","kill","terminate","forceDownload","blob","document","createElement","URL","webkitURL","createObjectURL","body","appendChild","href","download","click","revokeObjectURL","SaveBufferManager","savingBuffer","playingStoppedCallback","saveBuffer","savingResult","saveBufferCompatibilityMode","saveBufferDirect","downloadAudioBlob","format","filterManager","rec","finishedCallback","downloadBlobCallback","Date","toISOString","TimerSaveTime","seconds","incr","initialSeconds","countCallback","count","onCount","player","audioBuffersToFetch","sumPrincipalBuffer","audioRenderingLastCanceled","initialRenderingDone","downloadingInitialData","saveBufferManager","setupOutput","fetchBuffers","refetch","LOADING_BUFFERS","LOADED_BUFFERS","LOADING_BUFFERS_ERROR","resetBufferFetcher","resetReverbFilterBuffer","reverbSettings","reverbUrl","prepareContext","defaultDeviceSampleRate","tempContext","loadBufferFromFile","resetAudioRenderingProgress","getOutputBuffer","loadInitialBuffer","calculateAudioDuration","currentOfflineContext","loadRenderedAudio","OFFLINE_AUDIO_RENDERING_FINISHED","AUDIO_RENDERING_FINISHED","CANCELLED_AND_LOADED_INITIAL_AUDIO","setCompatibilityModeChecked","COMPATIBILITY_MODE_AUTO_ENABLED","RENDERING_AUDIO_PROBLEM_DETECTED","cancelAudioRendering","CANCELLING_AUDIO_PROCESSING","isAudioWorkletAvailable","checked","reconnectNodesIfNeeded","exit","stream","recorder","alreadyInit","timer","enableAudioFeedback","deviceList","constraints","noiseSuppression","echoCancellation","autoGainControl","ideal","sampleRateConfigNotSupported","isRecordingAvailable","navigator","mediaDevices","getSupportedConstraints","RECORDER_INIT","getUserMedia","RECORDER_COUNT_UPDATE","successCallback","errorCallback","notFoundErrorCallback","unknownErrorCallback","ondevicechange","updateInputList","RECORDER_SUCCESS","RECORDER_ERROR","RECORDER_NOT_FOUND_ERROR","RECORDER_UNKNOWN_ERROR","audioFeedback","RECORDER_UPDATE_CONSTRAINTS","getConstraints","tracks","getTracks","updateConstraints","resetConstraints","newConstraint","precAudioFeedback","precRecording","applyConstraints","newConstraints","newConstraintName","stopStream","createMediaStreamSource","setNoiseSuppression","setAutoGain","setEchoCancellation","devices","enumerateDevices","device","kind","changeInput","deviceId","groupId","RECORDER_RECORDING","RECORDER_STOPPED","RECORDER_PAUSED","l","RECORDER_RESETED"],"mappings":"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","x_google_ignoreList":[0,29]}